<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Narnia on Unlogic </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://unlogic.co.uk/tags/narnia/</link>
    
    
    
    <updated>Mon, 13 Apr 2015 00:00:00 UTC</updated>
    
    <item>
      <title>Solving Narnia Part 2</title>
      <link>http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/</guid>
      <description>Carrying on from Part 1 Level 05 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; int main(int argc, char **argv){ int i = 1; char buffer[64]; snprintf(buffer, sizeof buffer, argv[1]); buffer[sizeof (buffer) - 1] = 0; printf(&amp;quot;Change i&amp;#39;s value from 1 -&amp;gt; 500. &amp;quot;); if(i==500){ printf(&amp;quot;GOOD\n&amp;quot;); system(&amp;quot;/bin/sh&amp;quot;); } printf(&amp;quot;No way...let me give you a hint!\n&amp;quot;); printf(&amp;quot;buffer : [%s] (%d)\n&amp;quot;, buffer, strlen(buffer)); printf (&amp;quot;i = %d (%p)\n&amp;quot;, i, &amp;amp;i); return 0; } A fixed sized buffer again.</description>
    </item>
    
    <item>
      <title>Solving Narnia Part 1</title>
      <link>http://unlogic.co.uk/2015/04/08/solving-narnia-part1/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2015/04/08/solving-narnia-part1/</guid>
      <description>Next up we take on Narnia. This is a binary exploit centered wargame, so fire up your debuggers and let&amp;rsquo;s smash those stacks. For levels 5, 6, 7, and 8, see part 2 All levels are in /narnia and both the binary and the source are provided. I&amp;rsquo;ve not included the passwords here, so you&amp;rsquo;ll have to work through the exercises yourself (or find them elsewhere :)) Level 00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; int main(){ long val=0x41414141; char buf[20]; printf(&amp;quot;Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!\n&amp;quot;); printf(&amp;quot;Here is your chance: &amp;quot;); scanf(&amp;quot;%24s&amp;quot;,&amp;amp;buf); printf(&amp;quot;buf: %s\n&amp;quot;,buf); printf(&amp;quot;val: 0x%08x\n&amp;quot;,val); if(val==0xdeadbeef) system(&amp;quot;/bin/sh&amp;quot;); else { printf(&amp;quot;WAY OFF!!!!\n&amp;quot;); exit(1); } return 0; } Lines 8 and 9 tell us what we need to do.</description>
    </item>
    
  </channel>
</rss>

