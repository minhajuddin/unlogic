<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Houdini on Unlogic</title>
    <link>http://unlogic.co.uk/tags/houdini/</link>
    <description>Recent content in Houdini on Unlogic</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Mar 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://unlogic.co.uk/tags/houdini/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Unit testing Houdini Python plugins with nose and coverage</title>
      <link>http://unlogic.co.uk/2014/03/20/unit-testing-houdini-plugins-with-nose-and-coverage/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2014/03/20/unit-testing-houdini-plugins-with-nose-and-coverage/</guid>
      <description>&lt;p&gt;We all know how important unit testing is, right? But often you wonder how can
you test a not so straight forward tool. In this case we&amp;rsquo;re talking about a
Python script intended to run inside &lt;a href=&#34;http://sidefx.com&#34;&gt;Houdini&lt;/a&gt;. In my specific
case the python script is launched from a script on a node when the user clicks
a button on the OTL. I want to run unit tests on this script, but the problem is
that the script parses a set of nodes and does various things according to the
types of nodes and layout of the nodes. It&amp;rsquo;s clear that the HOM is required in the
unit tests. So I need to somehow run my unit tests inside houdini and have
some nodes available for my testing. Fortunately this isn&amp;rsquo;t difficult to do, but
it does require a little setup and some fiddling in order to get it to work.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be using &lt;a href=&#34;https://nose.readthedocs.org&#34;&gt;nose tests&lt;/a&gt; as my test runner and
&lt;a href=&#34;http://nedbatchelder.com/code/coverage/&#34;&gt;coverage&lt;/a&gt; for coverage testing.
Because I want to make sure I test as much code as possible. I created a hip file that
contains whatever nodes and connections I need to run most of the tests and saved
this to the same directory as my test script.&lt;/p&gt;

&lt;p&gt;Before we write some code you will need to install &lt;code&gt;nose&lt;/code&gt; and &lt;code&gt;coverage&lt;/code&gt; and make
sure they work.&lt;/p&gt;

&lt;p&gt;Now that we have all our dependencies installed, we need to import all the
modules we need and set some things up.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nose&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;insert(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;../path_of_module&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;NOSE_WITH_COVERAGE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;NOSE_COVER_PACKAGE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;module_to_test&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hou&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;module_to_test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We import the &lt;code&gt;nose&lt;/code&gt; module and then we need to tell nose to make use of the
coverage package. &lt;code&gt;os.environ[&#39;NOSE_WITH_COVERAGE&#39;] = &#39;1&#39;&lt;/code&gt; does just that, and
&lt;code&gt;os.environ[&#39;NOSE_COVER_PACKAGE&#39;] = &#39;module_to_test&#39;&lt;/code&gt; restricts our test results to
the module(s) we want to test. If you want to specify multiple modules simply
separate them with commas: &lt;code&gt;os.environ[&#39;NOSE_COVER_PACKAGE&#39;] = &#39;module_to_test,another_module&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately for this to work properly you need to patch nose&amp;rsquo;s cover plugin.
There&amp;rsquo;s a small bug in older versions, so depending on your distro you may need to
make the following change to
&lt;code&gt;nose/plugins/cover.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Change these lines
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pkgs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[tolist(x)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cover_packages]:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;coverPackages&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;extends(pkgs)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;to these lines
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pkgs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tolist(options&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cover_packages):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;coverPackages&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;append(pkgs)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Otherwise the &lt;code&gt;NOSE_COVER_PACKAGE&lt;/code&gt; variable won&amp;rsquo;t work properly.&lt;/p&gt;

&lt;p&gt;I also setup the &lt;code&gt;sys.path&lt;/code&gt; so that I load my local module rather
than the globally installed one. Depending on how your directories are laid out
you might not need this.&lt;/p&gt;

&lt;p&gt;After this we need to import the &lt;code&gt;hou&lt;/code&gt; module and finally the module(s) we want to test.&lt;/p&gt;

&lt;p&gt;Then we write our main function which will load our hip file and start our tests&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;hou&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hipFile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;load(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/path/to/test.hip&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;nose&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;run(argv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[__file__],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;--cover_html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, you can pass the commandline argments for nose into the run function.
With &lt;code&gt;--cover_html&lt;/code&gt; we automatically generate the html coverage information. You
could omit this and run &lt;code&gt;coverage html&lt;/code&gt; after the tests complete to generate the
html coverage pages instead. The output from the two methods is slightly different,
so pick the one that you prefer.&lt;/p&gt;

&lt;p&gt;The next bits are up to you now, here you write your tests following a format like&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_afunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hou&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;node(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/obj/geo/box1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;module_to_test&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;do_stuff(node)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You can access any and all &lt;code&gt;hou.&lt;/code&gt; calls from your tests, so do what you must.&lt;/p&gt;

&lt;p&gt;Once you are happy with your tests, or you just want to go ahead and test a single
one, we need to run the tests through hython. Bear in mind that you&amp;rsquo;ll consume a
batch license when you run these tests.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;hython ./test.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;where &lt;code&gt;test.py&lt;/code&gt; is the name of the file that contains the tests you wrote.
After a while you&amp;rsquo;ll see your tests run and the coverage output. It should
look a little like this&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;...
Name          Stmts   Miss  Cover   Missing
-------------------------------------------
module_to_test  &lt;span style=&#34;color: #ae81ff&#34;&gt;25&lt;/span&gt;     &lt;span style=&#34;color: #ae81ff&#34;&gt;14&lt;/span&gt;    44%   1-2, 6, 9, 12-15, 21, 27-32
another_module  &lt;span style=&#34;color: #ae81ff&#34;&gt;314&lt;/span&gt;    &lt;span style=&#34;color: #ae81ff&#34;&gt;173&lt;/span&gt;    45%   4-20, 24, 37-38, 46
-------------------------------------------
TOTAL           &lt;span style=&#34;color: #ae81ff&#34;&gt;339&lt;/span&gt;    &lt;span style=&#34;color: #ae81ff&#34;&gt;187&lt;/span&gt;    45%   
----------------------------------------------------------------------
Ran &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; tests in 0.053s

OK
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also have a directory called &lt;code&gt;cover&lt;/code&gt; which will contain the html output,
assuming you have the &lt;code&gt;--cover_html&lt;/code&gt; flag on. If not, run &lt;code&gt;coverage html&lt;/code&gt; and
after a short wait you will have a &lt;code&gt;htmlcov&lt;/code&gt; directory with the html coverage
info.&lt;/p&gt;

&lt;p&gt;I hope this helps you out if you ever wanted to unit test your Houdini Python
script. It&amp;rsquo;s not as difficult as I thought, but it does take a little bit of setting
up to get everything to work right. There will still be some limitations as to what
you can test and get results for, but any testing is always better than none at
all I say.&lt;/p&gt;

&lt;p&gt;And the &lt;code&gt;test.py&lt;/code&gt; file as a whole&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nose&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;insert(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;../path_of_module&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;NOSE_WITH_COVERAGE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;NOSE_COVER_PACKAGE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;module_to_test&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hou&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;module_to_test&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_afunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hou&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;node(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/obj/geo/box1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;module_to_test&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;do_stuff(node)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;hou&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hipFile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;load(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/path/to/test.hip&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;nose&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;run(argv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[__file__],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;--cover_html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Houdini voronoi shatter</title>
      <link>http://unlogic.co.uk/2012/12/08/houdini-voronoi-shatter/</link>
      <pubDate>Sat, 08 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2012/12/08/houdini-voronoi-shatter/</guid>
      <description>&lt;p&gt;Thought I would write about creating a very simple voronoi shatter effect in Houdini and how to explode it. The video below demonstrates the effect we&amp;rsquo;re looking to achieve:&lt;/p&gt;

&lt;p&gt;{% vimeo 55168444 %}&lt;/p&gt;

&lt;p&gt;The process of creating this is very simple, and I learned a few things from setting this up, so I figured I would share and hope you learn something from it too.&lt;/p&gt;

&lt;p&gt;So first we need to drop down a &lt;em&gt;Geometry&lt;/em&gt; node and dive inside. Delete the file node and then create a &lt;em&gt;box&lt;/em&gt; node. This box will be the object we will shatter. But in order to create a voronoi shatter we also need some seed points to generate the pattern with. So let&amp;rsquo;s do that first. We&amp;rsquo;ll use our box to generate the points we need, so drop down a &lt;em&gt;Points From Volume&lt;/em&gt; node and connect the box to its input. Adjust the settings to your liking, or copy the ones below. I kept the number of points low as I wanted fewer and larger pieces.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://unlogic.co.uk/images/content/points_from_vol.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Now that we have our points we can drop down a &lt;em&gt;Voronoi Fracture&lt;/em&gt; node and connect the points to its second input. The only setting I changed was to turn on &lt;code&gt;Connect Inside Edges&lt;/code&gt;. Finally we need to connect the &lt;em&gt;box&lt;/em&gt; node to the &lt;em&gt;Voronoi Shatter&amp;rsquo;s&lt;/em&gt; first input. Now make the &lt;em&gt;Voronoi shatter&lt;/em&gt; visible and you should see your fractured geo.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;center%20/images/content/fracture.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Next we&amp;rsquo;ll turn on the dynamics via the rigid bodies shelf at the top. Click &lt;em&gt;RBD Fracture&lt;/em&gt; and make sure the voronoi geo is selected and press enter. If you press play now your object will fall down. Hrmmm, not totally awesome, as we wanted to explode it a little too. So the plan is to make all the pieces explode from the center outwards, like, for example, along the normals of a sphere say? Yes, that sounds about right. Ok, so let&amp;rsquo;s put down a &lt;em&gt;Sphere&lt;/em&gt; and scale it so that it&amp;rsquo;s roughly the same size as the box. Append a &lt;em&gt;Point&lt;/em&gt; node to the sphere and add a &lt;em&gt;Normal&lt;/em&gt; and &lt;em&gt;Velocity&lt;/em&gt; attribute. The &lt;em&gt;Velocity&lt;/em&gt; attribute is under the &lt;em&gt;Particle&lt;/em&gt; tab and we&amp;rsquo;ll set its value to be a facture of the point&amp;rsquo;s normal. Feel free to play with this value to get the efect you want. Basically this will set the point&amp;rsquo;s velocity to the normal at that point, causing the pieces to rediate outwards when the sim starts.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;center%20/images/content/vel_attribute.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Connect the output to the second input of an &lt;em&gt;Attribute Transfer&lt;/em&gt; node and then connect the output of that to the &lt;em&gt;Rest Position&lt;/em&gt; node. Connect the &lt;em&gt;Box&lt;/em&gt; to the first input of the &lt;em&gt;Attribute Transfer&lt;/em&gt; node. This will transfer the point attributes of the &lt;em&gt;Sphere&lt;/em&gt; onto the shattered geo. You should now have a network that looks like this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;center%20/images/content/finalnetwork.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;And yet still to exploding pieces? Well, we need to tell our solver to use the point velocity. So dive into the &lt;em&gt;Autodop Network&lt;/em&gt; and on the &lt;em&gt;RBD Fracture Object&lt;/em&gt; enable &lt;em&gt;Inherit Velocity From Point Velocity&lt;/em&gt;. Hit play and you should see it explode.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;center%20/images/content/inherit_pv.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>