<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Programming on Unlogic </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://unlogic.co.uk/tags/programming/</link>
    
    
    
    <updated>Fri, 23 Jan 2015 00:00:00 UTC</updated>
    
    <item>
      <title>Python: expect the unexpected</title>
      <link>http://unlogic.co.uk/2015/01/23/python-expect-the-unexpected/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2015/01/23/python-expect-the-unexpected/</guid>
      <description>I&amp;rsquo;ve not really had much of a play with Python 3, but I&amp;rsquo;m aware of some of its differences. Yesterday I found out about a difference that took me by surprise. Enough of a surprise that I felt the urge to write this post. Opinion Divided What surprised me was how / has changed in Python 3. In Python 2.7 it returns the result of the division of two numbers. &amp;gt;&amp;gt;&amp;gt; 8/2 4 &amp;gt;&amp;gt;&amp;gt; 10/3 3 Checks out to me.</description>
    </item>
    
    <item>
      <title>Solving Project Euler with Rust 2</title>
      <link>http://unlogic.co.uk/2015/01/20/solving-project-euler-with-rust-2/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2015/01/20/solving-project-euler-with-rust-2/</guid>
      <description>Carrying on with the series, here&amp;rsquo;s how I solved Project Euler&amp;rsquo;s problem 2: Even Fibonacci numbers Problem 2 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</description>
    </item>
    
    <item>
      <title>Solving Project Euler with Rust 1</title>
      <link>http://unlogic.co.uk/2015/01/12/solving-project-euler-with-rust-1/</link>
      <pubDate>Mon, 12 Jan 2015 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2015/01/12/solving-project-euler-with-rust-1/</guid>
      <description>It&amp;rsquo;s time to poke at Rust a little bit. And what better way to get acquainted with a new language than to solve some problems with it? And seeing as there&amp;rsquo;s not always a suitably simple problem handy, I&amp;rsquo;ve picked some problems from Project Euler to tackle. I am using Rust 1.0.0Alpha in this post. The first problem is: Multiples of 3 and 5 Problem 1 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.</description>
    </item>
    
    <item>
      <title>On YAGNI and TEFNAR</title>
      <link>http://unlogic.co.uk/2014/05/29/on-yagni-and-tefnar/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2014/05/29/on-yagni-and-tefnar/</guid>
      <description>You&amp;rsquo;ve probably heard of YAGNI but not of TEFNAR. To recap YAGNI stands for You Ain&amp;rsquo;t Gonna Need It and refers to the development principle of that you shouldn&amp;rsquo;t write a feature that no one has asked for in the first place as it&amp;rsquo;s probably never going to be needed. Instead wait until it&amp;rsquo;s a requirement and implement it then. This saves wasted effort and keeps the code base clean and as small as possible.</description>
    </item>
    
    <item>
      <title>Random album generator in python</title>
      <link>http://unlogic.co.uk/2012/11/06/random-album-generator/</link>
      <pubDate>Tue, 06 Nov 2012 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2012/11/06/random-album-generator/</guid>
      <description>&lt;p&gt;You may have heard about the &amp;ldquo;random music album&amp;rdquo; thing. Basically it goes like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The album cover is the 4th image from a random page of Flickr&amp;rsquo;s interesting pics&lt;/li&gt;
&lt;li&gt;The band name is the title of a random Wikipedia article&lt;/li&gt;
&lt;li&gt;The album name comes from the last 3 or 5 words of a famous quote&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is all well and good, but isn&amp;rsquo;t getting all this data manually, and then making the album cover a bit tedious? Sure it is, so let&amp;rsquo;s see how we can do this in python&lt;/p&gt;

&lt;p&gt;Here are some example images generated with this script (click for the full size picture):&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://unlogic.co.uk/images/content/album2.jpg&#34; /&gt;
    
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;http://unlogic.co.uk/images/content/album3.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://unlogic.co.uk/images/content/album4.jpg&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Show animated gifs using PyQT</title>
      <link>http://unlogic.co.uk/2012/11/02/animated-gifs-in-pyqt/</link>
      <pubDate>Fri, 02 Nov 2012 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2012/11/02/animated-gifs-in-pyqt/</guid>
      <description>This is just a quick post to show you how to display animated gifs in PyQt. It&amp;rsquo;s a straightforward process and by the end I will give you a class that wraps up the work for you. The way we&amp;rsquo;re going to approach this is by using a QLabel to render a QMovie. Assuming we have our gif (anim.gif) we need to load it into a QMovie and set it on the QLabel.</description>
    </item>
    
    <item>
      <title>Parsing email in python</title>
      <link>http://unlogic.co.uk/2012/10/11/parsing-email-in-python/</link>
      <pubDate>Thu, 11 Oct 2012 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2012/10/11/parsing-email-in-python/</guid>
      <description>&lt;p&gt;I have a domain where I host images. It&amp;rsquo;s nothing fancy, just a collection where gifs and generally humerous images get stored in a custom gallery script.
I also have a script on my host that I can pass a URL to and it will get the image with wget, put it in the right directory and then curl the import URL for the gallery. So if you&amp;rsquo;ve ever wanted to parse email addresses for content via a script, read on. Example code inside.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cmake and gcov</title>
      <link>http://unlogic.co.uk/2012/08/13/cmake-and-gcov/</link>
      <pubDate>Mon, 13 Aug 2012 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2012/08/13/cmake-and-gcov/</guid>
      <description>Recently I setup a project that uses CMake as its build tool and googletest as a unit test framework. As is common place I wanted to make sure that my tests cover as much of the code as possible, so I went and grabbed the trusty gcov/lcov to analyse the tests only to find it wasn&amp;rsquo;t as easy as I expected. I should mention this is the first time I have used CMake aswell as googletest.</description>
    </item>
    
    <item>
      <title>Did a change cross a threshold?</title>
      <link>http://unlogic.co.uk/2011/10/21/did-a-change-cross-a-threshold/</link>
      <pubDate>Fri, 21 Oct 2011 15:43:01 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2011/10/21/did-a-change-cross-a-threshold/</guid>
      <description>So recently I needed to check if a change to a number caused it to cross a threshold. In this case, did the change cause a crossing of a threshold that is a multiple of 25? To try and make this a little easier to understand: True if the first value is 14 and the new value is 28. (crosses 25) True if the first value is 43 and the new value is 58 .</description>
    </item>
    
    <item>
      <title>Shapely Window in PyQT</title>
      <link>http://unlogic.co.uk/2011/05/27/shapely-window-in-pyqt/</link>
      <pubDate>Fri, 27 May 2011 15:38:21 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2011/05/27/shapely-window-in-pyqt/</guid>
      <description>&lt;p&gt;Recently I needed to make a PyQt app where the &lt;strong&gt;window&lt;/strong&gt; is the shape of an image and doesn’t have a border. I say needed, that’s not strictly true, more like wanted to because it’d be more interesting.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

