<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Python on Unlogic </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://unlogic.co.uk/tags/python/</link>
    
    
    
    <updated>Fri, 04 Dec 2015 00:00:00 UTC</updated>
    
    <item>
      <title>Brewing with a Pi</title>
      <link>http://unlogic.co.uk/2015/12/04/brewing-with-a-pi/</link>
      <pubDate>Fri, 04 Dec 2015 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2015/12/04/brewing-with-a-pi/</guid>
      <description>It&amp;rsquo;s been a while since I&amp;rsquo;ve written here, but that doesn&amp;rsquo;t mean I haven&amp;rsquo;t been busy. I&amp;rsquo;ve been working on a DIY version of Speidel&amp;rsquo;s Braumeister and the software side of things has come along quite nicely. The idea is to have a Raspberry Pi controlled beer brewing system for cooking the wort across a temperature profile. Much like the Braumeister, or Grainfather style brewers. A probe monitors the temperature and will switch the heating on and off to maintain the current temperature.</description>
    </item>
    
    <item>
      <title>Extracting bup files in Linux</title>
      <link>http://unlogic.co.uk/2015/09/03/extracting-bup-files-in-linux/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2015/09/03/extracting-bup-files-in-linux/</guid>
      <description>I recently got hold of some malware that got snapped up by McAfee and stored in a bup file. Keen to take a look at it, I researched how to &amp;lsquo;unbup&amp;rsquo; files and found this page: http://blog.opensecurityresearch.com/2012/07/unbup-mcafee-bup-extractor-for-linux.html A slow bash script? A faster script in Perl? No, that won&amp;rsquo;t do. Rather than search for a Python implementation I decided to use this as an opportunity to write something, and thus my unbup.py was born.</description>
    </item>
    
    <item>
      <title>CLI Pizza</title>
      <link>http://unlogic.co.uk/2015/03/04/cli-pizza/</link>
      <pubDate>Wed, 04 Mar 2015 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2015/03/04/cli-pizza/</guid>
      <description>Recently someone was talking about ordering Pizza from within Houdini. I figured that it must be possible somehow. I looked for an API and only found a US based, possibly out of date, API for Dominos written in node.js. However I needed one that worked with the UK version of the Dominos site. So I began working on deconstructing the URLs that the Dominos site uses to get menus, place orders and such, and started building a Python API around that.</description>
    </item>
    
    <item>
      <title>Python: expect the unexpected</title>
      <link>http://unlogic.co.uk/2015/01/23/python-expect-the-unexpected/</link>
      <pubDate>Fri, 23 Jan 2015 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2015/01/23/python-expect-the-unexpected/</guid>
      <description>I&amp;rsquo;ve not really had much of a play with Python 3, but I&amp;rsquo;m aware of some of its differences. Yesterday I found out about a difference that took me by surprise. Enough of a surprise that I felt the urge to write this post. Opinion Divided What surprised me was how / has changed in Python 3. In Python 2.7 it returns the result of the division of two numbers. &amp;gt;&amp;gt;&amp;gt; 8/2 4 &amp;gt;&amp;gt;&amp;gt; 10/3 3 Checks out to me.</description>
    </item>
    
    <item>
      <title>[dis]like</title>
      <link>http://unlogic.co.uk/2015/01/05/dislike/</link>
      <pubDate>Mon, 05 Jan 2015 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2015/01/05/dislike/</guid>
      <description>Isn&amp;rsquo;t it just like me to start a new year with a post titled &amp;ldquo;[dis]like&amp;rdquo;? It&amp;rsquo;s not as bad as it sounds. I want to write about coding challenge sites and what I like and dislike about them, specifically regarding Python challenges. What I Like I take part in coding challenges regularily for various reasons and I get a great deal of benefit from them. Albeit some challenges are a bit contrived, they do offer some great practice in problem solving and writing clean code.</description>
    </item>
    
    <item>
      <title>Threading Python</title>
      <link>http://unlogic.co.uk/2014/04/11/threading-python/</link>
      <pubDate>Fri, 11 Apr 2014 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2014/04/11/threading-python/</guid>
      <description>Having helped my colleague deal with PyQt threads, I feel that this gif sums up threading in Python very well: Happy Friday</description>
    </item>
    
    <item>
      <title>Unit testing Houdini Python plugins with nose and coverage</title>
      <link>http://unlogic.co.uk/2014/03/20/unit-testing-houdini-plugins-with-nose-and-coverage/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2014/03/20/unit-testing-houdini-plugins-with-nose-and-coverage/</guid>
      <description>We all know how important unit testing is, right? But often you wonder how can you test a not so straight forward tool. In this case we&amp;rsquo;re talking about a Python script intended to run inside Houdini. In my specific case the python script is launched from a script on a node when the user clicks a button on the OTL. I want to run unit tests on this script, but the problem is that the script parses a set of nodes and does various things according to the types of nodes and layout of the nodes.</description>
    </item>
    
    <item>
      <title>Vim as a Python IDE</title>
      <link>http://unlogic.co.uk/2013/02/08/vim-as-a-python-ide/</link>
      <pubDate>Fri, 08 Feb 2013 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2013/02/08/vim-as-a-python-ide/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been spending quite a bit of time with our good old buddy Python recently, and when
I do, I always invite along our mutual friend Vim. He&amp;rsquo;s a barrell of laughs and always
knows of a quicker way to do things. So I&amp;rsquo;ve been getting the two acquainted more and more
and Vim&amp;rsquo;s turned into a totally different person. So I am going to share with you how
I setup Vim as my tool of choice when working with Python code. It&amp;rsquo;s by no means the
definitive way of working, but it works for me. I know there&amp;rsquo;s quite a few posts similar to this one,
but these are the tools &lt;strong&gt;I&lt;/strong&gt; find useful and use. If you have some suggestions, comments, or
know of additional tools that might be useful, I would like to hear about them in the comments
below.&lt;/p&gt;

&lt;p&gt;If you are a Vim user you might find this useful. If you are new to Vim I suggest spending some
time with it before installing any plugins. That way you get used to how Vim works out of the box.
Once you&amp;rsquo;re comfortable with using it, and you&amp;rsquo;ve gotten to grips with the Vim-way, go ahead and
install some extras.&lt;/p&gt;

&lt;p&gt;Right, let&amp;rsquo;s get started.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random album generator in python</title>
      <link>http://unlogic.co.uk/2012/11/06/random-album-generator/</link>
      <pubDate>Tue, 06 Nov 2012 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2012/11/06/random-album-generator/</guid>
      <description>&lt;p&gt;You may have heard about the &amp;ldquo;random music album&amp;rdquo; thing. Basically it goes like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The album cover is the 4th image from a random page of Flickr&amp;rsquo;s interesting pics&lt;/li&gt;
&lt;li&gt;The band name is the title of a random Wikipedia article&lt;/li&gt;
&lt;li&gt;The album name comes from the last 3 or 5 words of a famous quote&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is all well and good, but isn&amp;rsquo;t getting all this data manually, and then making the album cover a bit tedious? Sure it is, so let&amp;rsquo;s see how we can do this in python&lt;/p&gt;

&lt;p&gt;Here are some example images generated with this script (click for the full size picture):&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://unlogic.co.uk/images/content/album2.jpg&#34; /&gt;
    
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;http://unlogic.co.uk/images/content/album3.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://unlogic.co.uk/images/content/album4.jpg&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parsing email in python</title>
      <link>http://unlogic.co.uk/2012/10/11/parsing-email-in-python/</link>
      <pubDate>Thu, 11 Oct 2012 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2012/10/11/parsing-email-in-python/</guid>
      <description>&lt;p&gt;I have a domain where I host images. It&amp;rsquo;s nothing fancy, just a collection where gifs and generally humerous images get stored in a custom gallery script.
I also have a script on my host that I can pass a URL to and it will get the image with wget, put it in the right directory and then curl the import URL for the gallery. So if you&amp;rsquo;ve ever wanted to parse email addresses for content via a script, read on. Example code inside.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tube status for Conky</title>
      <link>http://unlogic.co.uk/2012/06/07/tube-status/</link>
      <pubDate>Thu, 07 Jun 2012 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2012/06/07/tube-status/</guid>
      <description>&lt;p&gt;Last night I was affected by &amp;ldquo;severe delays on the Central line&amp;rdquo; caused by a burst watermain and bringing part of the line to its knees. Unfortunately I only found this out once I got to the station. Usually the line is well behaved and I have little need to check it often. I know it&amp;rsquo;s really quick to do so and there&amp;rsquo;s a whole host of ways to dit too. But the problems I have with them are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Check online&lt;/strong&gt;: Have to remember to go online and check, which I often/always forget.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iPhone app&lt;/strong&gt;: Same again. Have to remember to actually do that each time I leave the office.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email alerts&lt;/strong&gt;: I get a fair bit of email each day and end up just clicking &lt;em&gt;delete&lt;/em&gt; or &lt;em&gt;mark as read&lt;/em&gt; on stuff like that&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So here&amp;rsquo;s what I&amp;rsquo;ve come up with&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sitting is bad</title>
      <link>http://unlogic.co.uk/2012/06/06/sitting-is-bad/</link>
      <pubDate>Wed, 06 Jun 2012 00:00:00 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2012/06/06/sitting-is-bad/</guid>
      <description>So the internet has recently been telling me that sitting is bad. Really bad. Well only if you sit for long periods of time. At my office it is very unlikely that they will be willing to furnish me with a standing desk unless my doctor tells them to. The latter also being unlikely as my back isn&amp;rsquo;t in a bad enough shape (yet). I&amp;rsquo;m also not willing to make my own version of a standing desk either, unless it was a better looking one :) So now what?</description>
    </item>
    
    <item>
      <title>Shapely Window in PyQT</title>
      <link>http://unlogic.co.uk/2011/05/27/shapely-window-in-pyqt/</link>
      <pubDate>Fri, 27 May 2011 15:38:21 UTC</pubDate>
      
      <guid>http://unlogic.co.uk/2011/05/27/shapely-window-in-pyqt/</guid>
      <description>&lt;p&gt;Recently I needed to make a PyQt app where the &lt;strong&gt;window&lt;/strong&gt; is the shape of an image and doesn’t have a border. I say needed, that’s not strictly true, more like wanted to because it’d be more interesting.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

